/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "maxY": 90034.0, "series": [{"data": [[0.0, 20.0], [0.1, 40.0], [0.2, 50.0], [0.3, 59.0], [0.4, 69.0], [0.5, 77.0], [0.6, 85.0], [0.7, 94.0], [0.8, 102.0], [0.9, 110.0], [1.0, 119.0], [1.1, 130.0], [1.2, 137.0], [1.3, 142.0], [1.4, 147.0], [1.5, 152.0], [1.6, 157.0], [1.7, 162.0], [1.8, 165.0], [1.9, 168.0], [2.0, 171.0], [2.1, 175.0], [2.2, 177.0], [2.3, 180.0], [2.4, 181.0], [2.5, 182.0], [2.6, 182.0], [2.7, 183.0], [2.8, 183.0], [2.9, 184.0], [3.0, 185.0], [3.1, 185.0], [3.2, 186.0], [3.3, 187.0], [3.4, 189.0], [3.5, 191.0], [3.6, 192.0], [3.7, 194.0], [3.8, 196.0], [3.9, 197.0], [4.0, 198.0], [4.1, 199.0], [4.2, 201.0], [4.3, 203.0], [4.4, 204.0], [4.5, 207.0], [4.6, 208.0], [4.7, 209.0], [4.8, 211.0], [4.9, 212.0], [5.0, 213.0], [5.1, 215.0], [5.2, 217.0], [5.3, 218.0], [5.4, 219.0], [5.5, 220.0], [5.6, 222.0], [5.7, 223.0], [5.8, 224.0], [5.9, 225.0], [6.0, 226.0], [6.1, 227.0], [6.2, 228.0], [6.3, 229.0], [6.4, 230.0], [6.5, 231.0], [6.6, 232.0], [6.7, 233.0], [6.8, 234.0], [6.9, 234.0], [7.0, 235.0], [7.1, 236.0], [7.2, 237.0], [7.3, 237.0], [7.4, 238.0], [7.5, 239.0], [7.6, 240.0], [7.7, 241.0], [7.8, 242.0], [7.9, 243.0], [8.0, 245.0], [8.1, 246.0], [8.2, 247.0], [8.3, 248.0], [8.4, 248.0], [8.5, 249.0], [8.6, 250.0], [8.7, 251.0], [8.8, 252.0], [8.9, 253.0], [9.0, 254.0], [9.1, 255.0], [9.2, 256.0], [9.3, 257.0], [9.4, 258.0], [9.5, 259.0], [9.6, 260.0], [9.7, 262.0], [9.8, 263.0], [9.9, 263.0], [10.0, 264.0], [10.1, 265.0], [10.2, 266.0], [10.3, 267.0], [10.4, 268.0], [10.5, 269.0], [10.6, 269.0], [10.7, 270.0], [10.8, 271.0], [10.9, 272.0], [11.0, 273.0], [11.1, 274.0], [11.2, 275.0], [11.3, 276.0], [11.4, 277.0], [11.5, 277.0], [11.6, 278.0], [11.7, 279.0], [11.8, 280.0], [11.9, 281.0], [12.0, 282.0], [12.1, 283.0], [12.2, 283.0], [12.3, 284.0], [12.4, 285.0], [12.5, 286.0], [12.6, 286.0], [12.7, 287.0], [12.8, 288.0], [12.9, 288.0], [13.0, 289.0], [13.1, 289.0], [13.2, 290.0], [13.3, 291.0], [13.4, 292.0], [13.5, 293.0], [13.6, 293.0], [13.7, 294.0], [13.8, 295.0], [13.9, 295.0], [14.0, 296.0], [14.1, 297.0], [14.2, 298.0], [14.3, 299.0], [14.4, 300.0], [14.5, 301.0], [14.6, 301.0], [14.7, 302.0], [14.8, 303.0], [14.9, 303.0], [15.0, 304.0], [15.1, 305.0], [15.2, 305.0], [15.3, 306.0], [15.4, 307.0], [15.5, 307.0], [15.6, 308.0], [15.7, 309.0], [15.8, 309.0], [15.9, 310.0], [16.0, 310.0], [16.1, 311.0], [16.2, 312.0], [16.3, 312.0], [16.4, 313.0], [16.5, 314.0], [16.6, 314.0], [16.7, 315.0], [16.8, 315.0], [16.9, 316.0], [17.0, 316.0], [17.1, 317.0], [17.2, 317.0], [17.3, 318.0], [17.4, 319.0], [17.5, 320.0], [17.6, 320.0], [17.7, 321.0], [17.8, 322.0], [17.9, 322.0], [18.0, 323.0], [18.1, 323.0], [18.2, 324.0], [18.3, 325.0], [18.4, 326.0], [18.5, 326.0], [18.6, 327.0], [18.7, 328.0], [18.8, 328.0], [18.9, 329.0], [19.0, 330.0], [19.1, 331.0], [19.2, 332.0], [19.3, 332.0], [19.4, 333.0], [19.5, 333.0], [19.6, 334.0], [19.7, 335.0], [19.8, 335.0], [19.9, 336.0], [20.0, 336.0], [20.1, 337.0], [20.2, 338.0], [20.3, 338.0], [20.4, 339.0], [20.5, 340.0], [20.6, 340.0], [20.7, 341.0], [20.8, 341.0], [20.9, 342.0], [21.0, 342.0], [21.1, 343.0], [21.2, 344.0], [21.3, 345.0], [21.4, 345.0], [21.5, 346.0], [21.6, 347.0], [21.7, 347.0], [21.8, 348.0], [21.9, 349.0], [22.0, 350.0], [22.1, 350.0], [22.2, 351.0], [22.3, 352.0], [22.4, 353.0], [22.5, 353.0], [22.6, 354.0], [22.7, 355.0], [22.8, 355.0], [22.9, 356.0], [23.0, 357.0], [23.1, 357.0], [23.2, 358.0], [23.3, 359.0], [23.4, 360.0], [23.5, 360.0], [23.6, 361.0], [23.7, 362.0], [23.8, 362.0], [23.9, 363.0], [24.0, 363.0], [24.1, 364.0], [24.2, 364.0], [24.3, 365.0], [24.4, 366.0], [24.5, 366.0], [24.6, 366.0], [24.7, 367.0], [24.8, 368.0], [24.9, 369.0], [25.0, 369.0], [25.1, 370.0], [25.2, 370.0], [25.3, 371.0], [25.4, 371.0], [25.5, 372.0], [25.6, 373.0], [25.7, 373.0], [25.8, 374.0], [25.9, 375.0], [26.0, 375.0], [26.1, 376.0], [26.2, 376.0], [26.3, 377.0], [26.4, 378.0], [26.5, 379.0], [26.6, 379.0], [26.7, 380.0], [26.8, 381.0], [26.9, 381.0], [27.0, 382.0], [27.1, 383.0], [27.2, 383.0], [27.3, 384.0], [27.4, 385.0], [27.5, 386.0], [27.6, 386.0], [27.7, 387.0], [27.8, 387.0], [27.9, 388.0], [28.0, 389.0], [28.1, 389.0], [28.2, 390.0], [28.3, 391.0], [28.4, 391.0], [28.5, 392.0], [28.6, 392.0], [28.7, 393.0], [28.8, 394.0], [28.9, 394.0], [29.0, 395.0], [29.1, 396.0], [29.2, 396.0], [29.3, 397.0], [29.4, 398.0], [29.5, 399.0], [29.6, 399.0], [29.7, 400.0], [29.8, 401.0], [29.9, 401.0], [30.0, 402.0], [30.1, 403.0], [30.2, 403.0], [30.3, 404.0], [30.4, 405.0], [30.5, 405.0], [30.6, 406.0], [30.7, 407.0], [30.8, 407.0], [30.9, 408.0], [31.0, 409.0], [31.1, 409.0], [31.2, 410.0], [31.3, 411.0], [31.4, 411.0], [31.5, 412.0], [31.6, 413.0], [31.7, 414.0], [31.8, 414.0], [31.9, 415.0], [32.0, 416.0], [32.1, 416.0], [32.2, 417.0], [32.3, 418.0], [32.4, 418.0], [32.5, 419.0], [32.6, 420.0], [32.7, 420.0], [32.8, 421.0], [32.9, 422.0], [33.0, 422.0], [33.1, 423.0], [33.2, 424.0], [33.3, 424.0], [33.4, 425.0], [33.5, 426.0], [33.6, 427.0], [33.7, 428.0], [33.8, 429.0], [33.9, 429.0], [34.0, 430.0], [34.1, 431.0], [34.2, 431.0], [34.3, 432.0], [34.4, 433.0], [34.5, 434.0], [34.6, 434.0], [34.7, 435.0], [34.8, 436.0], [34.9, 437.0], [35.0, 437.0], [35.1, 438.0], [35.2, 439.0], [35.3, 440.0], [35.4, 440.0], [35.5, 441.0], [35.6, 442.0], [35.7, 442.0], [35.8, 443.0], [35.9, 444.0], [36.0, 444.0], [36.1, 445.0], [36.2, 446.0], [36.3, 447.0], [36.4, 448.0], [36.5, 449.0], [36.6, 449.0], [36.7, 450.0], [36.8, 451.0], [36.9, 452.0], [37.0, 453.0], [37.1, 453.0], [37.2, 454.0], [37.3, 455.0], [37.4, 455.0], [37.5, 456.0], [37.6, 457.0], [37.7, 458.0], [37.8, 458.0], [37.9, 459.0], [38.0, 460.0], [38.1, 461.0], [38.2, 461.0], [38.3, 462.0], [38.4, 463.0], [38.5, 464.0], [38.6, 464.0], [38.7, 465.0], [38.8, 466.0], [38.9, 467.0], [39.0, 468.0], [39.1, 468.0], [39.2, 469.0], [39.3, 470.0], [39.4, 471.0], [39.5, 471.0], [39.6, 472.0], [39.7, 473.0], [39.8, 473.0], [39.9, 474.0], [40.0, 475.0], [40.1, 475.0], [40.2, 476.0], [40.3, 477.0], [40.4, 477.0], [40.5, 478.0], [40.6, 479.0], [40.7, 480.0], [40.8, 480.0], [40.9, 481.0], [41.0, 482.0], [41.1, 483.0], [41.2, 483.0], [41.3, 484.0], [41.4, 485.0], [41.5, 486.0], [41.6, 487.0], [41.7, 487.0], [41.8, 488.0], [41.9, 489.0], [42.0, 489.0], [42.1, 490.0], [42.2, 491.0], [42.3, 492.0], [42.4, 492.0], [42.5, 493.0], [42.6, 494.0], [42.7, 495.0], [42.8, 495.0], [42.9, 496.0], [43.0, 497.0], [43.1, 498.0], [43.2, 499.0], [43.3, 499.0], [43.4, 500.0], [43.5, 501.0], [43.6, 502.0], [43.7, 503.0], [43.8, 504.0], [43.9, 505.0], [44.0, 506.0], [44.1, 507.0], [44.2, 507.0], [44.3, 508.0], [44.4, 509.0], [44.5, 510.0], [44.6, 511.0], [44.7, 512.0], [44.8, 513.0], [44.9, 513.0], [45.0, 514.0], [45.1, 515.0], [45.2, 516.0], [45.3, 517.0], [45.4, 518.0], [45.5, 519.0], [45.6, 520.0], [45.7, 521.0], [45.8, 522.0], [45.9, 523.0], [46.0, 524.0], [46.1, 525.0], [46.2, 526.0], [46.3, 527.0], [46.4, 528.0], [46.5, 528.0], [46.6, 529.0], [46.7, 530.0], [46.8, 531.0], [46.9, 532.0], [47.0, 533.0], [47.1, 534.0], [47.2, 535.0], [47.3, 536.0], [47.4, 537.0], [47.5, 538.0], [47.6, 539.0], [47.7, 540.0], [47.8, 541.0], [47.9, 542.0], [48.0, 543.0], [48.1, 544.0], [48.2, 546.0], [48.3, 547.0], [48.4, 548.0], [48.5, 549.0], [48.6, 550.0], [48.7, 551.0], [48.8, 552.0], [48.9, 553.0], [49.0, 554.0], [49.1, 555.0], [49.2, 556.0], [49.3, 557.0], [49.4, 558.0], [49.5, 559.0], [49.6, 560.0], [49.7, 561.0], [49.8, 562.0], [49.9, 563.0], [50.0, 564.0], [50.1, 565.0], [50.2, 566.0], [50.3, 567.0], [50.4, 568.0], [50.5, 568.0], [50.6, 570.0], [50.7, 571.0], [50.8, 572.0], [50.9, 573.0], [51.0, 574.0], [51.1, 575.0], [51.2, 576.0], [51.3, 577.0], [51.4, 579.0], [51.5, 580.0], [51.6, 581.0], [51.7, 582.0], [51.8, 583.0], [51.9, 584.0], [52.0, 585.0], [52.1, 586.0], [52.2, 588.0], [52.3, 589.0], [52.4, 590.0], [52.5, 591.0], [52.6, 593.0], [52.7, 594.0], [52.8, 595.0], [52.9, 596.0], [53.0, 598.0], [53.1, 599.0], [53.2, 600.0], [53.3, 601.0], [53.4, 603.0], [53.5, 604.0], [53.6, 606.0], [53.7, 607.0], [53.8, 608.0], [53.9, 610.0], [54.0, 611.0], [54.1, 612.0], [54.2, 613.0], [54.3, 615.0], [54.4, 616.0], [54.5, 617.0], [54.6, 618.0], [54.7, 620.0], [54.8, 621.0], [54.9, 622.0], [55.0, 624.0], [55.1, 625.0], [55.2, 626.0], [55.3, 627.0], [55.4, 628.0], [55.5, 629.0], [55.6, 631.0], [55.7, 632.0], [55.8, 633.0], [55.9, 634.0], [56.0, 635.0], [56.1, 636.0], [56.2, 637.0], [56.3, 639.0], [56.4, 640.0], [56.5, 641.0], [56.6, 643.0], [56.7, 644.0], [56.8, 645.0], [56.9, 647.0], [57.0, 648.0], [57.1, 649.0], [57.2, 650.0], [57.3, 651.0], [57.4, 653.0], [57.5, 655.0], [57.6, 656.0], [57.7, 658.0], [57.8, 660.0], [57.9, 661.0], [58.0, 662.0], [58.1, 664.0], [58.2, 665.0], [58.3, 667.0], [58.4, 668.0], [58.5, 670.0], [58.6, 671.0], [58.7, 672.0], [58.8, 673.0], [58.9, 675.0], [59.0, 677.0], [59.1, 678.0], [59.2, 680.0], [59.3, 681.0], [59.4, 683.0], [59.5, 684.0], [59.6, 685.0], [59.7, 687.0], [59.8, 689.0], [59.9, 690.0], [60.0, 692.0], [60.1, 693.0], [60.2, 695.0], [60.3, 697.0], [60.4, 698.0], [60.5, 700.0], [60.6, 702.0], [60.7, 703.0], [60.8, 705.0], [60.9, 706.0], [61.0, 708.0], [61.1, 709.0], [61.2, 711.0], [61.3, 712.0], [61.4, 714.0], [61.5, 715.0], [61.6, 717.0], [61.7, 719.0], [61.8, 721.0], [61.9, 722.0], [62.0, 724.0], [62.1, 725.0], [62.2, 727.0], [62.3, 729.0], [62.4, 731.0], [62.5, 732.0], [62.6, 734.0], [62.7, 736.0], [62.8, 737.0], [62.9, 739.0], [63.0, 741.0], [63.1, 744.0], [63.2, 746.0], [63.3, 747.0], [63.4, 749.0], [63.5, 751.0], [63.6, 753.0], [63.7, 755.0], [63.8, 757.0], [63.9, 759.0], [64.0, 761.0], [64.1, 763.0], [64.2, 765.0], [64.3, 767.0], [64.4, 769.0], [64.5, 772.0], [64.6, 774.0], [64.7, 776.0], [64.8, 778.0], [64.9, 781.0], [65.0, 783.0], [65.1, 785.0], [65.2, 787.0], [65.3, 790.0], [65.4, 792.0], [65.5, 794.0], [65.6, 797.0], [65.7, 800.0], [65.8, 802.0], [65.9, 804.0], [66.0, 806.0], [66.1, 808.0], [66.2, 810.0], [66.3, 813.0], [66.4, 815.0], [66.5, 817.0], [66.6, 820.0], [66.7, 822.0], [66.8, 824.0], [66.9, 827.0], [67.0, 829.0], [67.1, 832.0], [67.2, 834.0], [67.3, 837.0], [67.4, 840.0], [67.5, 843.0], [67.6, 845.0], [67.7, 847.0], [67.8, 851.0], [67.9, 853.0], [68.0, 857.0], [68.1, 859.0], [68.2, 863.0], [68.3, 866.0], [68.4, 869.0], [68.5, 871.0], [68.6, 875.0], [68.7, 879.0], [68.8, 881.0], [68.9, 883.0], [69.0, 887.0], [69.1, 890.0], [69.2, 894.0], [69.3, 897.0], [69.4, 900.0], [69.5, 905.0], [69.6, 908.0], [69.7, 912.0], [69.8, 916.0], [69.9, 921.0], [70.0, 924.0], [70.1, 929.0], [70.2, 934.0], [70.3, 939.0], [70.4, 943.0], [70.5, 948.0], [70.6, 955.0], [70.7, 959.0], [70.8, 964.0], [70.9, 969.0], [71.0, 974.0], [71.1, 978.0], [71.2, 982.0], [71.3, 987.0], [71.4, 991.0], [71.5, 998.0], [71.6, 1003.0], [71.7, 1008.0], [71.8, 1015.0], [71.9, 1022.0], [72.0, 1029.0], [72.1, 1037.0], [72.2, 1045.0], [72.3, 1053.0], [72.4, 1060.0], [72.5, 1068.0], [72.6, 1077.0], [72.7, 1086.0], [72.8, 1096.0], [72.9, 1103.0], [73.0, 1114.0], [73.1, 1124.0], [73.2, 1132.0], [73.3, 1147.0], [73.4, 1158.0], [73.5, 1170.0], [73.6, 1182.0], [73.7, 1196.0], [73.8, 1206.0], [73.9, 1217.0], [74.0, 1227.0], [74.1, 1239.0], [74.2, 1252.0], [74.3, 1264.0], [74.4, 1280.0], [74.5, 1297.0], [74.6, 1313.0], [74.7, 1330.0], [74.8, 1345.0], [74.9, 1357.0], [75.0, 1376.0], [75.1, 1394.0], [75.2, 1410.0], [75.3, 1430.0], [75.4, 1451.0], [75.5, 1483.0], [75.6, 1508.0], [75.7, 1534.0], [75.8, 1565.0], [75.9, 1591.0], [76.0, 1628.0], [76.1, 1655.0], [76.2, 1686.0], [76.3, 1717.0], [76.4, 1752.0], [76.5, 1789.0], [76.6, 1819.0], [76.7, 1855.0], [76.8, 1885.0], [76.9, 1923.0], [77.0, 1968.0], [77.1, 2018.0], [77.2, 2063.0], [77.3, 2105.0], [77.4, 2165.0], [77.5, 2209.0], [77.6, 2263.0], [77.7, 2334.0], [77.8, 2390.0], [77.9, 2469.0], [78.0, 2532.0], [78.1, 2599.0], [78.2, 2661.0], [78.3, 2732.0], [78.4, 2799.0], [78.5, 2853.0], [78.6, 2940.0], [78.7, 3023.0], [78.8, 3131.0], [78.9, 3268.0], [79.0, 3360.0], [79.1, 3534.0], [79.2, 3752.0], [79.3, 4036.0], [79.4, 4440.0], [79.5, 5143.0], [79.6, 30002.0], [79.7, 30002.0], [79.8, 30002.0], [79.9, 30002.0], [80.0, 30002.0], [80.1, 30002.0], [80.2, 30002.0], [80.3, 30002.0], [80.4, 30002.0], [80.5, 30002.0], [80.6, 30002.0], [80.7, 30002.0], [80.8, 30002.0], [80.9, 30002.0], [81.0, 30002.0], [81.1, 30002.0], [81.2, 30002.0], [81.3, 30002.0], [81.4, 30002.0], [81.5, 30002.0], [81.6, 30002.0], [81.7, 30002.0], [81.8, 30002.0], [81.9, 30002.0], [82.0, 30002.0], [82.1, 30002.0], [82.2, 30002.0], [82.3, 30002.0], [82.4, 30002.0], [82.5, 30002.0], [82.6, 30002.0], [82.7, 30002.0], [82.8, 30002.0], [82.9, 30002.0], [83.0, 30003.0], [83.1, 30003.0], [83.2, 30003.0], [83.3, 30003.0], [83.4, 30003.0], [83.5, 30003.0], [83.6, 30003.0], [83.7, 30003.0], [83.8, 30003.0], [83.9, 30003.0], [84.0, 30003.0], [84.1, 30003.0], [84.2, 30003.0], [84.3, 30003.0], [84.4, 30003.0], [84.5, 30003.0], [84.6, 30003.0], [84.7, 30003.0], [84.8, 30003.0], [84.9, 30003.0], [85.0, 30003.0], [85.1, 30003.0], [85.2, 30003.0], [85.3, 30003.0], [85.4, 30003.0], [85.5, 30003.0], [85.6, 30003.0], [85.7, 30003.0], [85.8, 30003.0], [85.9, 30003.0], [86.0, 30003.0], [86.1, 30003.0], [86.2, 30003.0], [86.3, 30003.0], [86.4, 30003.0], [86.5, 30003.0], [86.6, 30003.0], [86.7, 30003.0], [86.8, 30003.0], [86.9, 30003.0], [87.0, 30003.0], [87.1, 30003.0], [87.2, 30003.0], [87.3, 30003.0], [87.4, 30003.0], [87.5, 30003.0], [87.6, 30003.0], [87.7, 30003.0], [87.8, 30003.0], [87.9, 30003.0], [88.0, 30003.0], [88.1, 30003.0], [88.2, 30003.0], [88.3, 30003.0], [88.4, 30003.0], [88.5, 30003.0], [88.6, 30003.0], [88.7, 30003.0], [88.8, 30003.0], [88.9, 30003.0], [89.0, 30003.0], [89.1, 30003.0], [89.2, 30003.0], [89.3, 30003.0], [89.4, 30003.0], [89.5, 30003.0], [89.6, 30003.0], [89.7, 30003.0], [89.8, 30003.0], [89.9, 30003.0], [90.0, 30003.0], [90.1, 30003.0], [90.2, 30003.0], [90.3, 30003.0], [90.4, 30003.0], [90.5, 30003.0], [90.6, 30003.0], [90.7, 30003.0], [90.8, 30003.0], [90.9, 30003.0], [91.0, 30003.0], [91.1, 30003.0], [91.2, 30003.0], [91.3, 30003.0], [91.4, 30003.0], [91.5, 30003.0], [91.6, 30003.0], [91.7, 30003.0], [91.8, 30003.0], [91.9, 30003.0], [92.0, 30003.0], [92.1, 30003.0], [92.2, 30003.0], [92.3, 30003.0], [92.4, 30003.0], [92.5, 30003.0], [92.6, 30003.0], [92.7, 30003.0], [92.8, 30003.0], [92.9, 30003.0], [93.0, 30003.0], [93.1, 30003.0], [93.2, 30003.0], [93.3, 30003.0], [93.4, 30003.0], [93.5, 30003.0], [93.6, 30003.0], [93.7, 30003.0], [93.8, 30003.0], [93.9, 30003.0], [94.0, 30003.0], [94.1, 30003.0], [94.2, 30003.0], [94.3, 30003.0], [94.4, 30003.0], [94.5, 30003.0], [94.6, 30004.0], [94.7, 30004.0], [94.8, 30004.0], [94.9, 30004.0], [95.0, 30004.0], [95.1, 30004.0], [95.2, 30004.0], [95.3, 30004.0], [95.4, 30004.0], [95.5, 30004.0], [95.6, 30004.0], [95.7, 30004.0], [95.8, 30004.0], [95.9, 30004.0], [96.0, 30005.0], [96.1, 30005.0], [96.2, 30006.0], [96.3, 30007.0], [96.4, 30009.0], [96.5, 60017.0], [96.6, 60185.0], [96.7, 60248.0], [96.8, 60284.0], [96.9, 60311.0], [97.0, 60332.0], [97.1, 60353.0], [97.2, 60369.0], [97.3, 60385.0], [97.4, 60404.0], [97.5, 60422.0], [97.6, 60440.0], [97.7, 60455.0], [97.8, 60471.0], [97.9, 60489.0], [98.0, 60507.0], [98.1, 60523.0], [98.2, 60543.0], [98.3, 60565.0], [98.4, 60592.0], [98.5, 60614.0], [98.6, 60640.0], [98.7, 60664.0], [98.8, 60701.0], [98.9, 60736.0], [99.0, 60761.0], [99.1, 60805.0], [99.2, 60856.0], [99.3, 60917.0], [99.4, 60995.0], [99.5, 61118.0], [99.6, 61331.0], [99.7, 61586.0], [99.8, 62233.0], [99.9, 90002.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9028.0, "series": [{"data": [[0.0, 404.0], [100.0, 1799.0], [200.0, 5476.0], [60700.0, 160.0], [60500.0, 259.0], [60900.0, 81.0], [60300.0, 274.0], [60100.0, 51.0], [61100.0, 33.0], [61300.0, 23.0], [63300.0, 4.0], [61700.0, 11.0], [62100.0, 6.0], [62900.0, 5.0], [61500.0, 13.0], [62300.0, 4.0], [61900.0, 9.0], [62700.0, 3.0], [62500.0, 4.0], [63100.0, 2.0], [63700.0, 2.0], [63900.0, 2.0], [300.0, 8143.0], [400.0, 7335.0], [500.0, 5248.0], [600.0, 3903.0], [700.0, 2797.0], [800.0, 1959.0], [900.0, 1155.0], [1000.0, 711.0], [1100.0, 467.0], [1200.0, 413.0], [1300.0, 340.0], [1400.0, 225.0], [1500.0, 190.0], [1600.0, 174.0], [1700.0, 161.0], [1800.0, 160.0], [1900.0, 113.0], [2000.0, 128.0], [2100.0, 106.0], [2200.0, 87.0], [2300.0, 84.0], [2400.0, 79.0], [2500.0, 75.0], [2600.0, 88.0], [2800.0, 82.0], [2700.0, 73.0], [2900.0, 61.0], [3000.0, 52.0], [3100.0, 40.0], [3200.0, 46.0], [3300.0, 49.0], [3400.0, 30.0], [3500.0, 32.0], [3700.0, 19.0], [3600.0, 20.0], [3800.0, 23.0], [3900.0, 21.0], [4000.0, 16.0], [4100.0, 8.0], [4300.0, 14.0], [4200.0, 12.0], [4500.0, 11.0], [4400.0, 14.0], [4600.0, 9.0], [4800.0, 5.0], [4700.0, 11.0], [5100.0, 6.0], [5000.0, 3.0], [4900.0, 8.0], [5200.0, 5.0], [5300.0, 3.0], [5400.0, 4.0], [5500.0, 2.0], [5600.0, 3.0], [5900.0, 1.0], [30000.0, 9028.0], [61200.0, 25.0], [60000.0, 45.0], [60800.0, 97.0], [60600.0, 190.0], [60400.0, 309.0], [60200.0, 126.0], [61400.0, 23.0], [61000.0, 34.0], [61600.0, 12.0], [62200.0, 7.0], [62000.0, 5.0], [62800.0, 5.0], [62400.0, 1.0], [61800.0, 7.0], [63000.0, 2.0], [62600.0, 1.0], [65000.0, 1.0], [63600.0, 1.0], [64200.0, 1.0], [63800.0, 1.0], [90000.0, 63.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 90000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2891.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18122.0, "series": [{"data": [[0.0, 18122.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15021.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2891.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 17399.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.68605676E12, "maxY": 100.0, "series": [{"data": [[1.68605748E12, 100.0], [1.6860591E12, 100.0], [1.6860609E12, 99.31487341772153], [1.6860597E12, 100.0], [1.68605808E12, 100.0], [1.6860603E12, 100.0], [1.6860579E12, 100.0], [1.68606048E12, 100.0], [1.6860585E12, 100.0], [1.68605988E12, 100.0], [1.68605688E12, 38.68503937007872], [1.6860615E12, 2.5], [1.68606072E12, 100.0], [1.68605766E12, 100.0], [1.68605826E12, 100.0], [1.68606012E12, 100.0], [1.68605868E12, 100.0], [1.68606132E12, 54.22146118721459], [1.68605706E12, 60.21805792163543], [1.68605928E12, 100.0], [1.68606024E12, 100.0], [1.68605844E12, 100.0], [1.68605682E12, 21.676470588235293], [1.68605904E12, 100.0], [1.68606126E12, 39.501618122977334], [1.68605724E12, 39.766798418972314], [1.68605886E12, 100.0], [1.68606144E12, 25.875000000000004], [1.68606084E12, 100.0], [1.68605946E12, 100.0], [1.68605784E12, 100.0], [1.68605862E12, 100.0], [1.686057E12, 31.22047244094488], [1.6860576E12, 100.0], [1.68605922E12, 100.0], [1.68606108E12, 65.67628865979378], [1.68606066E12, 100.0], [1.68605742E12, 100.0], [1.68605964E12, 100.0], [1.68605802E12, 100.0], [1.68606006E12, 100.0], [1.6860612E12, 51.644736842105246], [1.68605718E12, 54.60539215686279], [1.6860594E12, 100.0], [1.68605778E12, 100.0], [1.6860606E12, 100.0], [1.68605982E12, 100.0], [1.6860582E12, 100.0], [1.68606018E12, 100.0], [1.6860588E12, 100.0], [1.68605958E12, 100.0], [1.68605796E12, 100.0], [1.68606042E12, 100.0], [1.68605856E12, 100.0], [1.68605838E12, 100.0], [1.68606E12, 100.0], [1.68605676E12, 19.384210526315794], [1.68605736E12, 100.0], [1.68605898E12, 100.0], [1.68606102E12, 27.518518518518523], [1.68605814E12, 100.0], [1.68605994E12, 100.0], [1.68605874E12, 100.0], [1.68605712E12, 74.85689354275743], [1.68605694E12, 49.86774193548388], [1.68605916E12, 100.0], [1.68606114E12, 74.68316831683168], [1.68606054E12, 100.0], [1.68605754E12, 100.0], [1.68605976E12, 100.0], [1.68605892E12, 100.0], [1.68606138E12, 51.93288590604029], [1.68606078E12, 100.0], [1.6860573E12, 89.29012345679023], [1.68605952E12, 100.0], [1.68605772E12, 100.0], [1.68605934E12, 100.0], [1.68606096E12, 70.84046692606998], [1.68606036E12, 100.0], [1.68605832E12, 100.0]], "isOverall": false, "label": "OM2M-Insertion Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6860615E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3578.234042553192, "minX": 1.0, "maxY": 90034.0, "series": [{"data": [[2.0, 90034.0], [3.0, 10213.5], [4.0, 20248.0], [5.0, 10210.666666666666], [6.0, 13003.857142857145], [7.0, 20251.666666666668], [8.0, 15164.833333333332], [9.0, 8781.857142857143], [10.0, 6815.0], [11.0, 4916.842105263158], [12.0, 9684.499999999998], [13.0, 4774.2307692307695], [14.0, 5159.500000000002], [15.0, 7668.2], [16.0, 8200.933333333332], [17.0, 7685.535714285714], [18.0, 6719.178571428572], [19.0, 6720.964285714286], [20.0, 9134.777777777781], [21.0, 7514.000000000001], [22.0, 8413.145454545453], [23.0, 6617.212121212121], [24.0, 5889.916666666666], [25.0, 5590.055147058823], [26.0, 8010.974358974359], [27.0, 6956.100000000001], [28.0, 9842.71428571428], [29.0, 6191.670731707319], [30.0, 10208.025316455698], [31.0, 10581.050632911392], [32.0, 9394.373493975905], [33.0, 9922.641509433963], [34.0, 9845.21951219512], [35.0, 7551.4000000000015], [36.0, 7280.692307692308], [37.0, 9260.491228070176], [38.0, 9751.098039215685], [39.0, 9362.824999999997], [40.0, 6636.206896551722], [41.0, 8890.447761194022], [42.0, 6948.687499999997], [43.0, 10658.409836065573], [44.0, 7852.138888888889], [45.0, 5980.428571428572], [46.0, 8380.917525773193], [47.0, 7412.852941176472], [48.0, 6452.574074074073], [49.0, 7127.24193548387], [50.0, 8169.045510455106], [51.0, 7010.902439024392], [52.0, 7414.281250000001], [53.0, 8234.285714285714], [54.0, 4611.701754385965], [55.0, 6810.675], [56.0, 6144.323809523811], [57.0, 8329.407894736843], [58.0, 7192.943661971832], [59.0, 5091.500000000001], [60.0, 5739.805970149255], [61.0, 6431.985714285716], [62.0, 8019.195402298849], [63.0, 7067.428571428574], [64.0, 8731.164835164835], [65.0, 6640.618556701032], [66.0, 7398.223214285718], [67.0, 8907.397435897437], [68.0, 3578.234042553192], [69.0, 8178.4098360655735], [70.0, 5257.229508196722], [71.0, 6368.560439560439], [72.0, 7381.04081632653], [73.0, 6160.810526315792], [74.0, 6935.1790123456785], [75.0, 7413.534545454542], [76.0, 7365.941176470587], [77.0, 9733.999999999998], [78.0, 8354.466666666667], [79.0, 11640.131578947368], [80.0, 6507.700000000001], [81.0, 5011.785714285716], [82.0, 12410.4], [83.0, 9231.47619047619], [84.0, 7327.846153846154], [85.0, 6480.4], [86.0, 14769.904761904761], [87.0, 6638.25], [88.0, 7938.5], [89.0, 4682.142857142857], [90.0, 8619.944444444442], [91.0, 7509.576923076923], [92.0, 5619.176470588235], [93.0, 8701.51515151515], [94.0, 4597.95890410959], [95.0, 4221.518518518519], [96.0, 8494.545454545454], [97.0, 8532.846153846154], [98.0, 8450.2], [99.0, 9977.145833333332], [100.0, 7775.392176313342], [1.0, 30279.5]], "isOverall": false, "label": "create cin", "isController": false}, {"data": [[94.25914696910145, 7748.6558493815255]], "isOverall": false, "label": "create cin-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 27.466666666666665, "minX": 1.68605676E12, "maxY": 10872.733333333334, "series": [{"data": [[1.68605748E12, 9037.766666666666], [1.6860591E12, 4459.95], [1.6860609E12, 5415.016666666666], [1.6860597E12, 6970.816666666667], [1.68605808E12, 8287.766666666666], [1.6860603E12, 5334.716666666666], [1.6860579E12, 8297.266666666666], [1.68606048E12, 4686.95], [1.6860585E12, 7188.3], [1.68605988E12, 7238.05], [1.68605688E12, 3902.4], [1.6860615E12, 37.93333333333333], [1.68606072E12, 5082.666666666667], [1.68605766E12, 10872.733333333334], [1.68605826E12, 7230.533333333334], [1.68606012E12, 5120.716666666666], [1.68605868E12, 8303.866666666667], [1.68606132E12, 4145.6], [1.68605706E12, 5861.533333333334], [1.68605928E12, 8820.45], [1.68606024E12, 4508.133333333333], [1.68605844E12, 6937.816666666667], [1.68605682E12, 2153.016666666667], [1.68605904E12, 4901.583333333333], [1.68606126E12, 3054.4666666666667], [1.68605724E12, 2440.483333333333], [1.68605886E12, 6652.616666666667], [1.68606144E12, 729.5833333333334], [1.68606084E12, 5915.466666666666], [1.68605946E12, 4377.05], [1.68605784E12, 8848.75], [1.68605862E12, 4158.416666666667], [1.686057E12, 2436.9333333333334], [1.6860576E12, 10230.566666666668], [1.68605922E12, 5774.95], [1.68606108E12, 4515.95], [1.68606066E12, 4606.666666666667], [1.68605742E12, 10496.483333333334], [1.68605964E12, 5633.366666666667], [1.68605802E12, 8411.933333333332], [1.68606006E12, 5351.233333333334], [1.6860612E12, 2736.2166666666667], [1.68605718E12, 3588.483333333333], [1.6860594E12, 4713.783333333334], [1.68605778E12, 10190.25], [1.6860606E12, 5088.366666666667], [1.68605982E12, 5995.983333333334], [1.6860582E12, 8597.066666666668], [1.68606018E12, 4998.016666666666], [1.6860588E12, 8829.316666666668], [1.68605958E12, 4522.633333333333], [1.68605796E12, 7665.316666666667], [1.68606042E12, 7261.1], [1.68605856E12, 7332.516666666666], [1.68605838E12, 8014.433333333333], [1.68606E12, 6970.65], [1.68605676E12, 1994.1333333333334], [1.68605736E12, 10187.3], [1.68605898E12, 6535.05], [1.68606102E12, 2124.7833333333333], [1.68605814E12, 8565.15], [1.68605994E12, 5682.983333333334], [1.68605874E12, 6820.1], [1.68605712E12, 5410.1], [1.68605694E12, 2946.233333333333], [1.68605916E12, 7387.566666666667], [1.68606114E12, 5642.716666666666], [1.68606054E12, 5146.25], [1.68605754E12, 8790.383333333333], [1.68605976E12, 7068.75], [1.68605892E12, 5253.816666666667], [1.68606138E12, 2615.633333333333], [1.68606078E12, 4334.9], [1.6860573E12, 9098.683333333332], [1.68605952E12, 4687.966666666666], [1.68605772E12, 7321.15], [1.68605934E12, 6200.716666666666], [1.68606096E12, 4561.566666666667], [1.68606036E12, 5675.8], [1.68605832E12, 8218.633333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68605748E12, 6763.666666666667], [1.6860591E12, 3907.133333333333], [1.6860609E12, 4339.733333333334], [1.6860597E12, 5397.2], [1.68605808E12, 6351.666666666667], [1.6860603E12, 4408.4], [1.6860579E12, 6289.866666666667], [1.68606048E12, 3817.866666666667], [1.6860585E12, 5596.333333333333], [1.68605988E12, 5500.2], [1.68605688E12, 2616.2], [1.6860615E12, 27.466666666666665], [1.68606072E12, 4161.2], [1.68605766E12, 7999.666666666667], [1.68605826E12, 5486.466666666666], [1.68606012E12, 4003.266666666667], [1.68605868E12, 6234.933333333333], [1.68606132E12, 3007.6], [1.68605706E12, 4030.733333333333], [1.68605928E12, 6763.666666666667], [1.68606024E12, 4044.4666666666667], [1.68605844E12, 5287.333333333333], [1.68605682E12, 1400.8], [1.68605904E12, 4236.733333333334], [1.68606126E12, 2121.8], [1.68605724E12, 1737.2666666666667], [1.68605886E12, 5019.533333333334], [1.68606144E12, 549.3333333333334], [1.68606084E12, 4669.333333333333], [1.68605946E12, 3852.2], [1.68605784E12, 6708.733333333334], [1.68605862E12, 3611.866666666667], [1.686057E12, 1744.1333333333334], [1.6860576E12, 7525.866666666667], [1.68605922E12, 4525.133333333333], [1.68606108E12, 3330.3333333333335], [1.68606066E12, 3742.3333333333335], [1.68605742E12, 7560.2], [1.68605964E12, 4566.333333333333], [1.68605802E12, 6186.866666666667], [1.68606006E12, 4106.266666666666], [1.6860612E12, 2087.4666666666667], [1.68605718E12, 2801.6], [1.6860594E12, 3694.266666666667], [1.68605778E12, 7704.4], [1.6860606E12, 3934.6], [1.68605982E12, 4758.6], [1.6860582E12, 6447.8], [1.68606018E12, 4023.866666666667], [1.6860588E12, 6646.933333333333], [1.68605958E12, 4017.0], [1.68605796E12, 5781.733333333334], [1.68606042E12, 5500.2], [1.68605856E12, 5520.8], [1.68605838E12, 6303.6], [1.68606E12, 5410.933333333333], [1.68605676E12, 1304.6666666666667], [1.68605736E12, 7409.133333333333], [1.68605898E12, 5129.4], [1.68606102E12, 1483.2], [1.68605814E12, 6351.666666666667], [1.68605994E12, 4456.466666666666], [1.68605874E12, 5184.333333333333], [1.68605712E12, 3934.6], [1.68605694E12, 2128.6666666666665], [1.68605916E12, 5802.333333333333], [1.68606114E12, 4161.2], [1.68606054E12, 4140.6], [1.68605754E12, 6578.266666666666], [1.68605976E12, 5438.4], [1.68605892E12, 4305.4], [1.68606138E12, 2046.2666666666667], [1.68606078E12, 3975.8], [1.6860573E12, 6674.4], [1.68605952E12, 4058.2], [1.68605772E12, 5555.133333333333], [1.68605934E12, 4854.733333333334], [1.68606096E12, 3529.4666666666667], [1.68606036E12, 4456.466666666666], [1.68605832E12, 6083.866666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6860615E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2536.942105263157, "minX": 1.68605676E12, "maxY": 67765.5, "series": [{"data": [[1.68605748E12, 5953.009137055834], [1.6860591E12, 10928.592267135331], [1.6860609E12, 9736.278481012656], [1.6860597E12, 8206.824427480919], [1.68605808E12, 6574.804324324325], [1.6860603E12, 9843.179127725865], [1.6860579E12, 6676.567685589526], [1.68606048E12, 11260.23201438849], [1.6860585E12, 6917.473619631905], [1.68605988E12, 7323.330836454429], [1.68605688E12, 3559.648293963254], [1.6860615E12, 67765.5], [1.68606072E12, 9131.853135313544], [1.68605766E12, 5229.528755364804], [1.68605826E12, 6998.067584480605], [1.68606012E12, 9613.28987993139], [1.68605868E12, 6240.678414096919], [1.68606132E12, 7521.602739726024], [1.68605706E12, 4351.105621805796], [1.68605928E12, 6365.7959390862925], [1.68606024E12, 11049.5297113752], [1.68605844E12, 7140.710389610396], [1.68605682E12, 8240.730392156858], [1.68605904E12, 10808.090761750418], [1.68606126E12, 6940.3656957928815], [1.68605724E12, 5710.118577075102], [1.68605886E12, 7673.034199726395], [1.68606144E12, 20870.174999999996], [1.68606084E12, 8576.061764705879], [1.68605946E12, 10882.800356506244], [1.68605784E12, 6239.1760491299865], [1.68605862E12, 12302.712927756656], [1.686057E12, 8110.0669291338545], [1.6860576E12, 5585.160583941613], [1.68605922E12, 9046.376327769354], [1.68606108E12, 5813.412371134019], [1.68606066E12, 10374.069724770648], [1.68605742E12, 5524.171662125343], [1.68605964E12, 8712.92330827067], [1.68605802E12, 6702.392896781348], [1.68606006E12, 9106.478260869566], [1.6860612E12, 11161.167763157897], [1.68605718E12, 10888.014705882353], [1.6860594E12, 9625.734200743495], [1.68605778E12, 5418.912655971478], [1.6860606E12, 8783.534031413608], [1.68605982E12, 9030.453102453112], [1.6860582E12, 6875.186368477108], [1.68606018E12, 10031.674061433443], [1.6860588E12, 6454.925619834715], [1.68605958E12, 11082.6393162393], [1.68605796E12, 7038.597387173386], [1.68606042E12, 7874.13483146067], [1.68605856E12, 6858.514925373135], [1.68605838E12, 7039.783224400868], [1.68606E12, 6859.159898477156], [1.68605676E12, 2536.942105263157], [1.68605736E12, 5555.974050046329], [1.68605898E12, 7655.479250334658], [1.68606102E12, 9914.374999999998], [1.68605814E12, 6186.956756756753], [1.68605994E12, 9476.223420647155], [1.68605874E12, 8153.777483443709], [1.68605712E12, 7756.607329842932], [1.68605694E12, 9726.490322580647], [1.68605916E12, 7030.8106508875935], [1.68606114E12, 7676.3745874587485], [1.68606054E12, 10598.331674958545], [1.68605754E12, 6212.401878914412], [1.68605976E12, 7602.439393939395], [1.68605892E12, 10637.253588516734], [1.68606138E12, 9858.114093959735], [1.68606078E12, 11338.407599309156], [1.6860573E12, 4195.400205761322], [1.68605952E12, 10531.934010152274], [1.68605772E12, 7353.578491965389], [1.68605934E12, 7679.079207920802], [1.68606096E12, 10104.593385214012], [1.68606036E12, 9340.832049306635], [1.68605832E12, 6963.244920993232]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6860615E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2536.873684210524, "minX": 1.68605676E12, "maxY": 67765.5, "series": [{"data": [[1.68605748E12, 5953.005076142131], [1.6860591E12, 10928.578207381377], [1.6860609E12, 9736.276898734168], [1.6860597E12, 8206.81424936388], [1.68605808E12, 6574.794594594594], [1.6860603E12, 9843.169781931456], [1.6860579E12, 6676.561135371187], [1.68606048E12, 11260.223021582731], [1.6860585E12, 6917.467484662577], [1.68605988E12, 7323.319600499386], [1.68605688E12, 3559.629921259841], [1.6860615E12, 67765.5], [1.68606072E12, 9131.851485148525], [1.68605766E12, 5229.519313304722], [1.68605826E12, 6998.056320400505], [1.68606012E12, 9613.279588336198], [1.68605868E12, 6240.669603524231], [1.68606132E12, 7521.600456621004], [1.68605706E12, 4351.081771720608], [1.68605928E12, 6365.785786802025], [1.68606024E12, 11049.526315789475], [1.68605844E12, 7140.706493506502], [1.68605682E12, 8240.681372549021], [1.68605904E12, 10808.082658022691], [1.68606126E12, 6940.359223300973], [1.68605724E12, 5710.106719367589], [1.68605886E12, 7673.0246238030195], [1.68606144E12, 20870.1625], [1.68606084E12, 8576.057352941176], [1.68605946E12, 10882.793226381456], [1.68605784E12, 6239.166837256913], [1.68605862E12, 12302.709125475296], [1.686057E12, 8110.0551181102355], [1.6860576E12, 5585.152372262774], [1.68605922E12, 9046.367223065257], [1.68606108E12, 5813.399999999992], [1.68606066E12, 10374.062385321102], [1.68605742E12, 5524.158946412359], [1.68605964E12, 8712.912781954885], [1.68605802E12, 6702.38068812431], [1.68606006E12, 9106.466555183937], [1.6860612E12, 11161.161184210516], [1.68605718E12, 10887.987745098046], [1.6860594E12, 9625.730483271376], [1.68605778E12, 5418.9046345811], [1.6860606E12, 8783.525305410127], [1.68605982E12, 9030.44155844157], [1.6860582E12, 6875.182108626206], [1.68606018E12, 10031.668941979511], [1.6860588E12, 6454.918388429745], [1.68605958E12, 11082.632478632488], [1.68605796E12, 7038.590261282667], [1.68606042E12, 7874.128589263417], [1.68605856E12, 6858.50497512438], [1.68605838E12, 7039.7734204793005], [1.68606E12, 6859.152284263958], [1.68605676E12, 2536.873684210524], [1.68605736E12, 5555.958294717332], [1.68605898E12, 7655.465863453817], [1.68606102E12, 9914.370370370361], [1.68605814E12, 6186.951351351346], [1.68605994E12, 9476.214175654848], [1.68605874E12, 8153.770860927153], [1.68605712E12, 7756.591623036648], [1.68605694E12, 9726.45806451613], [1.68605916E12, 7030.804733727809], [1.68606114E12, 7676.3696369637], [1.68606054E12, 10598.325041459375], [1.68605754E12, 6212.392484342378], [1.68605976E12, 7602.431818181823], [1.68605892E12, 10637.247208931407], [1.68606138E12, 9858.104026845642], [1.68606078E12, 11338.397236614848], [1.6860573E12, 4195.394032921804], [1.68605952E12, 10531.927241962767], [1.68605772E12, 7353.568603213838], [1.68605934E12, 7679.073550212166], [1.68606096E12, 10104.585603112839], [1.68606036E12, 9340.827426810494], [1.68605832E12, 6963.23927765237]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6860615E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.68605676E12, "maxY": 0.9804511278195482, "series": [{"data": [[1.68605748E12, 0.6050761421319799], [1.6860591E12, 0.5114235500878741], [1.6860609E12, 0.4699367088607596], [1.6860597E12, 0.4936386768447836], [1.68605808E12, 0.4454054054054059], [1.6860603E12, 0.4299065420560749], [1.6860579E12, 0.4148471615720526], [1.68606048E12, 0.44964028776978415], [1.6860585E12, 0.5570552147239265], [1.68605988E12, 0.4669163545568034], [1.68605688E12, 0.7217847769028869], [1.6860615E12, 0.25], [1.68606072E12, 0.48514851485148514], [1.68605766E12, 0.40858369098712444], [1.68605826E12, 0.43679599499374167], [1.68606012E12, 0.6415094339622639], [1.68605868E12, 0.43392070484581574], [1.68606132E12, 0.45890410958904126], [1.68605706E12, 0.5553662691652466], [1.68605928E12, 0.46903553299492423], [1.68606024E12, 0.5025466893039043], [1.68605844E12, 0.5480519480519477], [1.68605682E12, 0.8872549019607845], [1.68605904E12, 0.4457050243111831], [1.68606126E12, 0.46925566343042074], [1.68605724E12, 0.5652173913043478], [1.68605886E12, 0.5020519835841317], [1.68606144E12, 0.41250000000000003], [1.68606084E12, 0.44117647058823567], [1.68605946E12, 0.39750445632798587], [1.68605784E12, 0.3879222108495396], [1.68605862E12, 0.5570342205323197], [1.686057E12, 0.5944881889763783], [1.6860576E12, 0.5091240875912408], [1.68605922E12, 0.5538694992412746], [1.68606108E12, 0.4804123711340206], [1.68606066E12, 0.46238532110091735], [1.68605742E12, 0.4686648501362399], [1.68605964E12, 0.9804511278195482], [1.68605802E12, 0.5149833518312986], [1.68606006E12, 0.4230769230769232], [1.6860612E12, 0.48684210526315763], [1.68605718E12, 0.5637254901960785], [1.6860594E12, 0.48141263940520457], [1.68605778E12, 0.38591800356506234], [1.6860606E12, 0.46596858638743427], [1.68605982E12, 0.4675324675324676], [1.6860582E12, 0.5207667731629392], [1.68606018E12, 0.44368600682593884], [1.6860588E12, 0.5258264462809924], [1.68605958E12, 0.45470085470085475], [1.68605796E12, 0.4228028503562944], [1.68606042E12, 0.4619225967540572], [1.68605856E12, 0.4116915422885575], [1.68605838E12, 0.41176470588235303], [1.68606E12, 0.47588832487309646], [1.68605676E12, 0.9631578947368419], [1.68605736E12, 0.4856348470806299], [1.68605898E12, 0.5153949129852745], [1.68606102E12, 0.5138888888888892], [1.68605814E12, 0.6000000000000006], [1.68605994E12, 0.4252696456086283], [1.68605874E12, 0.4172185430463578], [1.68605712E12, 0.5794066317626521], [1.68605694E12, 0.6903225806451609], [1.68605916E12, 0.46153846153846173], [1.68606114E12, 0.44554455445544594], [1.68606054E12, 0.5605306799336648], [1.68605754E12, 0.6962421711899789], [1.68605976E12, 0.4330808080808086], [1.68605892E12, 0.41467304625199375], [1.68606138E12, 0.47651006711409377], [1.68606078E12, 0.4956822107081177], [1.6860573E12, 0.5205761316872438], [1.68605952E12, 0.47038917089678484], [1.68605772E12, 0.42150803461063024], [1.68605934E12, 0.4427157001414427], [1.68606096E12, 0.5214007782101168], [1.68606036E12, 0.7380585516178743], [1.68605832E12, 0.47291196388261836]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6860615E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 128.0, "minX": 1.68605676E12, "maxY": 65018.0, "series": [{"data": [[1.68605748E12, 61056.0], [1.6860591E12, 63694.0], [1.6860609E12, 61412.0], [1.6860597E12, 61810.0], [1.68605808E12, 61070.0], [1.6860603E12, 62301.0], [1.6860579E12, 61027.0], [1.68606048E12, 64263.0], [1.6860585E12, 61312.0], [1.68605988E12, 60895.0], [1.68605688E12, 683.0], [1.6860615E12, 60349.0], [1.68606072E12, 63137.0], [1.68605766E12, 60761.0], [1.68605826E12, 60766.0], [1.68606012E12, 61406.0], [1.68605868E12, 61141.0], [1.68606132E12, 60944.0], [1.68605706E12, 60599.0], [1.68605928E12, 61211.0], [1.68606024E12, 62896.0], [1.68605844E12, 61002.0], [1.68605682E12, 223.0], [1.68605904E12, 63096.0], [1.68606126E12, 60578.0], [1.68605724E12, 60509.0], [1.68605886E12, 60998.0], [1.68606144E12, 60398.0], [1.68606084E12, 61421.0], [1.68605946E12, 62525.0], [1.68605784E12, 60948.0], [1.68605862E12, 65018.0], [1.686057E12, 60451.0], [1.6860576E12, 60529.0], [1.68605922E12, 61443.0], [1.68606108E12, 60998.0], [1.68606066E12, 61844.0], [1.68605742E12, 60807.0], [1.68605964E12, 61730.0], [1.68605802E12, 61053.0], [1.68606006E12, 61483.0], [1.6860612E12, 60804.0], [1.68605718E12, 61167.0], [1.6860594E12, 63306.0], [1.68605778E12, 60740.0], [1.6860606E12, 62552.0], [1.68605982E12, 61413.0], [1.6860582E12, 60926.0], [1.68606018E12, 63389.0], [1.6860588E12, 60680.0], [1.68605958E12, 63137.0], [1.68605796E12, 61052.0], [1.68606042E12, 61753.0], [1.68605856E12, 60841.0], [1.68605838E12, 62213.0], [1.68606E12, 60740.0], [1.68605676E12, 228.0], [1.68605736E12, 60551.0], [1.68605898E12, 60888.0], [1.68606102E12, 60554.0], [1.68605814E12, 60728.0], [1.68605994E12, 61352.0], [1.68605874E12, 61465.0], [1.68605712E12, 60701.0], [1.68605694E12, 60839.0], [1.68605916E12, 61224.0], [1.68606114E12, 60955.0], [1.68606054E12, 63338.0], [1.68605754E12, 61050.0], [1.68605976E12, 61888.0], [1.68605892E12, 61772.0], [1.68606138E12, 60849.0], [1.68606078E12, 63973.0], [1.6860573E12, 60620.0], [1.68605952E12, 62714.0], [1.68605772E12, 61271.0], [1.68605934E12, 61931.0], [1.68606096E12, 61352.0], [1.68606036E12, 61325.0], [1.68605832E12, 61092.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68605748E12, 767.8000000000004], [1.6860591E12, 4174.000000000001], [1.6860609E12, 1250.4], [1.6860597E12, 2285.5], [1.68605808E12, 817.2], [1.6860603E12, 2116.000000000001], [1.6860579E12, 769.0], [1.68606048E12, 4528.900000000001], [1.6860585E12, 1029.1], [1.68605988E12, 857.4], [1.68605688E12, 480.1], [1.6860615E12, 60349.0], [1.68606072E12, 2708.800000000003], [1.68605766E12, 541.0], [1.68605826E12, 1370.4999999999977], [1.68606012E12, 2134.8], [1.68605868E12, 729.0], [1.68606132E12, 881.2], [1.68605706E12, 391.0], [1.68605928E12, 797.1], [1.68606024E12, 3759.3999999999996], [1.68605844E12, 870.5000000000006], [1.68605682E12, 196.5], [1.68605904E12, 3845.400000000002], [1.68606126E12, 567.0], [1.68605724E12, 883.8], [1.68605886E12, 959.2000000000006], [1.68606144E12, 60346.8], [1.68606084E12, 1162.7000000000003], [1.68605946E12, 3581.0], [1.68605784E12, 786.0], [1.68605862E12, 5616.4], [1.686057E12, 377.5], [1.6860576E12, 514.0], [1.68605922E12, 1149.5000000000005], [1.68606108E12, 816.7], [1.68606066E12, 1898.6000000000013], [1.68605742E12, 524.0], [1.68605964E12, 1110.5], [1.68605802E12, 904.4000000000008], [1.68606006E12, 1319.4], [1.6860612E12, 1010.2], [1.68605718E12, 1019.5999999999998], [1.6860594E12, 3079.0], [1.68605778E12, 605.8], [1.6860606E12, 2474.6000000000004], [1.68605982E12, 1084.6], [1.6860582E12, 709.0], [1.68606018E12, 3099.0], [1.6860588E12, 696.2], [1.68605958E12, 4471.600000000001], [1.68605796E12, 773.0000000000002], [1.68606042E12, 1390.0000000000002], [1.68605856E12, 802.2000000000003], [1.68605838E12, 1221.6], [1.68606E12, 964.6000000000003], [1.68605676E12, 196.0], [1.68605736E12, 523.0], [1.68605898E12, 1097.4], [1.68606102E12, 572.4000000000001], [1.68605814E12, 577.1999999999999], [1.68605994E12, 1418.2000000000012], [1.68605874E12, 1150.8000000000002], [1.68605712E12, 647.9000000000001], [1.68605694E12, 857.3999999999999], [1.68605916E12, 909.0], [1.68606114E12, 896.3000000000002], [1.68606054E12, 2761.0], [1.68605754E12, 618.0], [1.68605976E12, 1077.5], [1.68605892E12, 1663.1999999999998], [1.68606138E12, 912.0], [1.68606078E12, 4053.0], [1.6860573E12, 518.6000000000004], [1.68605952E12, 2822.6000000000013], [1.68605772E12, 1055.0], [1.68605934E12, 1316.4], [1.68606096E12, 1240.0], [1.68606036E12, 2020.0], [1.68605832E12, 834.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68605748E12, 60630.56], [1.6860591E12, 62287.4], [1.6860609E12, 60934.06], [1.6860597E12, 60604.75], [1.68605808E12, 60729.11], [1.6860603E12, 60836.17], [1.6860579E12, 60667.25], [1.68606048E12, 61921.26000000001], [1.6860585E12, 60820.8], [1.68605988E12, 60702.81], [1.68605688E12, 668.3900000000001], [1.6860615E12, 60349.0], [1.68606072E12, 61680.94], [1.68605766E12, 60526.5], [1.68605826E12, 60579.85], [1.68606012E12, 60867.450000000004], [1.68605868E12, 60511.6], [1.68606132E12, 60812.32], [1.68605706E12, 60371.0], [1.68605928E12, 60728.78], [1.68606024E12, 62315.62], [1.68605844E12, 60634.18], [1.68605682E12, 223.0], [1.68605904E12, 61969.88], [1.68606126E12, 60489.02], [1.68605724E12, 60357.32], [1.68605886E12, 60581.45], [1.68606144E12, 60398.0], [1.68606084E12, 61100.33], [1.68605946E12, 62099.8], [1.68605784E12, 60737.76], [1.68605862E12, 63073.44000000002], [1.686057E12, 60372.15], [1.6860576E12, 60383.0], [1.68605922E12, 61098.15], [1.68606108E12, 60750.64], [1.68606066E12, 61299.44], [1.68605742E12, 60407.15], [1.68605964E12, 60931.75999999999], [1.68605802E12, 60570.56], [1.68606006E12, 60968.44], [1.6860612E12, 60790.39], [1.68605718E12, 60973.41], [1.6860594E12, 61129.680000000015], [1.68605778E12, 60475.38], [1.6860606E12, 60840.719999999994], [1.68605982E12, 60963.19], [1.6860582E12, 60642.74], [1.68606018E12, 61015.5], [1.6860588E12, 60625.99], [1.68605958E12, 62589.88000000001], [1.68605796E12, 60605.77], [1.68606042E12, 60731.44], [1.68605856E12, 60629.92], [1.68605838E12, 60901.96], [1.68606E12, 60571.96], [1.68605676E12, 227.31], [1.68605736E12, 60417.97], [1.68605898E12, 60586.78], [1.68606102E12, 60506.55], [1.68605814E12, 60504.78], [1.68605994E12, 60990.4], [1.68605874E12, 60874.38], [1.68605712E12, 60591.38], [1.68605694E12, 60700.24], [1.68605916E12, 60854.5], [1.68606114E12, 60780.68], [1.68606054E12, 62239.04000000001], [1.68605754E12, 60582.94], [1.68605976E12, 60796.1], [1.68605892E12, 61679.72], [1.68606138E12, 60604.2], [1.68606078E12, 63825.0], [1.6860573E12, 60443.96], [1.68605952E12, 61428.19], [1.68605772E12, 60838.6], [1.68605934E12, 61418.520000000004], [1.68606096E12, 61182.08], [1.68606036E12, 60914.03999999999], [1.68605832E12, 60620.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68605748E12, 1014.3000000000005], [1.6860591E12, 4799.499999999998], [1.6860609E12, 60505.2], [1.6860597E12, 3346.5], [1.68605808E12, 981.7499999999998], [1.6860603E12, 2544.0], [1.6860579E12, 957.75], [1.68606048E12, 60503.35], [1.6860585E12, 1258.1499999999999], [1.68605988E12, 1030.3000000000004], [1.68605688E12, 619.6000000000001], [1.6860615E12, 60349.0], [1.68606072E12, 3261.5999999999995], [1.68605766E12, 670.5], [1.68605826E12, 2717.4000000000005], [1.68606012E12, 2744.499999999997], [1.68605868E12, 900.0], [1.68606132E12, 36604.199999997974], [1.68605706E12, 566.0], [1.68605928E12, 1001.0999999999999], [1.68606024E12, 60999.1], [1.68605844E12, 1198.4499999999982], [1.68605682E12, 201.5], [1.68605904E12, 60766.0], [1.68606126E12, 591.1999999999999], [1.68605724E12, 900.2], [1.68605886E12, 1752.0499999999995], [1.68606144E12, 60372.6], [1.68606084E12, 1585.9999999999973], [1.68605946E12, 60877.25], [1.68605784E12, 895.8499999999996], [1.68605862E12, 60987.0], [1.686057E12, 388.75], [1.6860576E12, 600.0], [1.68605922E12, 1363.7499999999998], [1.68606108E12, 920.8999999999995], [1.68606066E12, 60626.1], [1.68605742E12, 651.5499999999988], [1.68605964E12, 1455.4999999999995], [1.68605802E12, 1243.1], [1.68606006E12, 60415.6], [1.6860612E12, 60467.85], [1.68605718E12, 60645.2], [1.6860594E12, 3742.3999999999955], [1.68605778E12, 723.8499999999998], [1.6860606E12, 2881.9999999999973], [1.68605982E12, 1320.2999999999993], [1.6860582E12, 825.3500000000003], [1.68606018E12, 3700.5], [1.6860588E12, 798.2999999999997], [1.68605958E12, 5007.199999999999], [1.68605796E12, 1238.0499999999986], [1.68606042E12, 1858.3999999999978], [1.68605856E12, 902.0], [1.68605838E12, 2026.3999999999971], [1.68606E12, 1365.7999999999997], [1.68605676E12, 207.0], [1.68605736E12, 593.0999999999995], [1.68605898E12, 1386.3], [1.68606102E12, 60406.15], [1.68605814E12, 699.5999999999995], [1.68605994E12, 60444.0], [1.68605874E12, 1457.7999999999995], [1.68605712E12, 60390.4], [1.68605694E12, 895.9999999999998], [1.68605916E12, 1109.5], [1.68606114E12, 1082.9], [1.68606054E12, 60639.6], [1.68605754E12, 773.05], [1.68605976E12, 1502.25], [1.68605892E12, 60714.299999999996], [1.68606138E12, 1012.7999999999997], [1.68606078E12, 4614.0], [1.6860573E12, 607.35], [1.68605952E12, 3059.95], [1.68605772E12, 1364.0], [1.68605934E12, 2253.099999999997], [1.68606096E12, 60417.0], [1.68606036E12, 60386.5], [1.68605832E12, 1194.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68605748E12, 188.0], [1.6860591E12, 401.0], [1.6860609E12, 286.0], [1.6860597E12, 183.0], [1.68605808E12, 151.0], [1.6860603E12, 246.0], [1.6860579E12, 162.0], [1.68606048E12, 409.0], [1.6860585E12, 175.0], [1.68605988E12, 211.0], [1.68605688E12, 135.0], [1.6860615E12, 60331.0], [1.68606072E12, 227.0], [1.68605766E12, 142.0], [1.68605826E12, 188.0], [1.68606012E12, 218.0], [1.68605868E12, 169.0], [1.68606132E12, 313.0], [1.68605706E12, 137.0], [1.68605928E12, 197.0], [1.68606024E12, 547.0], [1.68605844E12, 238.0], [1.68605682E12, 135.0], [1.68605904E12, 324.0], [1.68606126E12, 256.0], [1.68605724E12, 190.0], [1.68605886E12, 214.0], [1.68606144E12, 228.0], [1.68606084E12, 249.0], [1.68605946E12, 450.0], [1.68605784E12, 144.0], [1.68605862E12, 478.0], [1.686057E12, 183.0], [1.6860576E12, 155.0], [1.68605922E12, 197.0], [1.68606108E12, 248.0], [1.68606066E12, 304.0], [1.68605742E12, 165.0], [1.68605964E12, 256.0], [1.68605802E12, 182.0], [1.68606006E12, 270.0], [1.6860612E12, 288.0], [1.68605718E12, 504.0], [1.6860594E12, 337.0], [1.68605778E12, 160.0], [1.6860606E12, 354.0], [1.68605982E12, 243.0], [1.6860582E12, 171.0], [1.68606018E12, 186.0], [1.6860588E12, 215.0], [1.68605958E12, 569.0], [1.68605796E12, 220.0], [1.68606042E12, 250.0], [1.68605856E12, 212.0], [1.68605838E12, 197.0], [1.68606E12, 213.0], [1.68605676E12, 180.0], [1.68605736E12, 128.0], [1.68605898E12, 171.0], [1.68606102E12, 225.0], [1.68605814E12, 226.0], [1.68605994E12, 223.0], [1.68605874E12, 315.0], [1.68605712E12, 190.0], [1.68605694E12, 431.0], [1.68605916E12, 177.0], [1.68606114E12, 288.0], [1.68606054E12, 442.0], [1.68605754E12, 195.0], [1.68605976E12, 193.0], [1.68605892E12, 449.0], [1.68606138E12, 308.0], [1.68606078E12, 395.0], [1.6860573E12, 143.0], [1.68605952E12, 396.0], [1.68605772E12, 195.0], [1.68605934E12, 269.0], [1.68606096E12, 239.0], [1.68606036E12, 266.0], [1.68605832E12, 210.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68605748E12, 350.0], [1.6860591E12, 1125.0], [1.6860609E12, 642.5], [1.6860597E12, 451.0], [1.68605808E12, 421.0], [1.6860603E12, 699.5], [1.6860579E12, 474.5], [1.68606048E12, 809.5], [1.6860585E12, 561.0], [1.68605988E12, 476.5], [1.68605688E12, 235.0], [1.6860615E12, 60348.0], [1.68606072E12, 723.0], [1.68605766E12, 315.0], [1.68605826E12, 419.0], [1.68606012E12, 633.5], [1.68605868E12, 468.0], [1.68606132E12, 512.0], [1.68605706E12, 291.0], [1.68605928E12, 482.0], [1.68606024E12, 980.0], [1.68605844E12, 518.0], [1.68605682E12, 184.0], [1.68605904E12, 875.0], [1.68606126E12, 395.0], [1.68605724E12, 650.0], [1.68605886E12, 430.5], [1.68606144E12, 385.5], [1.68606084E12, 615.5], [1.68605946E12, 1115.0], [1.68605784E12, 406.5], [1.68605862E12, 1004.0], [1.686057E12, 234.5], [1.6860576E12, 321.0], [1.68605922E12, 670.0], [1.68606108E12, 495.0], [1.68606066E12, 729.0], [1.68605742E12, 331.0], [1.68605964E12, 524.0], [1.68605802E12, 365.0], [1.68606006E12, 644.0], [1.6860612E12, 709.0], [1.68605718E12, 776.5], [1.6860594E12, 749.0], [1.68605778E12, 368.0], [1.6860606E12, 683.0], [1.68605982E12, 675.0], [1.6860582E12, 481.0], [1.68606018E12, 580.5], [1.6860588E12, 474.0], [1.68605958E12, 1329.0], [1.68605796E12, 493.0], [1.68606042E12, 501.0], [1.68605856E12, 475.0], [1.68605838E12, 470.0], [1.68606E12, 536.0], [1.68605676E12, 183.0], [1.68605736E12, 360.0], [1.68605898E12, 479.0], [1.68606102E12, 393.0], [1.68605814E12, 428.0], [1.68605994E12, 689.0], [1.68605874E12, 623.5], [1.68605712E12, 450.5], [1.68605694E12, 708.0], [1.68605916E12, 501.0], [1.68606114E12, 598.5], [1.68606054E12, 898.0], [1.68605754E12, 407.0], [1.68605976E12, 664.0], [1.68605892E12, 774.0], [1.68606138E12, 701.0], [1.68606078E12, 975.0], [1.6860573E12, 299.5], [1.68605952E12, 937.5], [1.68605772E12, 477.0], [1.68605934E12, 486.0], [1.68606096E12, 570.0], [1.68606036E12, 635.0], [1.68605832E12, 510.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6860615E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 171.0, "minX": 1.0, "maxY": 60320.5, "series": [{"data": [[2.0, 666.0], [33.0, 500.0], [32.0, 293.0], [35.0, 663.0], [34.0, 505.0], [37.0, 290.0], [36.0, 406.0], [38.0, 404.0], [39.0, 597.0], [40.0, 438.5], [41.0, 973.0], [42.0, 251.5], [43.0, 934.0], [3.0, 694.0], [53.0, 1089.0], [59.0, 424.0], [4.0, 657.5], [5.0, 646.0], [6.0, 616.0], [7.0, 608.0], [8.0, 563.0], [9.0, 559.0], [10.0, 535.0], [11.0, 529.0], [12.0, 523.0], [13.0, 504.0], [14.0, 478.0], [15.0, 464.5], [1.0, 60320.5], [16.0, 431.0], [17.0, 418.0], [18.0, 436.0], [19.0, 409.0], [20.0, 405.0], [21.0, 374.0], [22.0, 384.0], [23.0, 369.0], [24.0, 363.0], [25.0, 378.0], [26.0, 383.0], [27.0, 431.0], [28.0, 353.0], [29.0, 370.0], [30.0, 484.5], [31.0, 627.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30003.0], [33.0, 30002.0], [32.0, 30002.0], [35.0, 30002.0], [34.0, 1309.0], [37.0, 30002.0], [36.0, 30002.0], [38.0, 30002.0], [39.0, 30002.0], [40.0, 30002.0], [41.0, 30003.0], [42.0, 171.0], [43.0, 355.0], [3.0, 30003.0], [53.0, 15547.5], [59.0, 246.0], [4.0, 30003.0], [5.0, 30003.0], [6.0, 30003.0], [7.0, 30003.0], [8.0, 767.0], [9.0, 30001.0], [10.0, 2353.5], [11.0, 2476.0], [12.0, 1688.0], [13.0, 30002.0], [14.0, 30002.0], [15.0, 30002.0], [1.0, 30004.0], [16.0, 30002.0], [17.0, 30002.0], [18.0, 30002.0], [19.0, 30002.0], [20.0, 30002.0], [21.0, 30002.0], [22.0, 30002.0], [23.0, 30002.0], [24.0, 30002.0], [25.0, 30002.0], [26.0, 30002.0], [27.0, 30002.0], [28.0, 30002.0], [29.0, 30002.0], [30.0, 30002.0], [31.0, 30002.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 59.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 171.0, "minX": 1.0, "maxY": 60320.5, "series": [{"data": [[2.0, 666.0], [33.0, 500.0], [32.0, 293.0], [35.0, 663.0], [34.0, 505.0], [37.0, 290.0], [36.0, 406.0], [38.0, 404.0], [39.0, 597.0], [40.0, 438.5], [41.0, 973.0], [42.0, 251.5], [43.0, 934.0], [3.0, 694.0], [53.0, 1089.0], [59.0, 424.0], [4.0, 657.5], [5.0, 646.0], [6.0, 616.0], [7.0, 608.0], [8.0, 563.0], [9.0, 559.0], [10.0, 535.0], [11.0, 529.0], [12.0, 523.0], [13.0, 504.0], [14.0, 478.0], [15.0, 464.0], [1.0, 60320.5], [16.0, 431.0], [17.0, 418.0], [18.0, 436.0], [19.0, 409.0], [20.0, 405.0], [21.0, 374.0], [22.0, 384.0], [23.0, 369.0], [24.0, 363.0], [25.0, 378.0], [26.0, 383.0], [27.0, 431.0], [28.0, 353.0], [29.0, 370.0], [30.0, 484.5], [31.0, 627.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30003.0], [33.0, 30002.0], [32.0, 30002.0], [35.0, 30002.0], [34.0, 1309.0], [37.0, 30002.0], [36.0, 30002.0], [38.0, 30002.0], [39.0, 30002.0], [40.0, 30002.0], [41.0, 30003.0], [42.0, 171.0], [43.0, 355.0], [3.0, 30003.0], [53.0, 15547.5], [59.0, 246.0], [4.0, 30003.0], [5.0, 30003.0], [6.0, 30003.0], [7.0, 30003.0], [8.0, 767.0], [9.0, 30001.0], [10.0, 2353.5], [11.0, 2476.0], [12.0, 1688.0], [13.0, 30002.0], [14.0, 30002.0], [15.0, 30002.0], [1.0, 30004.0], [16.0, 30002.0], [17.0, 30002.0], [18.0, 30002.0], [19.0, 30002.0], [20.0, 30002.0], [21.0, 30002.0], [22.0, 30002.0], [23.0, 30002.0], [24.0, 30002.0], [25.0, 30002.0], [26.0, 30002.0], [27.0, 30002.0], [28.0, 30002.0], [29.0, 30002.0], [30.0, 30002.0], [31.0, 30002.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 59.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8666666666666667, "minX": 1.68605676E12, "maxY": 19.416666666666668, "series": [{"data": [[1.68605748E12, 16.416666666666668], [1.6860591E12, 9.483333333333333], [1.6860609E12, 10.433333333333334], [1.6860597E12, 13.1], [1.68605808E12, 15.416666666666666], [1.6860603E12, 10.7], [1.6860579E12, 15.266666666666667], [1.68606048E12, 9.266666666666667], [1.6860585E12, 13.583333333333334], [1.68605988E12, 13.35], [1.68605688E12, 6.966666666666667], [1.68606072E12, 10.116666666666667], [1.68605766E12, 19.416666666666668], [1.68605826E12, 13.316666666666666], [1.68606012E12, 9.716666666666667], [1.68605868E12, 15.133333333333333], [1.68606132E12, 7.566666666666666], [1.68605706E12, 10.45], [1.68605928E12, 16.416666666666668], [1.68606024E12, 9.816666666666666], [1.68605844E12, 12.833333333333334], [1.68605682E12, 3.2], [1.68605904E12, 10.283333333333333], [1.68606126E12, 5.5], [1.68605724E12, 4.883333333333334], [1.68605886E12, 12.183333333333334], [1.68606144E12, 0.8666666666666667], [1.68606084E12, 11.333333333333334], [1.68605946E12, 9.35], [1.68605784E12, 16.283333333333335], [1.68605862E12, 8.766666666666667], [1.686057E12, 4.05], [1.6860576E12, 18.266666666666666], [1.68605922E12, 10.983333333333333], [1.68606108E12, 8.7], [1.68606066E12, 9.066666666666666], [1.68605742E12, 18.35], [1.68605964E12, 11.083333333333334], [1.68605802E12, 15.016666666666667], [1.68606006E12, 9.966666666666667], [1.6860612E12, 4.4], [1.68605718E12, 5.866666666666666], [1.6860594E12, 8.966666666666667], [1.68605778E12, 18.7], [1.6860606E12, 9.55], [1.68605982E12, 11.55], [1.6860582E12, 15.65], [1.68606018E12, 9.766666666666667], [1.6860588E12, 16.133333333333333], [1.68605958E12, 9.75], [1.68605796E12, 14.033333333333333], [1.68606042E12, 13.35], [1.68605856E12, 13.4], [1.68605838E12, 15.3], [1.68606E12, 13.133333333333333], [1.68605676E12, 3.5833333333333335], [1.68605736E12, 17.983333333333334], [1.68605898E12, 12.45], [1.68606102E12, 3.55], [1.68605814E12, 15.416666666666666], [1.68605994E12, 10.816666666666666], [1.68605874E12, 12.583333333333334], [1.68605712E12, 9.533333333333333], [1.68605694E12, 5.1], [1.68605916E12, 14.083333333333334], [1.68606114E12, 10.0], [1.68606054E12, 10.05], [1.68605754E12, 15.966666666666667], [1.68605976E12, 13.2], [1.68605892E12, 10.45], [1.68606138E12, 4.4], [1.68606078E12, 9.65], [1.6860573E12, 16.9], [1.68605952E12, 9.85], [1.68605772E12, 13.483333333333333], [1.68605934E12, 11.783333333333333], [1.68606096E12, 7.683333333333334], [1.68606036E12, 10.816666666666666], [1.68605832E12, 14.766666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68606144E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68605676E12, "maxY": 14.15, "series": [{"data": [[1.68605748E12, 11.616666666666667], [1.6860591E12, 5.016666666666667], [1.6860609E12, 6.6], [1.6860597E12, 8.733333333333333], [1.68605808E12, 10.466666666666667], [1.6860603E12, 6.333333333333333], [1.6860579E12, 10.566666666666666], [1.68606048E12, 5.633333333333334], [1.6860585E12, 8.966666666666667], [1.68605988E12, 9.2], [1.68605688E12, 5.3], [1.6860615E12, 0.05], [1.68606072E12, 6.083333333333333], [1.68605766E12, 14.15], [1.68605826E12, 9.2], [1.68606012E12, 6.366666666666666], [1.68605868E12, 10.65], [1.68606132E12, 5.45], [1.68605706E12, 7.983333333333333], [1.68605928E12, 11.133333333333333], [1.68606024E12, 4.95], [1.68605844E12, 8.8], [1.68605682E12, 2.7333333333333334], [1.68605904E12, 5.583333333333333], [1.68606126E12, 4.133333333333334], [1.68605724E12, 3.25], [1.68605886E12, 8.5], [1.68606144E12, 0.9333333333333333], [1.68606084E12, 7.3], [1.68605946E12, 4.9], [1.68605784E12, 11.266666666666667], [1.68605862E12, 4.716666666666667], [1.686057E12, 3.2333333333333334], [1.6860576E12, 13.316666666666666], [1.68605922E12, 7.166666666666667], [1.68606108E12, 5.866666666666666], [1.68606066E12, 5.55], [1.68605742E12, 13.866666666666667], [1.68605964E12, 6.8], [1.68605802E12, 10.95], [1.68606006E12, 6.75], [1.6860612E12, 3.466666666666667], [1.68605718E12, 4.466666666666667], [1.6860594E12, 5.85], [1.68605778E12, 13.0], [1.6860606E12, 6.383333333333334], [1.68605982E12, 7.366666666666666], [1.6860582E12, 11.033333333333333], [1.68606018E12, 6.066666666666666], [1.6860588E12, 11.3], [1.68605958E12, 5.016666666666667], [1.68605796E12, 9.8], [1.68606042E12, 9.25], [1.68605856E12, 9.383333333333333], [1.68605838E12, 9.916666666666666], [1.68606E12, 8.716666666666667], [1.68605676E12, 2.8], [1.68605736E12, 13.366666666666667], [1.68605898E12, 8.1], [1.68606102E12, 2.8666666666666667], [1.68605814E12, 11.083333333333334], [1.68605994E12, 7.05], [1.68605874E12, 8.666666666666666], [1.68605712E12, 7.1], [1.68605694E12, 3.716666666666667], [1.68605916E12, 9.15], [1.68606114E12, 7.333333333333333], [1.68606054E12, 6.25], [1.68605754E12, 11.3], [1.68605976E12, 8.9], [1.68605892E12, 6.283333333333333], [1.68606138E12, 3.25], [1.68606078E12, 4.65], [1.6860573E12, 11.866666666666667], [1.68605952E12, 5.333333333333333], [1.68605772E12, 9.316666666666666], [1.68605934E12, 7.7], [1.68606096E12, 5.716666666666667], [1.68606036E12, 7.033333333333333], [1.68605832E12, 10.65]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.68605748E12, 4.783333333333333], [1.6860591E12, 4.466666666666667], [1.6860609E12, 3.933333333333333], [1.6860597E12, 4.366666666666666], [1.68605808E12, 4.95], [1.6860603E12, 4.366666666666666], [1.6860579E12, 4.7], [1.68606048E12, 3.6333333333333333], [1.6860585E12, 4.616666666666666], [1.68605988E12, 4.15], [1.68605688E12, 0.95], [1.6860615E12, 0.016666666666666666], [1.68606072E12, 4.016666666666667], [1.68605766E12, 5.266666666666667], [1.68605826E12, 4.116666666666666], [1.68606012E12, 3.35], [1.68605868E12, 4.483333333333333], [1.68606132E12, 1.85], [1.68605706E12, 1.8], [1.68605928E12, 5.283333333333333], [1.68606024E12, 4.866666666666666], [1.68605844E12, 4.033333333333333], [1.68605682E12, 0.36666666666666664], [1.68605904E12, 4.7], [1.68606126E12, 1.0166666666666666], [1.68605724E12, 0.9666666666666667], [1.68605886E12, 3.683333333333333], [1.68606144E12, 0.4], [1.68606084E12, 4.033333333333333], [1.68605946E12, 4.45], [1.68605784E12, 5.016666666666667], [1.68605862E12, 4.05], [1.686057E12, 1.0], [1.6860576E12, 4.95], [1.68605922E12, 3.816666666666667], [1.68606108E12, 2.216666666666667], [1.68606066E12, 3.533333333333333], [1.68605742E12, 4.483333333333333], [1.68605964E12, 4.283333333333333], [1.68605802E12, 4.066666666666666], [1.68606006E12, 3.216666666666667], [1.6860612E12, 1.6], [1.68605718E12, 2.3333333333333335], [1.6860594E12, 3.1166666666666667], [1.68605778E12, 5.7], [1.6860606E12, 3.1666666666666665], [1.68605982E12, 4.183333333333334], [1.6860582E12, 4.616666666666666], [1.68606018E12, 3.7], [1.6860588E12, 4.833333333333333], [1.68605958E12, 4.733333333333333], [1.68605796E12, 4.233333333333333], [1.68606042E12, 4.1], [1.68605856E12, 4.016666666666667], [1.68605838E12, 5.383333333333334], [1.68606E12, 4.4], [1.68605676E12, 0.36666666666666664], [1.68605736E12, 4.616666666666666], [1.68605898E12, 4.35], [1.68606102E12, 0.7333333333333333], [1.68605814E12, 4.333333333333333], [1.68605994E12, 3.7666666666666666], [1.68605874E12, 3.9166666666666665], [1.68605712E12, 2.45], [1.68605694E12, 1.2833333333333334], [1.68605916E12, 4.916666666666667], [1.68606114E12, 2.7666666666666666], [1.68606054E12, 3.8], [1.68605754E12, 4.666666666666667], [1.68605976E12, 4.3], [1.68605892E12, 4.166666666666667], [1.68606138E12, 1.7166666666666666], [1.68606078E12, 5.0], [1.6860573E12, 4.333333333333333], [1.68605952E12, 4.516666666666667], [1.68605772E12, 4.166666666666667], [1.68605934E12, 4.083333333333333], [1.68606096E12, 2.85], [1.68606036E12, 3.783333333333333], [1.68605832E12, 4.116666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68605682E12, 0.3], [1.68605694E12, 0.16666666666666666], [1.68605688E12, 0.1]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.68605748E12, 0.016666666666666666], [1.68606E12, 0.016666666666666666], [1.68605916E12, 0.016666666666666666]], "isOverall": false, "label": "409", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6860615E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68605676E12, "maxY": 14.15, "series": [{"data": [[1.68605748E12, 11.616666666666667], [1.6860591E12, 5.016666666666667], [1.6860609E12, 6.6], [1.6860597E12, 8.733333333333333], [1.68605808E12, 10.466666666666667], [1.6860603E12, 6.333333333333333], [1.6860579E12, 10.566666666666666], [1.68606048E12, 5.633333333333334], [1.6860585E12, 8.966666666666667], [1.68605988E12, 9.2], [1.68605688E12, 5.3], [1.6860615E12, 0.05], [1.68606072E12, 6.083333333333333], [1.68605766E12, 14.15], [1.68605826E12, 9.2], [1.68606012E12, 6.366666666666666], [1.68605868E12, 10.65], [1.68606132E12, 5.45], [1.68605706E12, 7.983333333333333], [1.68605928E12, 11.133333333333333], [1.68606024E12, 4.95], [1.68605844E12, 8.8], [1.68605682E12, 2.7333333333333334], [1.68605904E12, 5.583333333333333], [1.68606126E12, 4.133333333333334], [1.68605724E12, 3.25], [1.68605886E12, 8.5], [1.68606144E12, 0.9333333333333333], [1.68606084E12, 7.3], [1.68605946E12, 4.9], [1.68605784E12, 11.266666666666667], [1.68605862E12, 4.716666666666667], [1.686057E12, 3.2333333333333334], [1.6860576E12, 13.316666666666666], [1.68605922E12, 7.166666666666667], [1.68606108E12, 5.866666666666666], [1.68606066E12, 5.55], [1.68605742E12, 13.866666666666667], [1.68605964E12, 6.8], [1.68605802E12, 10.95], [1.68606006E12, 6.75], [1.6860612E12, 3.466666666666667], [1.68605718E12, 4.466666666666667], [1.6860594E12, 5.85], [1.68605778E12, 13.0], [1.6860606E12, 6.383333333333334], [1.68605982E12, 7.366666666666666], [1.6860582E12, 11.033333333333333], [1.68606018E12, 6.066666666666666], [1.6860588E12, 11.3], [1.68605958E12, 5.016666666666667], [1.68605796E12, 9.8], [1.68606042E12, 9.25], [1.68605856E12, 9.383333333333333], [1.68605838E12, 9.916666666666666], [1.68606E12, 8.716666666666667], [1.68605676E12, 2.8], [1.68605736E12, 13.366666666666667], [1.68605898E12, 8.1], [1.68606102E12, 2.8666666666666667], [1.68605814E12, 11.083333333333334], [1.68605994E12, 7.05], [1.68605874E12, 8.666666666666666], [1.68605712E12, 7.1], [1.68605694E12, 3.716666666666667], [1.68605916E12, 9.15], [1.68606114E12, 7.333333333333333], [1.68606054E12, 6.25], [1.68605754E12, 11.3], [1.68605976E12, 8.9], [1.68605892E12, 6.283333333333333], [1.68606138E12, 3.25], [1.68606078E12, 4.65], [1.6860573E12, 11.866666666666667], [1.68605952E12, 5.333333333333333], [1.68605772E12, 9.316666666666666], [1.68605934E12, 7.7], [1.68606096E12, 5.716666666666667], [1.68606036E12, 7.033333333333333], [1.68605832E12, 10.65]], "isOverall": false, "label": "create cin-success", "isController": false}, {"data": [[1.68605748E12, 4.8], [1.6860591E12, 4.466666666666667], [1.6860609E12, 3.933333333333333], [1.6860597E12, 4.366666666666666], [1.68605808E12, 4.95], [1.6860603E12, 4.366666666666666], [1.6860579E12, 4.7], [1.68606048E12, 3.6333333333333333], [1.6860585E12, 4.616666666666666], [1.68605988E12, 4.15], [1.68605688E12, 1.05], [1.6860615E12, 0.016666666666666666], [1.68606072E12, 4.016666666666667], [1.68605766E12, 5.266666666666667], [1.68605826E12, 4.116666666666666], [1.68606012E12, 3.35], [1.68605868E12, 4.483333333333333], [1.68606132E12, 1.85], [1.68605706E12, 1.8], [1.68605928E12, 5.283333333333333], [1.68606024E12, 4.866666666666666], [1.68605844E12, 4.033333333333333], [1.68605682E12, 0.6666666666666666], [1.68605904E12, 4.7], [1.68606126E12, 1.0166666666666666], [1.68605724E12, 0.9666666666666667], [1.68605886E12, 3.683333333333333], [1.68606144E12, 0.4], [1.68606084E12, 4.033333333333333], [1.68605946E12, 4.45], [1.68605784E12, 5.016666666666667], [1.68605862E12, 4.05], [1.686057E12, 1.0], [1.6860576E12, 4.95], [1.68605922E12, 3.816666666666667], [1.68606108E12, 2.216666666666667], [1.68606066E12, 3.533333333333333], [1.68605742E12, 4.483333333333333], [1.68605964E12, 4.283333333333333], [1.68605802E12, 4.066666666666666], [1.68606006E12, 3.216666666666667], [1.6860612E12, 1.6], [1.68605718E12, 2.3333333333333335], [1.6860594E12, 3.1166666666666667], [1.68605778E12, 5.7], [1.6860606E12, 3.1666666666666665], [1.68605982E12, 4.183333333333334], [1.6860582E12, 4.616666666666666], [1.68606018E12, 3.7], [1.6860588E12, 4.833333333333333], [1.68605958E12, 4.733333333333333], [1.68605796E12, 4.233333333333333], [1.68606042E12, 4.1], [1.68605856E12, 4.016666666666667], [1.68605838E12, 5.383333333333334], [1.68606E12, 4.416666666666667], [1.68605676E12, 0.36666666666666664], [1.68605736E12, 4.616666666666666], [1.68605898E12, 4.35], [1.68606102E12, 0.7333333333333333], [1.68605814E12, 4.333333333333333], [1.68605994E12, 3.7666666666666666], [1.68605874E12, 3.9166666666666665], [1.68605712E12, 2.45], [1.68605694E12, 1.45], [1.68605916E12, 4.933333333333334], [1.68606114E12, 2.7666666666666666], [1.68606054E12, 3.8], [1.68605754E12, 4.666666666666667], [1.68605976E12, 4.3], [1.68605892E12, 4.166666666666667], [1.68606138E12, 1.7166666666666666], [1.68606078E12, 5.0], [1.6860573E12, 4.333333333333333], [1.68605952E12, 4.516666666666667], [1.68605772E12, 4.166666666666667], [1.68605934E12, 4.083333333333333], [1.68606096E12, 2.85], [1.68606036E12, 3.783333333333333], [1.68605832E12, 4.116666666666666]], "isOverall": false, "label": "create cin-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6860615E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68605676E12, "maxY": 14.15, "series": [{"data": [[1.68605748E12, 11.616666666666667], [1.6860591E12, 5.016666666666667], [1.6860609E12, 6.6], [1.6860597E12, 8.733333333333333], [1.68605808E12, 10.466666666666667], [1.6860603E12, 6.333333333333333], [1.6860579E12, 10.566666666666666], [1.68606048E12, 5.633333333333334], [1.6860585E12, 8.966666666666667], [1.68605988E12, 9.2], [1.68605688E12, 5.3], [1.6860615E12, 0.05], [1.68606072E12, 6.083333333333333], [1.68605766E12, 14.15], [1.68605826E12, 9.2], [1.68606012E12, 6.366666666666666], [1.68605868E12, 10.65], [1.68606132E12, 5.45], [1.68605706E12, 7.983333333333333], [1.68605928E12, 11.133333333333333], [1.68606024E12, 4.95], [1.68605844E12, 8.8], [1.68605682E12, 2.7333333333333334], [1.68605904E12, 5.583333333333333], [1.68606126E12, 4.133333333333334], [1.68605724E12, 3.25], [1.68605886E12, 8.5], [1.68606144E12, 0.9333333333333333], [1.68606084E12, 7.3], [1.68605946E12, 4.9], [1.68605784E12, 11.266666666666667], [1.68605862E12, 4.716666666666667], [1.686057E12, 3.2333333333333334], [1.6860576E12, 13.316666666666666], [1.68605922E12, 7.166666666666667], [1.68606108E12, 5.866666666666666], [1.68606066E12, 5.55], [1.68605742E12, 13.866666666666667], [1.68605964E12, 6.8], [1.68605802E12, 10.95], [1.68606006E12, 6.75], [1.6860612E12, 3.466666666666667], [1.68605718E12, 4.466666666666667], [1.6860594E12, 5.85], [1.68605778E12, 13.0], [1.6860606E12, 6.383333333333334], [1.68605982E12, 7.366666666666666], [1.6860582E12, 11.033333333333333], [1.68606018E12, 6.066666666666666], [1.6860588E12, 11.3], [1.68605958E12, 5.016666666666667], [1.68605796E12, 9.8], [1.68606042E12, 9.25], [1.68605856E12, 9.383333333333333], [1.68605838E12, 9.916666666666666], [1.68606E12, 8.716666666666667], [1.68605676E12, 2.8], [1.68605736E12, 13.366666666666667], [1.68605898E12, 8.1], [1.68606102E12, 2.8666666666666667], [1.68605814E12, 11.083333333333334], [1.68605994E12, 7.05], [1.68605874E12, 8.666666666666666], [1.68605712E12, 7.1], [1.68605694E12, 3.716666666666667], [1.68605916E12, 9.15], [1.68606114E12, 7.333333333333333], [1.68606054E12, 6.25], [1.68605754E12, 11.3], [1.68605976E12, 8.9], [1.68605892E12, 6.283333333333333], [1.68606138E12, 3.25], [1.68606078E12, 4.65], [1.6860573E12, 11.866666666666667], [1.68605952E12, 5.333333333333333], [1.68605772E12, 9.316666666666666], [1.68605934E12, 7.7], [1.68606096E12, 5.716666666666667], [1.68606036E12, 7.033333333333333], [1.68605832E12, 10.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68605748E12, 4.8], [1.6860591E12, 4.466666666666667], [1.6860609E12, 3.933333333333333], [1.6860597E12, 4.366666666666666], [1.68605808E12, 4.95], [1.6860603E12, 4.366666666666666], [1.6860579E12, 4.7], [1.68606048E12, 3.6333333333333333], [1.6860585E12, 4.616666666666666], [1.68605988E12, 4.15], [1.68605688E12, 1.05], [1.6860615E12, 0.016666666666666666], [1.68606072E12, 4.016666666666667], [1.68605766E12, 5.266666666666667], [1.68605826E12, 4.116666666666666], [1.68606012E12, 3.35], [1.68605868E12, 4.483333333333333], [1.68606132E12, 1.85], [1.68605706E12, 1.8], [1.68605928E12, 5.283333333333333], [1.68606024E12, 4.866666666666666], [1.68605844E12, 4.033333333333333], [1.68605682E12, 0.6666666666666666], [1.68605904E12, 4.7], [1.68606126E12, 1.0166666666666666], [1.68605724E12, 0.9666666666666667], [1.68605886E12, 3.683333333333333], [1.68606144E12, 0.4], [1.68606084E12, 4.033333333333333], [1.68605946E12, 4.45], [1.68605784E12, 5.016666666666667], [1.68605862E12, 4.05], [1.686057E12, 1.0], [1.6860576E12, 4.95], [1.68605922E12, 3.816666666666667], [1.68606108E12, 2.216666666666667], [1.68606066E12, 3.533333333333333], [1.68605742E12, 4.483333333333333], [1.68605964E12, 4.283333333333333], [1.68605802E12, 4.066666666666666], [1.68606006E12, 3.216666666666667], [1.6860612E12, 1.6], [1.68605718E12, 2.3333333333333335], [1.6860594E12, 3.1166666666666667], [1.68605778E12, 5.7], [1.6860606E12, 3.1666666666666665], [1.68605982E12, 4.183333333333334], [1.6860582E12, 4.616666666666666], [1.68606018E12, 3.7], [1.6860588E12, 4.833333333333333], [1.68605958E12, 4.733333333333333], [1.68605796E12, 4.233333333333333], [1.68606042E12, 4.1], [1.68605856E12, 4.016666666666667], [1.68605838E12, 5.383333333333334], [1.68606E12, 4.416666666666667], [1.68605676E12, 0.36666666666666664], [1.68605736E12, 4.616666666666666], [1.68605898E12, 4.35], [1.68606102E12, 0.7333333333333333], [1.68605814E12, 4.333333333333333], [1.68605994E12, 3.7666666666666666], [1.68605874E12, 3.9166666666666665], [1.68605712E12, 2.45], [1.68605694E12, 1.45], [1.68605916E12, 4.933333333333334], [1.68606114E12, 2.7666666666666666], [1.68606054E12, 3.8], [1.68605754E12, 4.666666666666667], [1.68605976E12, 4.3], [1.68605892E12, 4.166666666666667], [1.68606138E12, 1.7166666666666666], [1.68606078E12, 5.0], [1.6860573E12, 4.333333333333333], [1.68605952E12, 4.516666666666667], [1.68605772E12, 4.166666666666667], [1.68605934E12, 4.083333333333333], [1.68606096E12, 2.85], [1.68606036E12, 3.783333333333333], [1.68605832E12, 4.116666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6860615E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

