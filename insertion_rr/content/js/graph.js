/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 25624.0, "series": [{"data": [[0.0, 15.0], [0.1, 29.0], [0.2, 31.0], [0.3, 33.0], [0.4, 35.0], [0.5, 36.0], [0.6, 38.0], [0.7, 39.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 43.0], [1.2, 44.0], [1.3, 45.0], [1.4, 46.0], [1.5, 47.0], [1.6, 48.0], [1.7, 49.0], [1.8, 50.0], [1.9, 51.0], [2.0, 52.0], [2.1, 52.0], [2.2, 53.0], [2.3, 54.0], [2.4, 54.0], [2.5, 55.0], [2.6, 55.0], [2.7, 56.0], [2.8, 57.0], [2.9, 57.0], [3.0, 58.0], [3.1, 58.0], [3.2, 59.0], [3.3, 59.0], [3.4, 60.0], [3.5, 60.0], [3.6, 61.0], [3.7, 61.0], [3.8, 62.0], [3.9, 63.0], [4.0, 63.0], [4.1, 64.0], [4.2, 65.0], [4.3, 65.0], [4.4, 66.0], [4.5, 66.0], [4.6, 67.0], [4.7, 67.0], [4.8, 68.0], [4.9, 68.0], [5.0, 69.0], [5.1, 69.0], [5.2, 70.0], [5.3, 70.0], [5.4, 71.0], [5.5, 71.0], [5.6, 72.0], [5.7, 72.0], [5.8, 73.0], [5.9, 73.0], [6.0, 74.0], [6.1, 74.0], [6.2, 74.0], [6.3, 75.0], [6.4, 75.0], [6.5, 76.0], [6.6, 76.0], [6.7, 77.0], [6.8, 77.0], [6.9, 77.0], [7.0, 78.0], [7.1, 78.0], [7.2, 79.0], [7.3, 79.0], [7.4, 79.0], [7.5, 80.0], [7.6, 80.0], [7.7, 81.0], [7.8, 81.0], [7.9, 81.0], [8.0, 82.0], [8.1, 82.0], [8.2, 83.0], [8.3, 83.0], [8.4, 83.0], [8.5, 84.0], [8.6, 84.0], [8.7, 85.0], [8.8, 85.0], [8.9, 86.0], [9.0, 87.0], [9.1, 87.0], [9.2, 88.0], [9.3, 88.0], [9.4, 89.0], [9.5, 89.0], [9.6, 90.0], [9.7, 91.0], [9.8, 91.0], [9.9, 92.0], [10.0, 92.0], [10.1, 93.0], [10.2, 93.0], [10.3, 94.0], [10.4, 94.0], [10.5, 95.0], [10.6, 95.0], [10.7, 96.0], [10.8, 96.0], [10.9, 97.0], [11.0, 97.0], [11.1, 98.0], [11.2, 98.0], [11.3, 99.0], [11.4, 100.0], [11.5, 100.0], [11.6, 101.0], [11.7, 101.0], [11.8, 102.0], [11.9, 103.0], [12.0, 104.0], [12.1, 104.0], [12.2, 105.0], [12.3, 105.0], [12.4, 106.0], [12.5, 107.0], [12.6, 108.0], [12.7, 108.0], [12.8, 109.0], [12.9, 110.0], [13.0, 110.0], [13.1, 111.0], [13.2, 112.0], [13.3, 112.0], [13.4, 113.0], [13.5, 114.0], [13.6, 114.0], [13.7, 115.0], [13.8, 115.0], [13.9, 116.0], [14.0, 117.0], [14.1, 117.0], [14.2, 118.0], [14.3, 118.0], [14.4, 119.0], [14.5, 120.0], [14.6, 120.0], [14.7, 121.0], [14.8, 121.0], [14.9, 122.0], [15.0, 122.0], [15.1, 123.0], [15.2, 124.0], [15.3, 124.0], [15.4, 125.0], [15.5, 125.0], [15.6, 126.0], [15.7, 127.0], [15.8, 127.0], [15.9, 128.0], [16.0, 128.0], [16.1, 129.0], [16.2, 129.0], [16.3, 130.0], [16.4, 130.0], [16.5, 131.0], [16.6, 131.0], [16.7, 132.0], [16.8, 132.0], [16.9, 133.0], [17.0, 133.0], [17.1, 133.0], [17.2, 134.0], [17.3, 134.0], [17.4, 135.0], [17.5, 135.0], [17.6, 136.0], [17.7, 136.0], [17.8, 137.0], [17.9, 137.0], [18.0, 138.0], [18.1, 138.0], [18.2, 139.0], [18.3, 139.0], [18.4, 139.0], [18.5, 140.0], [18.6, 140.0], [18.7, 141.0], [18.8, 141.0], [18.9, 141.0], [19.0, 142.0], [19.1, 142.0], [19.2, 142.0], [19.3, 142.0], [19.4, 143.0], [19.5, 143.0], [19.6, 143.0], [19.7, 144.0], [19.8, 144.0], [19.9, 144.0], [20.0, 144.0], [20.1, 145.0], [20.2, 145.0], [20.3, 145.0], [20.4, 145.0], [20.5, 146.0], [20.6, 146.0], [20.7, 146.0], [20.8, 146.0], [20.9, 147.0], [21.0, 147.0], [21.1, 147.0], [21.2, 147.0], [21.3, 148.0], [21.4, 148.0], [21.5, 148.0], [21.6, 149.0], [21.7, 149.0], [21.8, 149.0], [21.9, 149.0], [22.0, 150.0], [22.1, 150.0], [22.2, 150.0], [22.3, 150.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 151.0], [22.8, 152.0], [22.9, 152.0], [23.0, 152.0], [23.1, 152.0], [23.2, 153.0], [23.3, 153.0], [23.4, 153.0], [23.5, 153.0], [23.6, 153.0], [23.7, 154.0], [23.8, 154.0], [23.9, 154.0], [24.0, 154.0], [24.1, 155.0], [24.2, 155.0], [24.3, 155.0], [24.4, 155.0], [24.5, 156.0], [24.6, 156.0], [24.7, 156.0], [24.8, 156.0], [24.9, 157.0], [25.0, 157.0], [25.1, 157.0], [25.2, 157.0], [25.3, 157.0], [25.4, 158.0], [25.5, 158.0], [25.6, 158.0], [25.7, 158.0], [25.8, 158.0], [25.9, 159.0], [26.0, 159.0], [26.1, 159.0], [26.2, 159.0], [26.3, 159.0], [26.4, 160.0], [26.5, 160.0], [26.6, 160.0], [26.7, 160.0], [26.8, 160.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 162.0], [27.4, 162.0], [27.5, 162.0], [27.6, 162.0], [27.7, 163.0], [27.8, 163.0], [27.9, 163.0], [28.0, 163.0], [28.1, 163.0], [28.2, 164.0], [28.3, 164.0], [28.4, 164.0], [28.5, 164.0], [28.6, 165.0], [28.7, 165.0], [28.8, 165.0], [28.9, 165.0], [29.0, 166.0], [29.1, 166.0], [29.2, 166.0], [29.3, 166.0], [29.4, 166.0], [29.5, 167.0], [29.6, 167.0], [29.7, 167.0], [29.8, 167.0], [29.9, 168.0], [30.0, 168.0], [30.1, 168.0], [30.2, 168.0], [30.3, 168.0], [30.4, 169.0], [30.5, 169.0], [30.6, 169.0], [30.7, 169.0], [30.8, 170.0], [30.9, 170.0], [31.0, 170.0], [31.1, 170.0], [31.2, 171.0], [31.3, 171.0], [31.4, 171.0], [31.5, 171.0], [31.6, 172.0], [31.7, 172.0], [31.8, 172.0], [31.9, 172.0], [32.0, 172.0], [32.1, 173.0], [32.2, 173.0], [32.3, 173.0], [32.4, 173.0], [32.5, 174.0], [32.6, 174.0], [32.7, 174.0], [32.8, 174.0], [32.9, 175.0], [33.0, 175.0], [33.1, 175.0], [33.2, 175.0], [33.3, 176.0], [33.4, 176.0], [33.5, 176.0], [33.6, 176.0], [33.7, 176.0], [33.8, 177.0], [33.9, 177.0], [34.0, 177.0], [34.1, 177.0], [34.2, 178.0], [34.3, 178.0], [34.4, 178.0], [34.5, 178.0], [34.6, 178.0], [34.7, 179.0], [34.8, 179.0], [34.9, 179.0], [35.0, 179.0], [35.1, 179.0], [35.2, 180.0], [35.3, 180.0], [35.4, 180.0], [35.5, 180.0], [35.6, 180.0], [35.7, 181.0], [35.8, 181.0], [35.9, 181.0], [36.0, 181.0], [36.1, 181.0], [36.2, 182.0], [36.3, 182.0], [36.4, 182.0], [36.5, 182.0], [36.6, 182.0], [36.7, 183.0], [36.8, 183.0], [36.9, 183.0], [37.0, 183.0], [37.1, 183.0], [37.2, 183.0], [37.3, 184.0], [37.4, 184.0], [37.5, 184.0], [37.6, 184.0], [37.7, 184.0], [37.8, 185.0], [37.9, 185.0], [38.0, 185.0], [38.1, 185.0], [38.2, 185.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 186.0], [38.8, 187.0], [38.9, 187.0], [39.0, 187.0], [39.1, 187.0], [39.2, 188.0], [39.3, 188.0], [39.4, 188.0], [39.5, 188.0], [39.6, 189.0], [39.7, 189.0], [39.8, 189.0], [39.9, 189.0], [40.0, 190.0], [40.1, 190.0], [40.2, 190.0], [40.3, 190.0], [40.4, 190.0], [40.5, 191.0], [40.6, 191.0], [40.7, 191.0], [40.8, 191.0], [40.9, 192.0], [41.0, 192.0], [41.1, 192.0], [41.2, 192.0], [41.3, 192.0], [41.4, 193.0], [41.5, 193.0], [41.6, 193.0], [41.7, 193.0], [41.8, 194.0], [41.9, 194.0], [42.0, 194.0], [42.1, 194.0], [42.2, 194.0], [42.3, 195.0], [42.4, 195.0], [42.5, 195.0], [42.6, 195.0], [42.7, 195.0], [42.8, 196.0], [42.9, 196.0], [43.0, 196.0], [43.1, 196.0], [43.2, 197.0], [43.3, 197.0], [43.4, 197.0], [43.5, 197.0], [43.6, 197.0], [43.7, 198.0], [43.8, 198.0], [43.9, 198.0], [44.0, 198.0], [44.1, 198.0], [44.2, 199.0], [44.3, 199.0], [44.4, 199.0], [44.5, 199.0], [44.6, 199.0], [44.7, 200.0], [44.8, 200.0], [44.9, 200.0], [45.0, 200.0], [45.1, 200.0], [45.2, 201.0], [45.3, 201.0], [45.4, 201.0], [45.5, 201.0], [45.6, 202.0], [45.7, 202.0], [45.8, 202.0], [45.9, 202.0], [46.0, 202.0], [46.1, 203.0], [46.2, 203.0], [46.3, 203.0], [46.4, 203.0], [46.5, 203.0], [46.6, 204.0], [46.7, 204.0], [46.8, 204.0], [46.9, 204.0], [47.0, 205.0], [47.1, 205.0], [47.2, 205.0], [47.3, 205.0], [47.4, 206.0], [47.5, 206.0], [47.6, 206.0], [47.7, 206.0], [47.8, 207.0], [47.9, 207.0], [48.0, 207.0], [48.1, 207.0], [48.2, 207.0], [48.3, 208.0], [48.4, 208.0], [48.5, 208.0], [48.6, 208.0], [48.7, 209.0], [48.8, 209.0], [48.9, 209.0], [49.0, 209.0], [49.1, 210.0], [49.2, 210.0], [49.3, 210.0], [49.4, 210.0], [49.5, 211.0], [49.6, 211.0], [49.7, 211.0], [49.8, 211.0], [49.9, 212.0], [50.0, 212.0], [50.1, 212.0], [50.2, 212.0], [50.3, 213.0], [50.4, 213.0], [50.5, 213.0], [50.6, 213.0], [50.7, 214.0], [50.8, 214.0], [50.9, 214.0], [51.0, 214.0], [51.1, 214.0], [51.2, 215.0], [51.3, 215.0], [51.4, 215.0], [51.5, 215.0], [51.6, 216.0], [51.7, 216.0], [51.8, 216.0], [51.9, 216.0], [52.0, 217.0], [52.1, 217.0], [52.2, 217.0], [52.3, 217.0], [52.4, 218.0], [52.5, 218.0], [52.6, 218.0], [52.7, 218.0], [52.8, 219.0], [52.9, 219.0], [53.0, 219.0], [53.1, 219.0], [53.2, 220.0], [53.3, 220.0], [53.4, 220.0], [53.5, 220.0], [53.6, 221.0], [53.7, 221.0], [53.8, 221.0], [53.9, 222.0], [54.0, 222.0], [54.1, 222.0], [54.2, 222.0], [54.3, 223.0], [54.4, 223.0], [54.5, 223.0], [54.6, 224.0], [54.7, 224.0], [54.8, 224.0], [54.9, 224.0], [55.0, 225.0], [55.1, 225.0], [55.2, 225.0], [55.3, 226.0], [55.4, 226.0], [55.5, 226.0], [55.6, 227.0], [55.7, 227.0], [55.8, 228.0], [55.9, 228.0], [56.0, 228.0], [56.1, 229.0], [56.2, 229.0], [56.3, 230.0], [56.4, 230.0], [56.5, 231.0], [56.6, 231.0], [56.7, 232.0], [56.8, 232.0], [56.9, 232.0], [57.0, 233.0], [57.1, 233.0], [57.2, 234.0], [57.3, 234.0], [57.4, 235.0], [57.5, 236.0], [57.6, 236.0], [57.7, 237.0], [57.8, 237.0], [57.9, 238.0], [58.0, 238.0], [58.1, 239.0], [58.2, 239.0], [58.3, 240.0], [58.4, 240.0], [58.5, 241.0], [58.6, 241.0], [58.7, 242.0], [58.8, 243.0], [58.9, 243.0], [59.0, 244.0], [59.1, 244.0], [59.2, 245.0], [59.3, 246.0], [59.4, 246.0], [59.5, 247.0], [59.6, 247.0], [59.7, 248.0], [59.8, 249.0], [59.9, 250.0], [60.0, 250.0], [60.1, 251.0], [60.2, 252.0], [60.3, 252.0], [60.4, 253.0], [60.5, 254.0], [60.6, 254.0], [60.7, 255.0], [60.8, 256.0], [60.9, 256.0], [61.0, 257.0], [61.1, 258.0], [61.2, 259.0], [61.3, 259.0], [61.4, 260.0], [61.5, 261.0], [61.6, 261.0], [61.7, 262.0], [61.8, 263.0], [61.9, 264.0], [62.0, 265.0], [62.1, 265.0], [62.2, 266.0], [62.3, 267.0], [62.4, 268.0], [62.5, 269.0], [62.6, 270.0], [62.7, 271.0], [62.8, 272.0], [62.9, 273.0], [63.0, 274.0], [63.1, 275.0], [63.2, 276.0], [63.3, 276.0], [63.4, 277.0], [63.5, 279.0], [63.6, 280.0], [63.7, 281.0], [63.8, 282.0], [63.9, 283.0], [64.0, 285.0], [64.1, 286.0], [64.2, 288.0], [64.3, 290.0], [64.4, 292.0], [64.5, 294.0], [64.6, 296.0], [64.7, 298.0], [64.8, 300.0], [64.9, 303.0], [65.0, 305.0], [65.1, 308.0], [65.2, 310.0], [65.3, 313.0], [65.4, 315.0], [65.5, 318.0], [65.6, 320.0], [65.7, 323.0], [65.8, 326.0], [65.9, 329.0], [66.0, 333.0], [66.1, 337.0], [66.2, 342.0], [66.3, 347.0], [66.4, 353.0], [66.5, 358.0], [66.6, 366.0], [66.7, 372.0], [66.8, 382.0], [66.9, 395.0], [67.0, 408.0], [67.1, 425.0], [67.2, 451.0], [67.3, 481.0], [67.4, 519.0], [67.5, 560.0], [67.6, 611.0], [67.7, 654.0], [67.8, 713.0], [67.9, 766.0], [68.0, 821.0], [68.1, 872.0], [68.2, 925.0], [68.3, 971.0], [68.4, 1026.0], [68.5, 1077.0], [68.6, 1122.0], [68.7, 1166.0], [68.8, 1214.0], [68.9, 1264.0], [69.0, 1312.0], [69.1, 1358.0], [69.2, 1408.0], [69.3, 1463.0], [69.4, 1511.0], [69.5, 1558.0], [69.6, 1592.0], [69.7, 1631.0], [69.8, 1670.0], [69.9, 1705.0], [70.0, 1743.0], [70.1, 1775.0], [70.2, 1809.0], [70.3, 1844.0], [70.4, 1879.0], [70.5, 1911.0], [70.6, 1942.0], [70.7, 1973.0], [70.8, 2007.0], [70.9, 2040.0], [71.0, 2068.0], [71.1, 2104.0], [71.2, 2134.0], [71.3, 2165.0], [71.4, 2200.0], [71.5, 2232.0], [71.6, 2264.0], [71.7, 2299.0], [71.8, 2332.0], [71.9, 2364.0], [72.0, 2397.0], [72.1, 2433.0], [72.2, 2464.0], [72.3, 2496.0], [72.4, 2531.0], [72.5, 2566.0], [72.6, 2601.0], [72.7, 2633.0], [72.8, 2670.0], [72.9, 2706.0], [73.0, 2744.0], [73.1, 2779.0], [73.2, 2813.0], [73.3, 2844.0], [73.4, 2877.0], [73.5, 2911.0], [73.6, 2950.0], [73.7, 2983.0], [73.8, 3021.0], [73.9, 3053.0], [74.0, 3083.0], [74.1, 3116.0], [74.2, 3148.0], [74.3, 3178.0], [74.4, 3210.0], [74.5, 3243.0], [74.6, 3275.0], [74.7, 3306.0], [74.8, 3339.0], [74.9, 3374.0], [75.0, 3404.0], [75.1, 3439.0], [75.2, 3476.0], [75.3, 3513.0], [75.4, 3542.0], [75.5, 3578.0], [75.6, 3612.0], [75.7, 3650.0], [75.8, 3683.0], [75.9, 3724.0], [76.0, 3767.0], [76.1, 3807.0], [76.2, 3851.0], [76.3, 3899.0], [76.4, 3944.0], [76.5, 3989.0], [76.6, 4030.0], [76.7, 4071.0], [76.8, 4114.0], [76.9, 4157.0], [77.0, 4198.0], [77.1, 4244.0], [77.2, 4289.0], [77.3, 4332.0], [77.4, 4372.0], [77.5, 4410.0], [77.6, 4458.0], [77.7, 4500.0], [77.8, 4550.0], [77.9, 4594.0], [78.0, 4638.0], [78.1, 4681.0], [78.2, 4733.0], [78.3, 4787.0], [78.4, 4839.0], [78.5, 4895.0], [78.6, 4948.0], [78.7, 5007.0], [78.8, 5066.0], [78.9, 5125.0], [79.0, 5180.0], [79.1, 5242.0], [79.2, 5295.0], [79.3, 5350.0], [79.4, 5406.0], [79.5, 5477.0], [79.6, 5538.0], [79.7, 5599.0], [79.8, 5661.0], [79.9, 5714.0], [80.0, 5777.0], [80.1, 5836.0], [80.2, 5900.0], [80.3, 5960.0], [80.4, 6021.0], [80.5, 6092.0], [80.6, 6157.0], [80.7, 6222.0], [80.8, 6296.0], [80.9, 6360.0], [81.0, 6425.0], [81.1, 6490.0], [81.2, 6562.0], [81.3, 6631.0], [81.4, 6696.0], [81.5, 6758.0], [81.6, 6823.0], [81.7, 6884.0], [81.8, 6948.0], [81.9, 7012.0], [82.0, 7070.0], [82.1, 7128.0], [82.2, 7186.0], [82.3, 7242.0], [82.4, 7301.0], [82.5, 7349.0], [82.6, 7408.0], [82.7, 7467.0], [82.8, 7523.0], [82.9, 7569.0], [83.0, 7615.0], [83.1, 7660.0], [83.2, 7711.0], [83.3, 7754.0], [83.4, 7796.0], [83.5, 7839.0], [83.6, 7887.0], [83.7, 7937.0], [83.8, 7978.0], [83.9, 8019.0], [84.0, 8062.0], [84.1, 8098.0], [84.2, 8140.0], [84.3, 8174.0], [84.4, 8213.0], [84.5, 8249.0], [84.6, 8282.0], [84.7, 8320.0], [84.8, 8358.0], [84.9, 8393.0], [85.0, 8431.0], [85.1, 8471.0], [85.2, 8508.0], [85.3, 8545.0], [85.4, 8582.0], [85.5, 8617.0], [85.6, 8650.0], [85.7, 8687.0], [85.8, 8718.0], [85.9, 8752.0], [86.0, 8781.0], [86.1, 8814.0], [86.2, 8844.0], [86.3, 8875.0], [86.4, 8902.0], [86.5, 8931.0], [86.6, 8964.0], [86.7, 8993.0], [86.8, 9023.0], [86.9, 9054.0], [87.0, 9081.0], [87.1, 9112.0], [87.2, 9143.0], [87.3, 9172.0], [87.4, 9199.0], [87.5, 9229.0], [87.6, 9261.0], [87.7, 9289.0], [87.8, 9314.0], [87.9, 9344.0], [88.0, 9373.0], [88.1, 9403.0], [88.2, 9432.0], [88.3, 9460.0], [88.4, 9489.0], [88.5, 9515.0], [88.6, 9542.0], [88.7, 9571.0], [88.8, 9602.0], [88.9, 9632.0], [89.0, 9663.0], [89.1, 9695.0], [89.2, 9723.0], [89.3, 9749.0], [89.4, 9774.0], [89.5, 9802.0], [89.6, 9835.0], [89.7, 9864.0], [89.8, 9894.0], [89.9, 9922.0], [90.0, 9956.0], [90.1, 9985.0], [90.2, 10017.0], [90.3, 10043.0], [90.4, 10074.0], [90.5, 10102.0], [90.6, 10130.0], [90.7, 10156.0], [90.8, 10187.0], [90.9, 10216.0], [91.0, 10244.0], [91.1, 10277.0], [91.2, 10308.0], [91.3, 10333.0], [91.4, 10363.0], [91.5, 10394.0], [91.6, 10424.0], [91.7, 10448.0], [91.8, 10479.0], [91.9, 10508.0], [92.0, 10540.0], [92.1, 10572.0], [92.2, 10601.0], [92.3, 10632.0], [92.4, 10661.0], [92.5, 10689.0], [92.6, 10720.0], [92.7, 10750.0], [92.8, 10780.0], [92.9, 10809.0], [93.0, 10843.0], [93.1, 10874.0], [93.2, 10903.0], [93.3, 10935.0], [93.4, 10970.0], [93.5, 11003.0], [93.6, 11032.0], [93.7, 11068.0], [93.8, 11103.0], [93.9, 11141.0], [94.0, 11177.0], [94.1, 11210.0], [94.2, 11242.0], [94.3, 11277.0], [94.4, 11311.0], [94.5, 11348.0], [94.6, 11383.0], [94.7, 11421.0], [94.8, 11451.0], [94.9, 11487.0], [95.0, 11528.0], [95.1, 11565.0], [95.2, 11598.0], [95.3, 11633.0], [95.4, 11669.0], [95.5, 11708.0], [95.6, 11744.0], [95.7, 11782.0], [95.8, 11817.0], [95.9, 11862.0], [96.0, 11909.0], [96.1, 11949.0], [96.2, 11995.0], [96.3, 12038.0], [96.4, 12086.0], [96.5, 12135.0], [96.6, 12182.0], [96.7, 12229.0], [96.8, 12275.0], [96.9, 12337.0], [97.0, 12397.0], [97.1, 12455.0], [97.2, 12516.0], [97.3, 12568.0], [97.4, 12633.0], [97.5, 12684.0], [97.6, 12737.0], [97.7, 12799.0], [97.8, 12866.0], [97.9, 12937.0], [98.0, 13001.0], [98.1, 13081.0], [98.2, 13164.0], [98.3, 13252.0], [98.4, 13342.0], [98.5, 13439.0], [98.6, 13536.0], [98.7, 13632.0], [98.8, 13744.0], [98.9, 13873.0], [99.0, 13994.0], [99.1, 14144.0], [99.2, 14291.0], [99.3, 14471.0], [99.4, 14678.0], [99.5, 14919.0], [99.6, 15179.0], [99.7, 15549.0], [99.8, 16058.0], [99.9, 16889.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 53750.0, "series": [{"data": [[0.0, 18428.0], [100.0, 53750.0], [200.0, 32551.0], [300.0, 3521.0], [400.0, 673.0], [500.0, 356.0], [600.0, 335.0], [700.0, 290.0], [800.0, 317.0], [900.0, 318.0], [1000.0, 318.0], [1100.0, 356.0], [1200.0, 329.0], [1300.0, 335.0], [1400.0, 312.0], [1500.0, 391.0], [1600.0, 437.0], [1700.0, 453.0], [1800.0, 480.0], [1900.0, 511.0], [2000.0, 500.0], [2100.0, 499.0], [2200.0, 492.0], [2300.0, 491.0], [2400.0, 492.0], [2500.0, 460.0], [2600.0, 456.0], [2700.0, 463.0], [2800.0, 499.0], [2900.0, 446.0], [3000.0, 502.0], [3100.0, 511.0], [3200.0, 483.0], [3300.0, 506.0], [3400.0, 437.0], [3500.0, 497.0], [3600.0, 442.0], [3700.0, 395.0], [3800.0, 358.0], [3900.0, 364.0], [4000.0, 385.0], [4300.0, 408.0], [4100.0, 392.0], [4200.0, 348.0], [4500.0, 348.0], [4400.0, 361.0], [4600.0, 365.0], [4800.0, 293.0], [4700.0, 307.0], [5000.0, 282.0], [4900.0, 284.0], [5100.0, 268.0], [5200.0, 290.0], [5300.0, 298.0], [5400.0, 238.0], [5600.0, 283.0], [5500.0, 267.0], [5700.0, 264.0], [5800.0, 257.0], [5900.0, 277.0], [6100.0, 235.0], [6000.0, 234.0], [6300.0, 255.0], [6200.0, 235.0], [6500.0, 222.0], [6600.0, 242.0], [6400.0, 250.0], [6700.0, 257.0], [6800.0, 252.0], [6900.0, 264.0], [7100.0, 284.0], [7000.0, 269.0], [7200.0, 279.0], [7400.0, 288.0], [7300.0, 303.0], [7500.0, 329.0], [7600.0, 343.0], [7700.0, 375.0], [7800.0, 345.0], [7900.0, 365.0], [8100.0, 424.0], [8000.0, 411.0], [8500.0, 439.0], [8300.0, 429.0], [8700.0, 509.0], [8200.0, 458.0], [8600.0, 482.0], [8400.0, 426.0], [9100.0, 557.0], [9000.0, 539.0], [8800.0, 536.0], [9200.0, 558.0], [8900.0, 535.0], [9300.0, 550.0], [9700.0, 602.0], [9400.0, 580.0], [9500.0, 560.0], [9600.0, 528.0], [10100.0, 575.0], [9900.0, 510.0], [10200.0, 531.0], [9800.0, 536.0], [10000.0, 570.0], [10700.0, 527.0], [10400.0, 555.0], [10300.0, 560.0], [10500.0, 535.0], [10600.0, 545.0], [10800.0, 535.0], [11000.0, 497.0], [11100.0, 449.0], [10900.0, 481.0], [11200.0, 478.0], [11500.0, 430.0], [11600.0, 444.0], [11400.0, 472.0], [11300.0, 453.0], [11700.0, 440.0], [12200.0, 328.0], [11900.0, 383.0], [11800.0, 363.0], [12100.0, 335.0], [12000.0, 348.0], [12600.0, 295.0], [12700.0, 288.0], [12300.0, 275.0], [12500.0, 282.0], [12400.0, 260.0], [12800.0, 233.0], [12900.0, 244.0], [13300.0, 169.0], [13200.0, 185.0], [13000.0, 206.0], [13100.0, 182.0], [13500.0, 163.0], [13800.0, 139.0], [13400.0, 168.0], [13700.0, 130.0], [13600.0, 160.0], [14100.0, 116.0], [14000.0, 112.0], [14300.0, 96.0], [13900.0, 121.0], [14200.0, 101.0], [14500.0, 83.0], [14600.0, 74.0], [14800.0, 70.0], [14700.0, 68.0], [14400.0, 76.0], [14900.0, 61.0], [15000.0, 55.0], [15100.0, 60.0], [15200.0, 52.0], [15300.0, 36.0], [15600.0, 29.0], [15400.0, 43.0], [15500.0, 54.0], [15800.0, 37.0], [15700.0, 22.0], [15900.0, 32.0], [16100.0, 27.0], [16200.0, 21.0], [16300.0, 22.0], [16000.0, 27.0], [16600.0, 18.0], [17000.0, 9.0], [16400.0, 22.0], [16800.0, 15.0], [17200.0, 13.0], [17400.0, 2.0], [17600.0, 10.0], [17800.0, 7.0], [18400.0, 4.0], [18000.0, 3.0], [18200.0, 5.0], [19200.0, 3.0], [18800.0, 3.0], [19400.0, 3.0], [19000.0, 2.0], [18600.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [20800.0, 2.0], [20600.0, 1.0], [22000.0, 3.0], [22200.0, 1.0], [21800.0, 2.0], [22400.0, 1.0], [23200.0, 1.0], [25600.0, 1.0], [16900.0, 14.0], [16500.0, 15.0], [17100.0, 7.0], [16700.0, 12.0], [17300.0, 16.0], [17700.0, 10.0], [18100.0, 4.0], [17500.0, 5.0], [18300.0, 4.0], [17900.0, 2.0], [18700.0, 2.0], [18500.0, 2.0], [19300.0, 1.0], [18900.0, 3.0], [19700.0, 2.0], [20100.0, 2.0], [20300.0, 1.0], [21500.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [20700.0, 1.0], [22900.0, 1.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1152.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 82682.0, "series": [{"data": [[0.0, 82682.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1152.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 35200.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 42679.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.229299363057327, "minX": 1.68597972E12, "maxY": 100.0, "series": [{"data": [[1.68598302E12, 100.0], [1.68597978E12, 24.63841807909605], [1.6859814E12, 100.0], [1.685982E12, 100.0], [1.68598362E12, 100.0], [1.68598422E12, 17.452945159106296], [1.68598038E12, 100.0], [1.6859826E12, 100.0], [1.68598098E12, 100.0], [1.6859832E12, 100.0], [1.68598158E12, 100.0], [1.6859838E12, 100.0], [1.68598056E12, 100.0], [1.68597996E12, 40.162923822104865], [1.68598218E12, 100.0], [1.68598116E12, 100.0], [1.68598278E12, 100.0], [1.6859844E12, 25.218368657675047], [1.68598176E12, 100.0], [1.68598338E12, 100.0], [1.68598398E12, 33.025481665630906], [1.68598236E12, 100.0], [1.68598014E12, 67.38342370255613], [1.68598074E12, 100.0], [1.68598296E12, 100.0], [1.68598134E12, 100.0], [1.68598356E12, 100.0], [1.68598032E12, 96.38000000000014], [1.68597972E12, 12.010810810810813], [1.68598194E12, 100.0], [1.68598416E12, 61.6430769230771], [1.68598092E12, 100.0], [1.68598254E12, 100.0], [1.68598314E12, 100.0], [1.68598152E12, 100.0], [1.68598212E12, 100.0], [1.68598374E12, 100.0], [1.6859799E12, 46.170144462279275], [1.68598434E12, 49.46490218642118], [1.6859805E12, 100.0], [1.68598272E12, 100.0], [1.6859811E12, 100.0], [1.68598332E12, 100.0], [1.68598008E12, 69.23052337195371], [1.6859817E12, 100.0], [1.68598392E12, 90.22527763088304], [1.68598068E12, 100.0], [1.6859823E12, 100.0], [1.6859829E12, 100.0], [1.68598128E12, 100.0], [1.68598188E12, 100.0], [1.6859835E12, 100.0], [1.6859841E12, 72.70652715495763], [1.68598026E12, 48.6427276024665], [1.68598248E12, 100.0], [1.68598086E12, 100.0], [1.68598308E12, 100.0], [1.68597984E12, 17.045161290322568], [1.68598146E12, 100.0], [1.68598368E12, 100.0], [1.68598044E12, 100.0], [1.68598206E12, 100.0], [1.68598428E12, 46.50814149354291], [1.68598104E12, 100.0], [1.68598266E12, 100.0], [1.68598326E12, 100.0], [1.68598002E12, 23.808444444444433], [1.68598164E12, 100.0], [1.68598224E12, 100.0], [1.68598386E12, 100.0], [1.68598062E12, 100.0], [1.68598284E12, 100.0], [1.68598122E12, 100.0], [1.68598344E12, 100.0], [1.6859802E12, 18.90207877461707], [1.68598182E12, 100.0], [1.68598404E12, 32.70750988142295], [1.6859808E12, 100.0], [1.68598242E12, 100.0], [1.68598446E12, 7.229299363057327]], "isOverall": false, "label": "OM2M-Insertion Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68598446E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 218.98070739549848, "minX": 1.0, "maxY": 3183.4626865671644, "series": [{"data": [[2.0, 272.3297872340425], [3.0, 247.87412587412592], [4.0, 226.73271889400922], [5.0, 231.04651162790697], [6.0, 218.98070739549848], [7.0, 244.49152542372883], [8.0, 253.53995157385], [9.0, 269.29629629629625], [10.0, 282.7539503386007], [11.0, 338.38095238095235], [12.0, 359.91056910569114], [13.0, 413.05102040816286], [14.0, 377.1652173913045], [15.0, 450.86967418546357], [16.0, 538.9447115384614], [17.0, 520.8288508557456], [18.0, 533.0544041450775], [19.0, 539.87037037037], [20.0, 554.0402476780185], [21.0, 627.955102040816], [22.0, 606.4872521246463], [23.0, 719.5640449438197], [24.0, 604.1086956521739], [25.0, 686.2192796610167], [26.0, 818.4657142857141], [27.0, 874.9038461538462], [28.0, 879.0153061224489], [29.0, 819.2184873949581], [30.0, 802.8940677966103], [31.0, 905.2122186495178], [32.0, 908.390361445783], [33.0, 914.5450980392155], [34.0, 1028.1912751677855], [35.0, 1201.6826923076944], [36.0, 1112.85606060606], [37.0, 1091.5360824742268], [38.0, 1171.8787878787884], [39.0, 1214.3780160857905], [40.0, 1109.6766666666658], [41.0, 1140.9591836734699], [42.0, 1044.2382352941179], [43.0, 1254.7946666666664], [44.0, 1236.6666666666665], [45.0, 1571.1689750692526], [46.0, 1236.050335570468], [47.0, 1484.5382830626454], [48.0, 1083.102167182662], [49.0, 1528.351906158358], [50.0, 1402.45106649937], [51.0, 1564.9007936507937], [52.0, 1485.7035398230084], [53.0, 1621.7852882703764], [54.0, 1541.3633633633644], [55.0, 1882.601063829787], [56.0, 1777.3791469194318], [57.0, 1592.364055299539], [58.0, 1697.7391304347825], [59.0, 1402.91935483871], [60.0, 1585.6778523489922], [61.0, 1627.439393939394], [62.0, 1993.0000000000002], [63.0, 1847.2142857142849], [64.0, 1791.6456140350883], [65.0, 1789.0152439024396], [66.0, 1873.4549763033172], [67.0, 1990.4999999999995], [68.0, 1985.3799999999999], [69.0, 2102.3059701492534], [70.0, 1790.5249042145606], [71.0, 1732.6298076923078], [72.0, 1674.919540229885], [73.0, 1827.4082840236695], [74.0, 2184.1950464396296], [75.0, 1973.5283291976837], [76.0, 2413.3412698412694], [77.0, 2093.206896551724], [78.0, 2567.837499999999], [79.0, 2607.4310344827586], [80.0, 2183.0249999999996], [81.0, 3026.446601941747], [82.0, 2050.8235294117644], [83.0, 1713.220930232558], [84.0, 1775.6172839506169], [85.0, 1305.672131147541], [86.0, 2142.578125], [87.0, 2365.265306122449], [88.0, 2670.9999999999995], [89.0, 3183.4626865671644], [90.0, 2195.267857142857], [91.0, 2455.4015748031497], [92.0, 3086.225352112676], [93.0, 2324.866666666667], [94.0, 2526.8076923076924], [95.0, 2576.888888888889], [96.0, 2014.5384615384617], [97.0, 2957.0057803468217], [98.0, 2857.424242424242], [99.0, 2756.0722891566274], [100.0, 2895.9900278255986], [1.0, 265.6428571428571]], "isOverall": false, "label": "create cin", "isController": false}, {"data": [[86.99866430033397, 2511.6361207818354]], "isOverall": false, "label": "create cin-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1070.2166666666667, "minX": 1.68597972E12, "maxY": 25482.966666666667, "series": [{"data": [[1.68598302E12, 16608.7], [1.68597978E12, 23165.216666666667], [1.6859814E12, 21780.8], [1.685982E12, 21233.933333333334], [1.68598362E12, 16825.85], [1.68598422E12, 13916.2], [1.68598038E12, 23863.6], [1.6859826E12, 19192.866666666665], [1.68598098E12, 20662.65], [1.6859832E12, 17322.483333333334], [1.68598158E12, 18876.216666666667], [1.6859838E12, 16453.266666666666], [1.68598056E12, 21694.35], [1.68597996E12, 21015.066666666666], [1.68598218E12, 17310.583333333332], [1.68598116E12, 20652.716666666667], [1.68598278E12, 17310.95], [1.6859844E12, 14966.716666666667], [1.68598176E12, 20965.633333333335], [1.68598338E12, 17788.966666666667], [1.68598398E12, 15266.783333333333], [1.68598236E12, 20041.733333333334], [1.68598014E12, 24122.35], [1.68598074E12, 23309.766666666666], [1.68598296E12, 17944.35], [1.68598134E12, 21274.616666666665], [1.68598356E12, 18321.7], [1.68598032E12, 24379.183333333334], [1.68597972E12, 6582.8], [1.68598194E12, 21862.233333333334], [1.68598416E12, 15567.733333333334], [1.68598092E12, 22020.633333333335], [1.68598254E12, 19554.45], [1.68598314E12, 19326.916666666668], [1.68598152E12, 18408.383333333335], [1.68598212E12, 17913.05], [1.68598374E12, 16279.65], [1.6859799E12, 23540.016666666666], [1.68598434E12, 16703.0], [1.6859805E12, 22055.533333333333], [1.68598272E12, 17265.533333333333], [1.6859811E12, 21000.133333333335], [1.68598332E12, 18523.55], [1.68598008E12, 23209.816666666666], [1.6859817E12, 19407.833333333332], [1.68598392E12, 17549.433333333334], [1.68598068E12, 24046.366666666665], [1.6859823E12, 19445.833333333332], [1.6859829E12, 18220.266666666666], [1.68598128E12, 19395.416666666668], [1.68598188E12, 19487.3], [1.6859835E12, 18239.916666666668], [1.6859841E12, 18456.783333333333], [1.68598026E12, 25482.966666666667], [1.68598248E12, 17609.283333333333], [1.68598086E12, 22967.766666666666], [1.68598308E12, 19432.25], [1.68597984E12, 19005.3], [1.68598146E12, 19065.833333333332], [1.68598368E12, 16870.483333333334], [1.68598044E12, 22842.966666666667], [1.68598206E12, 17380.95], [1.68598428E12, 16592.75], [1.68598104E12, 20584.583333333332], [1.68598266E12, 18448.583333333332], [1.68598326E12, 18577.0], [1.68598002E12, 20859.083333333332], [1.68598164E12, 18620.416666666668], [1.68598224E12, 16492.233333333334], [1.68598386E12, 16942.6], [1.68598062E12, 20914.633333333335], [1.68598284E12, 18590.716666666667], [1.68598122E12, 20793.233333333334], [1.68598344E12, 16774.483333333334], [1.6859802E12, 17589.75], [1.68598182E12, 18606.166666666668], [1.68598404E12, 14508.9], [1.6859808E12, 21907.15], [1.68598242E12, 18666.516666666666], [1.68598446E12, 1633.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68598302E12, 12065.5], [1.68597978E12, 16891.7], [1.6859814E12, 15957.816666666668], [1.685982E12, 15392.033333333333], [1.68598362E12, 12167.75], [1.68598422E12, 10068.216666666667], [1.68598038E12, 17368.866666666665], [1.6859826E12, 14001.433333333332], [1.68598098E12, 15017.116666666667], [1.6859832E12, 12385.883333333333], [1.68598158E12, 13749.216666666667], [1.6859838E12, 11711.033333333333], [1.68598056E12, 15228.433333333332], [1.68597996E12, 15480.65], [1.68598218E12, 12876.683333333332], [1.68598116E12, 15187.533333333333], [1.68598278E12, 12522.216666666667], [1.6859844E12, 10613.55], [1.68598176E12, 15133.0], [1.68598338E12, 13006.2], [1.68598398E12, 10968.016666666666], [1.68598236E12, 14676.283333333333], [1.68598014E12, 17600.633333333335], [1.68598074E12, 17171.183333333334], [1.68598296E12, 13108.45], [1.68598134E12, 15201.166666666666], [1.68598356E12, 13456.1], [1.68598032E12, 17723.333333333332], [1.68597972E12, 5044.333333333333], [1.68598194E12, 16414.533333333333], [1.68598416E12, 11077.083333333334], [1.68598092E12, 15985.083333333334], [1.68598254E12, 14137.766666666666], [1.68598314E12, 14042.333333333334], [1.68598152E12, 13217.516666666666], [1.68598212E12, 12910.766666666666], [1.68598374E12, 11670.133333333333], [1.6859799E12, 16987.133333333335], [1.68598434E12, 11847.366666666667], [1.6859805E12, 16005.533333333333], [1.68598272E12, 12024.6], [1.6859811E12, 15494.283333333333], [1.68598332E12, 13715.133333333333], [1.68598008E12, 17062.116666666665], [1.6859817E12, 14049.15], [1.68598392E12, 12890.316666666668], [1.68598068E12, 17389.316666666666], [1.6859823E12, 14274.1], [1.6859829E12, 13292.5], [1.68598128E12, 14171.85], [1.68598188E12, 14308.183333333332], [1.6859835E12, 13128.9], [1.6859841E12, 13681.05], [1.68598026E12, 18793.55], [1.68598248E12, 12822.15], [1.68598086E12, 16966.683333333334], [1.68598308E12, 13946.9], [1.68597984E12, 13735.583333333334], [1.68598146E12, 13633.333333333334], [1.68598368E12, 12010.966666666667], [1.68598044E12, 16993.95], [1.68598206E12, 12433.6], [1.68598428E12, 12140.483333333334], [1.68598104E12, 14792.166666666666], [1.68598266E12, 13401.566666666668], [1.68598326E12, 13565.166666666666], [1.68598002E12, 15337.5], [1.68598164E12, 13299.316666666668], [1.68598224E12, 12004.15], [1.68598386E12, 12072.316666666668], [1.68598062E12, 15146.633333333333], [1.68598284E12, 13906.0], [1.68598122E12, 14826.25], [1.68598344E12, 12065.5], [1.6859802E12, 12460.866666666667], [1.68598182E12, 13367.483333333334], [1.68598404E12, 10347.7], [1.6859808E12, 16012.35], [1.68598242E12, 13640.15], [1.68598446E12, 1070.2166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68598446E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 234.92297297297296, "minX": 1.68597972E12, "maxY": 3592.8963911525066, "series": [{"data": [[1.68598302E12, 3406.3367231638404], [1.68597978E12, 594.3393866020995], [1.6859814E12, 2602.3233660828632], [1.685982E12, 2578.7435783879537], [1.68598362E12, 3422.975910364139], [1.68598422E12, 658.2870683818555], [1.68598038E12, 2325.508634222918], [1.6859826E12, 2987.1231742940568], [1.68598098E12, 2676.7190195188386], [1.6859832E12, 3391.347275729226], [1.68598158E12, 2959.303420922159], [1.6859838E12, 3592.8963911525066], [1.68598056E12, 2667.6530886302567], [1.68597996E12, 1031.8634962571537], [1.68598218E12, 3122.1821069348853], [1.68598116E12, 2734.761669658889], [1.68598278E12, 3258.486663037561], [1.6859844E12, 994.7944765574839], [1.68598176E12, 2708.6752252252213], [1.68598338E12, 3095.863207547169], [1.68598398E12, 1358.0683654443758], [1.68598236E12, 2819.443102647468], [1.68598014E12, 1606.9825716498856], [1.68598074E12, 2379.9444223898363], [1.68598296E12, 3079.5439417576754], [1.68598134E12, 2684.8547085201863], [1.68598356E12, 2994.706180344479], [1.68598032E12, 2180.330769230766], [1.68597972E12, 234.92297297297296], [1.68598194E12, 2507.7637043189325], [1.68598416E12, 2383.6203076923093], [1.68598092E12, 2571.075479744143], [1.68598254E12, 2914.5597878495632], [1.68598314E12, 2888.745145631064], [1.68598152E12, 3048.241877256322], [1.68598212E12, 3106.2703273495245], [1.68598374E12, 3385.68574766355], [1.6859799E12, 1099.7724719101116], [1.68598434E12, 1765.6392405063286], [1.6859805E12, 2548.6367120953987], [1.68598272E12, 3400.0907029478435], [1.6859811E12, 2617.016717993834], [1.68598332E12, 2959.7425447316086], [1.68598008E12, 1616.2057530962816], [1.6859817E12, 2968.681222707422], [1.68598392E12, 2952.8730830248555], [1.68598068E12, 2395.3347706781647], [1.6859823E12, 2830.4173829990445], [1.6859829E12, 3125.703076923078], [1.68598128E12, 2836.94227994228], [1.68598188E12, 2846.349213911385], [1.6859835E12, 3069.011941848387], [1.6859841E12, 2092.523667164922], [1.68598026E12, 992.6412767500882], [1.68598248E12, 3203.322169059014], [1.68598086E12, 2425.545600642823], [1.68598308E12, 2939.727761485825], [1.68597984E12, 435.6312655086853], [1.68598146E12, 2996.3475000000003], [1.68598368E12, 3456.023269012487], [1.68598044E12, 2412.9281989570804], [1.68598206E12, 3410.248355263159], [1.68598428E12, 1491.0544637843927], [1.68598104E12, 2816.8594470046105], [1.68598266E12, 3030.0071210579845], [1.68598326E12, 3004.9542713567876], [1.68598002E12, 523.8946666666681], [1.68598164E12, 3052.2444900051287], [1.68598224E12, 3504.6360022714357], [1.68598386E12, 3423.154150197626], [1.68598062E12, 2704.754725472548], [1.68598284E12, 2871.0852941176486], [1.68598122E12, 2746.8335632183835], [1.68598344E12, 3440.3028248587584], [1.6859802E12, 612.5733041575493], [1.68598182E12, 3054.189189189191], [1.68598404E12, 1066.9354413702229], [1.6859808E12, 2493.486164325246], [1.68598242E12, 2916.0069965017465], [1.68598446E12, 464.38216560509574]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68598446E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 234.8824324324324, "minX": 1.68597972E12, "maxY": 3592.888242142025, "series": [{"data": [[1.68598302E12, 3406.33050847458], [1.68597978E12, 594.3240516545602], [1.6859814E12, 2602.316104228959], [1.685982E12, 2578.738263950397], [1.68598362E12, 3422.9714285714267], [1.68598422E12, 658.2775897088701], [1.68598038E12, 2325.500000000003], [1.6859826E12, 2987.1153846153884], [1.68598098E12, 2676.713118474808], [1.6859832E12, 3391.341221794168], [1.68598158E12, 2959.297967278131], [1.6859838E12, 3592.888242142025], [1.68598056E12, 2667.6477170993726], [1.68597996E12, 1031.8573315719927], [1.68598218E12, 3122.1746956061424], [1.68598116E12, 2734.754488330338], [1.68598278E12, 3258.4763200871], [1.6859844E12, 994.7848426461146], [1.68598176E12, 2708.6707207207173], [1.68598338E12, 3095.8563941299813], [1.68598398E12, 1358.0602858918592], [1.68598236E12, 2819.4379934974486], [1.68598014E12, 1606.9759876065036], [1.68598074E12, 2379.939261611755], [1.68598296E12, 3079.5371814872597], [1.68598134E12, 2684.8470852017895], [1.68598356E12, 2994.6995947315127], [1.68598032E12, 2180.3257692307648], [1.68597972E12, 234.8824324324324], [1.68598194E12, 2507.7566445182715], [1.68598416E12, 2383.6147692307686], [1.68598092E12, 2571.0699360341187], [1.68598254E12, 2914.551591128259], [1.68598314E12, 2888.7378640776697], [1.68598152E12, 3048.2351727694727], [1.68598212E12, 3106.2639915522664], [1.68598374E12, 3385.675233644864], [1.6859799E12, 1099.7636436597084], [1.68598434E12, 1765.6294591484473], [1.6859805E12, 2548.6307495741053], [1.68598272E12, 3400.0827664399058], [1.6859811E12, 2617.007479102509], [1.68598332E12, 2959.737574552682], [1.68598008E12, 1616.1969636436286], [1.6859817E12, 2968.6768558952012], [1.68598392E12, 2952.867794817553], [1.68598068E12, 2395.3284986279873], [1.6859823E12, 2830.412607449854], [1.6859829E12, 3125.695897435901], [1.68598128E12, 2836.936026936026], [1.68598188E12, 2846.3434969032874], [1.6859835E12, 3069.0067497403943], [1.6859841E12, 2092.5176880916824], [1.68598026E12, 992.6376496191514], [1.68598248E12, 3203.317916002131], [1.68598086E12, 2425.5379670550433], [1.68598308E12, 2939.715053763449], [1.68597984E12, 435.61736972704773], [1.68598146E12, 2996.3400000000065], [1.68598368E12, 3456.0187287173667], [1.68598044E12, 2412.920978740469], [1.68598206E12, 3410.240679824558], [1.68598428E12, 1491.0454800673776], [1.68598104E12, 2816.8520737327267], [1.68598266E12, 3029.9994913530013], [1.68598326E12, 3004.9502512562754], [1.68598002E12, 523.8866666666678], [1.68598164E12, 3052.23885187084], [1.68598224E12, 3504.629755820552], [1.68598386E12, 3423.14624505929], [1.68598062E12, 2704.746174617458], [1.68598284E12, 2871.0779411764693], [1.68598122E12, 2746.823448275858], [1.68598344E12, 3440.2949152542383], [1.6859802E12, 612.5656455142238], [1.68598182E12, 3054.1835798062248], [1.68598404E12, 1066.9235836627138], [1.6859808E12, 2493.481481481481], [1.68598242E12, 2916.0024987506213], [1.68598446E12, 464.3694267515924]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68598446E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.3107692307692302, "minX": 1.68597972E12, "maxY": 0.7229729729729734, "series": [{"data": [[1.68598302E12, 0.40960451977401113], [1.68597978E12, 0.4471347861178376], [1.6859814E12, 0.37889790687740305], [1.685982E12, 0.4069973427812222], [1.68598362E12, 0.44033613445378167], [1.68598422E12, 0.37779282329045355], [1.68598038E12, 0.36734693877551117], [1.6859826E12, 0.40068159688412847], [1.68598098E12, 0.3985474353154788], [1.6859832E12, 0.4166208035222889], [1.68598158E12, 0.4536440257808631], [1.6859838E12, 0.4260768335273576], [1.68598056E12, 0.365711727842435], [1.68597996E12, 0.3320123293703219], [1.68598218E12, 0.5134992059290633], [1.68598116E12, 0.4079892280071806], [1.68598278E12, 0.3984757757212846], [1.6859844E12, 0.5915221579961454], [1.68598176E12, 0.4045045045045047], [1.68598338E12, 0.5188679245283014], [1.68598398E12, 0.48042262274704844], [1.68598236E12, 0.3813283790060384], [1.68598014E12, 0.4105344694035625], [1.68598074E12, 0.39499801508535237], [1.68598296E12, 0.47061882475299077], [1.68598134E12, 0.47757847533632297], [1.68598356E12, 0.43819655521783235], [1.68598032E12, 0.3730769230769231], [1.68597972E12, 0.7229729729729734], [1.68598194E12, 0.4202657807308967], [1.68598416E12, 0.3107692307692302], [1.68598092E12, 0.4170575692963757], [1.68598254E12, 0.42237222757955656], [1.68598314E12, 0.39126213592233083], [1.68598152E12, 0.44094894275399743], [1.68598212E12, 0.4619852164730734], [1.68598374E12, 0.42815420560747686], [1.6859799E12, 0.3579454253611558], [1.68598434E12, 0.3670886075949363], [1.6859805E12, 0.34582623509369753], [1.68598272E12, 0.37868480725623566], [1.6859811E12, 0.4153101627804656], [1.68598332E12, 0.3797216699801187], [1.68598008E12, 0.3387934478625654], [1.6859817E12, 0.44201843765162513], [1.68598392E12, 0.4214701216287683], [1.68598068E12, 0.39945119560956477], [1.6859823E12, 0.365807067812799], [1.6859829E12, 0.42820512820512857], [1.68598128E12, 0.41269841269841245], [1.68598188E12, 0.4049547403525483], [1.6859835E12, 0.3790238836967808], [1.6859841E12, 0.33134030891878424], [1.68598026E12, 0.31410953935437014], [1.68598248E12, 0.3981924508240298], [1.68598086E12, 0.3784652470871839], [1.68598308E12, 0.37781036168132937], [1.68597984E12, 0.42382133995037136], [1.68598146E12, 0.375], [1.68598368E12, 0.3717366628830881], [1.68598044E12, 0.376253509827517], [1.68598206E12, 0.5087719298245619], [1.68598428E12, 0.40595171252105494], [1.68598104E12, 0.45529953917050725], [1.68598266E12, 0.44201424211597146], [1.68598326E12, 0.4256281407035171], [1.68598002E12, 0.39288888888888934], [1.68598164E12, 0.4295233213736546], [1.68598224E12, 0.38046564452015946], [1.68598386E12, 0.43195934500282374], [1.68598062E12, 0.41449144914491526], [1.68598284E12, 0.38823529411764673], [1.68598122E12, 0.42252873563218374], [1.68598344E12, 0.5435028248587567], [1.6859802E12, 0.351750547045952], [1.68598182E12, 0.38551759306476335], [1.68598404E12, 0.3959156785243749], [1.6859808E12, 0.34951042997020026], [1.68598242E12, 0.4982508745627188], [1.68598446E12, 0.31847133757961793]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68598446E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 92.0, "minX": 1.68597972E12, "maxY": 25624.0, "series": [{"data": [[1.68598302E12, 19452.0], [1.68597978E12, 3407.0], [1.6859814E12, 14152.0], [1.685982E12, 17059.0], [1.68598362E12, 20792.0], [1.68598422E12, 5850.0], [1.68598038E12, 13599.0], [1.6859826E12, 16452.0], [1.68598098E12, 15490.0], [1.6859832E12, 17787.0], [1.68598158E12, 19220.0], [1.6859838E12, 18304.0], [1.68598056E12, 12963.0], [1.68597996E12, 6746.0], [1.68598218E12, 19716.0], [1.68598116E12, 15908.0], [1.68598278E12, 20232.0], [1.6859844E12, 6523.0], [1.68598176E12, 13690.0], [1.68598338E12, 16955.0], [1.68598398E12, 11894.0], [1.68598236E12, 17367.0], [1.68598014E12, 8546.0], [1.68598074E12, 14919.0], [1.68598296E12, 16132.0], [1.68598134E12, 15210.0], [1.68598356E12, 19283.0], [1.68598032E12, 12276.0], [1.68597972E12, 1272.0], [1.68598194E12, 16115.0], [1.68598416E12, 11722.0], [1.68598092E12, 13831.0], [1.68598254E12, 16484.0], [1.68598314E12, 18724.0], [1.68598152E12, 16647.0], [1.68598212E12, 17419.0], [1.68598374E12, 18909.0], [1.6859799E12, 6153.0], [1.68598434E12, 10989.0], [1.6859805E12, 14171.0], [1.68598272E12, 17185.0], [1.6859811E12, 15072.0], [1.68598332E12, 16709.0], [1.68598008E12, 10122.0], [1.6859817E12, 17735.0], [1.68598392E12, 18363.0], [1.68598068E12, 13634.0], [1.6859823E12, 15986.0], [1.6859829E12, 18858.0], [1.68598128E12, 16600.0], [1.68598188E12, 16413.0], [1.6859835E12, 17665.0], [1.6859841E12, 15076.0], [1.68598026E12, 8431.0], [1.68598248E12, 18315.0], [1.68598086E12, 13750.0], [1.68598308E12, 18460.0], [1.68597984E12, 3153.0], [1.68598146E12, 17055.0], [1.68598368E12, 20873.0], [1.68598044E12, 13890.0], [1.68598206E12, 17536.0], [1.68598428E12, 9252.0], [1.68598104E12, 14866.0], [1.68598266E12, 17229.0], [1.68598326E12, 17244.0], [1.68598002E12, 5019.0], [1.68598164E12, 16624.0], [1.68598224E12, 25624.0], [1.68598386E12, 17321.0], [1.68598062E12, 15676.0], [1.68598284E12, 20360.0], [1.68598122E12, 13520.0], [1.68598344E12, 18216.0], [1.6859802E12, 5357.0], [1.68598182E12, 18110.0], [1.68598404E12, 7745.0], [1.6859808E12, 15495.0], [1.68598242E12, 15642.0], [1.68598446E12, 1910.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68598302E12, 12812.300000000001], [1.68597978E12, 2070.0], [1.6859814E12, 10109.8], [1.685982E12, 10240.0], [1.68598362E12, 13236.000000000002], [1.68598422E12, 2440.5], [1.68598038E12, 8995.500000000004], [1.6859826E12, 11545.6], [1.68598098E12, 10418.0], [1.6859832E12, 12699.000000000004], [1.68598158E12, 11269.000000000002], [1.6859838E12, 13158.200000000006], [1.68598056E12, 9675.6], [1.68597996E12, 3833.0], [1.68598218E12, 12570.5], [1.68598116E12, 10479.4], [1.68598278E12, 12599.0], [1.6859844E12, 3302.6000000000004], [1.68598176E12, 10434.6], [1.68598338E12, 11989.1], [1.68598398E12, 5895.699999999999], [1.68598236E12, 10945.7], [1.68598014E12, 6141.8], [1.68598074E12, 9547.0], [1.68598296E12, 11904.599999999999], [1.68598134E12, 10348.4], [1.68598356E12, 11907.600000000002], [1.68598032E12, 8746.1], [1.68597972E12, 616.0000000000002], [1.68598194E12, 10416.600000000002], [1.68598416E12, 8682.000000000002], [1.68598092E12, 9861.4], [1.68598254E12, 11356.000000000004], [1.68598314E12, 11798.0], [1.68598152E12, 11416.600000000002], [1.68598212E12, 11943.800000000001], [1.68598374E12, 12960.5], [1.6859799E12, 4192.0], [1.68598434E12, 6481.6], [1.6859805E12, 9670.9], [1.68598272E12, 12635.6], [1.6859811E12, 10090.900000000001], [1.68598332E12, 11818.7], [1.68598008E12, 6324.5], [1.6859817E12, 11230.0], [1.68598392E12, 11607.800000000001], [1.68598068E12, 9195.6], [1.6859823E12, 11267.800000000001], [1.6859829E12, 11909.5], [1.68598128E12, 10995.0], [1.68598188E12, 11178.1], [1.6859835E12, 12140.0], [1.6859841E12, 8459.099999999999], [1.68598026E12, 4070.1999999999994], [1.68598248E12, 12321.800000000003], [1.68598086E12, 9548.0], [1.68598308E12, 11351.0], [1.68597984E12, 1598.0], [1.68598146E12, 11190.8], [1.68598368E12, 13017.8], [1.68598044E12, 9334.8], [1.68598206E12, 12594.000000000002], [1.68598428E12, 5806.0], [1.68598104E12, 10384.8], [1.68598266E12, 11656.1], [1.68598326E12, 11921.599999999999], [1.68598002E12, 1943.9999999999995], [1.68598164E12, 11400.4], [1.68598224E12, 13532.999999999998], [1.68598386E12, 12758.0], [1.68598062E12, 10104.2], [1.68598284E12, 11783.0], [1.68598122E12, 10257.8], [1.68598344E12, 12584.5], [1.6859802E12, 2305.400000000004], [1.68598182E12, 11383.6], [1.68598404E12, 4878.6], [1.6859808E12, 9468.5], [1.68598242E12, 11296.6], [1.68598446E12, 1240.0000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68598302E12, 16005.780000000002], [1.68597978E12, 2840.0], [1.6859814E12, 12428.339999999998], [1.685982E12, 12921.159999999996], [1.68598362E12, 16919.119999999995], [1.68598422E12, 4638.699999999999], [1.68598038E12, 11075.86], [1.6859826E12, 13750.86], [1.68598098E12, 13335.799999999994], [1.6859832E12, 15814.3], [1.68598158E12, 14400.520000000002], [1.6859838E12, 16906.29], [1.68598056E12, 11660.159999999996], [1.68597996E12, 5422.720000000005], [1.68598218E12, 16521.00000000001], [1.68598116E12, 12661.16], [1.68598278E12, 16082.859999999982], [1.6859844E12, 4884.999999999992], [1.68598176E12, 12715.32], [1.68598338E12, 14207.189999999997], [1.68598398E12, 10164.410000000002], [1.68598236E12, 13770.659999999998], [1.68598014E12, 7607.2199999999975], [1.68598074E12, 12101.0], [1.68598296E12, 14562.44], [1.68598134E12, 12715.96], [1.68598356E12, 15595.62], [1.68598032E12, 10789.919999999996], [1.68597972E12, 1159.06], [1.68598194E12, 13035.64], [1.68598416E12, 10814.83], [1.68598092E12, 11888.800000000001], [1.68598254E12, 14415.319999999989], [1.68598314E12, 14691.0], [1.68598152E12, 14598.560000000001], [1.68598212E12, 15357.439999999999], [1.68598374E12, 16279.839999999997], [1.6859799E12, 5317.400000000001], [1.68598434E12, 7901.360000000001], [1.6859805E12, 12209.260000000002], [1.68598272E12, 15307.72], [1.6859811E12, 12440.510000000002], [1.68598332E12, 14645.660000000007], [1.68598008E12, 8294.450000000003], [1.6859817E12, 13878.640000000001], [1.68598392E12, 14796.47999999999], [1.68598068E12, 11589.359999999999], [1.6859823E12, 14282.879999999985], [1.6859829E12, 14546.75], [1.68598128E12, 13285.099999999988], [1.68598188E12, 13910.489999999993], [1.6859835E12, 14462.799999999987], [1.6859841E12, 10568.230000000001], [1.68598026E12, 6884.92], [1.68598248E12, 15173.670000000002], [1.68598086E12, 11823.4], [1.68598308E12, 14320.559999999998], [1.68597984E12, 2393.5199999999995], [1.68598146E12, 14315.919999999982], [1.68598368E12, 16708.64], [1.68598044E12, 11568.799999999997], [1.68598206E12, 15570.920000000002], [1.68598428E12, 7550.249999999999], [1.68598104E12, 13044.54], [1.68598266E12, 14765.669999999998], [1.68598326E12, 14787.36], [1.68598002E12, 4082.1399999999994], [1.68598164E12, 14187.22], [1.68598224E12, 20828.679999999993], [1.68598386E12, 16031.31], [1.68598062E12, 13041.679999999997], [1.68598284E12, 15633.880000000001], [1.68598122E12, 12383.48], [1.68598344E12, 15641.0], [1.6859802E12, 4658.0], [1.68598182E12, 14498.829999999998], [1.68598404E12, 6965.29], [1.6859808E12, 12302.729999999992], [1.68598242E12, 13602.42], [1.68598446E12, 1861.3600000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68598302E12, 13929.149999999996], [1.68597978E12, 2380.2], [1.6859814E12, 11006.099999999995], [1.685982E12, 11278.399999999998], [1.68598362E12, 14492.999999999996], [1.68598422E12, 3043.75], [1.68598038E12, 9761.3], [1.6859826E12, 12554.750000000002], [1.68598098E12, 11424.0], [1.6859832E12, 13946.699999999999], [1.68598158E12, 12123.9], [1.6859838E12, 14431.4], [1.68598056E12, 10490.899999999998], [1.68597996E12, 4313.799999999999], [1.68598218E12, 13997.0], [1.68598116E12, 11325.899999999994], [1.68598278E12, 13966.9], [1.6859844E12, 3768.3], [1.68598176E12, 11312.0], [1.68598338E12, 12881.65], [1.68598398E12, 7162.44999999999], [1.68598236E12, 12044.449999999999], [1.68598014E12, 6791.099999999999], [1.68598074E12, 10508.5], [1.68598296E12, 13015.699999999999], [1.68598134E12, 11239.399999999998], [1.68598356E12, 13481.400000000001], [1.68598032E12, 9356.599999999999], [1.68597972E12, 871.15], [1.68598194E12, 11394.6], [1.68598416E12, 9570.55], [1.68598092E12, 10671.0], [1.68598254E12, 12432.15], [1.68598314E12, 12933.800000000001], [1.68598152E12, 12610.6], [1.68598212E12, 13178.3], [1.68598374E12, 14047.05], [1.6859799E12, 4703.25], [1.68598434E12, 7149.399999999999], [1.6859805E12, 10512.299999999997], [1.68598272E12, 13635.099999999999], [1.6859811E12, 11000.3], [1.68598332E12, 12695.349999999999], [1.68598008E12, 6977.75], [1.6859817E12, 12010.5], [1.68598392E12, 12819.300000000001], [1.68598068E12, 10010.8], [1.6859823E12, 12303.3], [1.6859829E12, 12976.0], [1.68598128E12, 11788.5], [1.68598188E12, 12026.649999999996], [1.6859835E12, 13033.0], [1.6859841E12, 9212.949999999999], [1.68598026E12, 5501.049999999999], [1.68598248E12, 13335.1], [1.68598086E12, 10378.0], [1.68598308E12, 12357.449999999999], [1.68597984E12, 1911.8000000000004], [1.68598146E12, 12410.399999999996], [1.68598368E12, 14435.699999999999], [1.68598044E12, 10218.249999999996], [1.68598206E12, 13600.799999999997], [1.68598428E12, 6459.0], [1.68598104E12, 11295.849999999997], [1.68598266E12, 12840.699999999997], [1.68598326E12, 13006.399999999998], [1.68598002E12, 2978.1999999999975], [1.68598164E12, 12423.999999999998], [1.68598224E12, 16025.999999999989], [1.68598386E12, 13829.699999999997], [1.68598062E12, 10988.2], [1.68598284E12, 13295.199999999999], [1.68598122E12, 11171.399999999998], [1.68598344E12, 13415.25], [1.6859802E12, 3602.999999999998], [1.68598182E12, 12397.8], [1.68598404E12, 5945.949999999999], [1.6859808E12, 10496.349999999999], [1.68598242E12, 11975.2], [1.68598446E12, 1447.1999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68598302E12, 125.0], [1.68597978E12, 92.0], [1.6859814E12, 114.0], [1.685982E12, 113.0], [1.68598362E12, 129.0], [1.68598422E12, 130.0], [1.68598038E12, 107.0], [1.6859826E12, 118.0], [1.68598098E12, 111.0], [1.6859832E12, 123.0], [1.68598158E12, 116.0], [1.6859838E12, 120.0], [1.68598056E12, 99.0], [1.68597996E12, 93.0], [1.68598218E12, 120.0], [1.68598116E12, 113.0], [1.68598278E12, 112.0], [1.6859844E12, 120.0], [1.68598176E12, 117.0], [1.68598338E12, 127.0], [1.68598398E12, 130.0], [1.68598236E12, 109.0], [1.68598014E12, 104.0], [1.68598074E12, 110.0], [1.68598296E12, 112.0], [1.68598134E12, 114.0], [1.68598356E12, 109.0], [1.68598032E12, 98.0], [1.68597972E12, 92.0], [1.68598194E12, 118.0], [1.68598416E12, 132.0], [1.68598092E12, 110.0], [1.68598254E12, 122.0], [1.68598314E12, 127.0], [1.68598152E12, 114.0], [1.68598212E12, 108.0], [1.68598374E12, 129.0], [1.6859799E12, 103.0], [1.68598434E12, 132.0], [1.6859805E12, 98.0], [1.68598272E12, 123.0], [1.6859811E12, 112.0], [1.68598332E12, 116.0], [1.68598008E12, 105.0], [1.6859817E12, 115.0], [1.68598392E12, 130.0], [1.68598068E12, 110.0], [1.6859823E12, 121.0], [1.6859829E12, 124.0], [1.68598128E12, 113.0], [1.68598188E12, 105.0], [1.6859835E12, 127.0], [1.6859841E12, 119.0], [1.68598026E12, 105.0], [1.68598248E12, 120.0], [1.68598086E12, 99.0], [1.68598308E12, 126.0], [1.68597984E12, 101.0], [1.68598146E12, 115.0], [1.68598368E12, 129.0], [1.68598044E12, 100.0], [1.68598206E12, 120.0], [1.68598428E12, 131.0], [1.68598104E12, 112.0], [1.68598266E12, 122.0], [1.68598326E12, 127.0], [1.68598002E12, 103.0], [1.68598164E12, 117.0], [1.68598224E12, 120.0], [1.68598386E12, 129.0], [1.68598062E12, 108.0], [1.68598284E12, 124.0], [1.68598122E12, 114.0], [1.68598344E12, 115.0], [1.6859802E12, 104.0], [1.68598182E12, 117.0], [1.68598404E12, 119.0], [1.6859808E12, 99.0], [1.68598242E12, 122.0], [1.68598446E12, 134.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68598302E12, 219.0], [1.68597978E12, 188.0], [1.6859814E12, 217.0], [1.685982E12, 224.0], [1.68598362E12, 227.0], [1.68598422E12, 222.0], [1.68598038E12, 200.0], [1.6859826E12, 230.0], [1.68598098E12, 202.0], [1.6859832E12, 229.0], [1.68598158E12, 206.0], [1.6859838E12, 227.0], [1.68598056E12, 210.0], [1.68597996E12, 190.0], [1.68598218E12, 211.0], [1.68598116E12, 203.0], [1.68598278E12, 222.0], [1.6859844E12, 230.0], [1.68598176E12, 239.0], [1.68598338E12, 224.0], [1.68598398E12, 227.0], [1.68598236E12, 220.0], [1.68598014E12, 197.0], [1.68598074E12, 196.0], [1.68598296E12, 219.0], [1.68598134E12, 218.0], [1.68598356E12, 228.0], [1.68598032E12, 209.0], [1.68597972E12, 183.0], [1.68598194E12, 207.0], [1.68598416E12, 225.0], [1.68598092E12, 200.0], [1.68598254E12, 217.0], [1.68598314E12, 249.0], [1.68598152E12, 214.0], [1.68598212E12, 221.0], [1.68598374E12, 227.0], [1.6859799E12, 188.0], [1.68598434E12, 238.0], [1.6859805E12, 208.0], [1.68598272E12, 229.0], [1.6859811E12, 200.0], [1.68598332E12, 222.0], [1.68598008E12, 196.0], [1.6859817E12, 206.0], [1.68598392E12, 231.0], [1.68598068E12, 215.0], [1.6859823E12, 220.0], [1.6859829E12, 222.0], [1.68598128E12, 210.5], [1.68598188E12, 206.5], [1.6859835E12, 245.0], [1.6859841E12, 237.0], [1.68598026E12, 197.0], [1.68598248E12, 212.0], [1.68598086E12, 199.0], [1.68598308E12, 229.0], [1.68597984E12, 186.0], [1.68598146E12, 208.0], [1.68598368E12, 227.0], [1.68598044E12, 194.5], [1.68598206E12, 224.0], [1.68598428E12, 231.0], [1.68598104E12, 214.0], [1.68598266E12, 229.0], [1.68598326E12, 225.0], [1.68598002E12, 187.0], [1.68598164E12, 217.0], [1.68598224E12, 213.0], [1.68598386E12, 244.0], [1.68598062E12, 209.0], [1.68598284E12, 215.0], [1.68598122E12, 204.0], [1.68598344E12, 223.0], [1.6859802E12, 197.0], [1.68598182E12, 212.0], [1.68598404E12, 225.5], [1.6859808E12, 199.0], [1.68598242E12, 228.0], [1.68598446E12, 224.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68598446E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 73.0, "minX": 1.0, "maxY": 5684.0, "series": [{"data": [[2.0, 197.5], [3.0, 237.5], [4.0, 224.5], [5.0, 262.0], [6.0, 232.0], [7.0, 233.0], [8.0, 225.0], [9.0, 221.0], [10.0, 225.0], [11.0, 213.0], [12.0, 224.0], [13.0, 220.0], [14.0, 227.0], [15.0, 216.0], [16.0, 214.0], [17.0, 222.0], [18.0, 219.0], [19.0, 220.0], [20.0, 222.0], [21.0, 218.0], [22.0, 225.0], [23.0, 219.0], [24.0, 221.0], [25.0, 223.0], [26.0, 220.0], [27.0, 220.0], [28.0, 225.0], [29.0, 218.0], [30.0, 223.0], [31.0, 220.0], [33.0, 218.0], [32.0, 219.0], [34.0, 218.0], [35.0, 219.0], [36.0, 223.0], [37.0, 220.0], [39.0, 217.0], [38.0, 218.0], [40.0, 213.0], [41.0, 214.0], [42.0, 219.0], [43.0, 219.0], [44.0, 217.0], [45.0, 211.0], [47.0, 214.0], [46.0, 212.0], [49.0, 218.0], [48.0, 220.0], [51.0, 211.0], [50.0, 215.0], [53.0, 209.0], [52.0, 212.0], [55.0, 222.0], [54.0, 217.0], [57.0, 204.0], [56.0, 213.0], [58.0, 212.0], [59.0, 201.0], [60.0, 203.0], [61.0, 220.0], [62.0, 210.0], [63.0, 229.5], [66.0, 201.0], [64.0, 208.0], [65.0, 200.0], [67.0, 211.0], [68.0, 214.0], [71.0, 213.0], [69.0, 203.5], [70.0, 257.0], [72.0, 260.0], [73.0, 204.5], [75.0, 226.5], [74.0, 230.5], [76.0, 194.5], [78.0, 203.0], [77.0, 230.0], [79.0, 245.0], [80.0, 201.0], [82.0, 222.0], [83.0, 241.0], [81.0, 206.0], [85.0, 238.0], [86.0, 194.5], [84.0, 186.0], [87.0, 244.5], [90.0, 220.0], [1.0, 231.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 5684.0], [6.0, 2586.0], [7.0, 326.0], [8.0, 3156.5], [9.0, 3323.0], [10.0, 1788.0], [11.0, 3986.0], [12.0, 2860.0], [13.0, 2983.5], [14.0, 2603.0], [15.0, 814.0], [16.0, 1927.0], [17.0, 2163.0], [18.0, 130.0], [19.0, 138.0], [20.0, 192.5], [21.0, 161.0], [22.0, 156.0], [23.0, 148.5], [24.0, 135.5], [25.0, 117.0], [26.0, 137.0], [27.0, 118.5], [28.0, 128.0], [29.0, 120.0], [30.0, 127.0], [31.0, 116.0], [33.0, 129.0], [32.0, 121.0], [34.0, 115.0], [35.0, 114.5], [36.0, 120.0], [37.0, 126.0], [39.0, 112.0], [38.0, 112.5], [40.0, 110.0], [41.0, 101.0], [42.0, 120.0], [43.0, 118.0], [44.0, 117.0], [45.0, 112.0], [47.0, 111.0], [46.0, 109.0], [49.0, 131.0], [48.0, 113.0], [51.0, 101.0], [50.0, 108.0], [53.0, 105.0], [52.0, 103.0], [55.0, 146.0], [54.0, 122.0], [57.0, 112.0], [56.0, 121.5], [58.0, 105.0], [59.0, 115.0], [60.0, 100.0], [61.0, 112.0], [62.0, 107.0], [63.0, 120.0], [66.0, 97.0], [64.0, 95.0], [65.0, 114.0], [67.0, 96.0], [68.0, 134.5], [71.0, 100.0], [69.0, 151.0], [70.0, 128.0], [72.0, 155.0], [73.0, 85.0], [75.0, 101.0], [74.0, 106.5], [76.0, 100.5], [78.0, 107.5], [77.0, 101.0], [79.0, 144.0], [80.0, 73.0], [82.0, 108.0], [83.0, 80.0], [81.0, 97.0], [85.0, 93.5], [86.0, 103.5], [84.0, 93.0], [87.0, 108.0], [90.0, 134.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 73.0, "minX": 1.0, "maxY": 5684.0, "series": [{"data": [[2.0, 197.5], [3.0, 237.5], [4.0, 224.5], [5.0, 262.0], [6.0, 232.0], [7.0, 233.0], [8.0, 225.0], [9.0, 221.0], [10.0, 225.0], [11.0, 213.0], [12.0, 224.0], [13.0, 220.0], [14.0, 227.0], [15.0, 216.0], [16.0, 214.0], [17.0, 222.0], [18.0, 219.0], [19.0, 220.0], [20.0, 222.0], [21.0, 218.0], [22.0, 225.0], [23.0, 219.0], [24.0, 221.0], [25.0, 223.0], [26.0, 220.0], [27.0, 220.0], [28.0, 225.0], [29.0, 218.0], [30.0, 223.0], [31.0, 220.0], [33.0, 218.0], [32.0, 219.0], [34.0, 218.0], [35.0, 219.0], [36.0, 223.0], [37.0, 220.0], [39.0, 217.0], [38.0, 218.0], [40.0, 213.0], [41.0, 214.0], [42.0, 219.0], [43.0, 219.0], [44.0, 217.0], [45.0, 211.0], [47.0, 214.0], [46.0, 212.0], [49.0, 218.0], [48.0, 220.0], [51.0, 211.0], [50.0, 215.0], [53.0, 209.0], [52.0, 212.0], [55.0, 222.0], [54.0, 217.0], [57.0, 204.0], [56.0, 213.0], [58.0, 212.0], [59.0, 201.0], [60.0, 203.0], [61.0, 220.0], [62.0, 210.0], [63.0, 229.5], [66.0, 201.0], [64.0, 208.0], [65.0, 200.0], [67.0, 211.0], [68.0, 214.0], [71.0, 213.0], [69.0, 203.5], [70.0, 257.0], [72.0, 260.0], [73.0, 204.5], [75.0, 226.5], [74.0, 230.5], [76.0, 194.5], [78.0, 203.0], [77.0, 230.0], [79.0, 245.0], [80.0, 201.0], [82.0, 222.0], [83.0, 241.0], [81.0, 206.0], [85.0, 238.0], [86.0, 194.5], [84.0, 186.0], [87.0, 244.5], [90.0, 220.0], [1.0, 229.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 5684.0], [6.0, 2586.0], [7.0, 326.0], [8.0, 3156.5], [9.0, 3323.0], [10.0, 1788.0], [11.0, 3986.0], [12.0, 2860.0], [13.0, 2983.5], [14.0, 2603.0], [15.0, 814.0], [16.0, 1927.0], [17.0, 2163.0], [18.0, 130.0], [19.0, 138.0], [20.0, 192.5], [21.0, 161.0], [22.0, 156.0], [23.0, 148.5], [24.0, 135.5], [25.0, 117.0], [26.0, 137.0], [27.0, 118.5], [28.0, 128.0], [29.0, 120.0], [30.0, 127.0], [31.0, 116.0], [33.0, 129.0], [32.0, 121.0], [34.0, 115.0], [35.0, 114.5], [36.0, 120.0], [37.0, 126.0], [39.0, 112.0], [38.0, 112.5], [40.0, 110.0], [41.0, 101.0], [42.0, 120.0], [43.0, 118.0], [44.0, 117.0], [45.0, 112.0], [47.0, 111.0], [46.0, 109.0], [49.0, 131.0], [48.0, 113.0], [51.0, 101.0], [50.0, 108.0], [53.0, 105.0], [52.0, 103.0], [55.0, 146.0], [54.0, 122.0], [57.0, 112.0], [56.0, 121.5], [58.0, 105.0], [59.0, 115.0], [60.0, 100.0], [61.0, 112.0], [62.0, 107.0], [63.0, 120.0], [66.0, 97.0], [64.0, 95.0], [65.0, 114.0], [67.0, 96.0], [68.0, 134.5], [71.0, 100.0], [69.0, 151.0], [70.0, 128.0], [72.0, 155.0], [73.0, 85.0], [75.0, 101.0], [74.0, 106.5], [76.0, 100.5], [78.0, 107.5], [77.0, 101.0], [79.0, 144.0], [80.0, 73.0], [82.0, 108.0], [83.0, 80.0], [81.0, 97.0], [85.0, 93.5], [86.0, 103.5], [84.0, 93.0], [87.0, 108.0], [90.0, 134.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.433333333333333, "minX": 1.68597972E12, "maxY": 46.95, "series": [{"data": [[1.68598302E12, 29.5], [1.68597978E12, 41.4], [1.6859814E12, 39.016666666666666], [1.685982E12, 37.63333333333333], [1.68598362E12, 29.75], [1.68598422E12, 24.533333333333335], [1.68598038E12, 42.46666666666667], [1.6859826E12, 34.233333333333334], [1.68598098E12, 36.71666666666667], [1.6859832E12, 30.283333333333335], [1.68598158E12, 33.61666666666667], [1.6859838E12, 28.633333333333333], [1.68598056E12, 37.233333333333334], [1.68597996E12, 37.21666666666667], [1.68598218E12, 31.483333333333334], [1.68598116E12, 37.13333333333333], [1.68598278E12, 30.616666666666667], [1.6859844E12, 25.516666666666666], [1.68598176E12, 37.0], [1.68598338E12, 31.8], [1.68598398E12, 25.766666666666666], [1.68598236E12, 35.88333333333333], [1.68598014E12, 42.5], [1.68598074E12, 41.983333333333334], [1.68598296E12, 32.05], [1.68598134E12, 37.166666666666664], [1.68598356E12, 32.9], [1.68598032E12, 43.68333333333333], [1.68597972E12, 12.65], [1.68598194E12, 40.13333333333333], [1.68598416E12, 26.4], [1.68598092E12, 39.083333333333336], [1.68598254E12, 34.56666666666667], [1.68598314E12, 34.333333333333336], [1.68598152E12, 32.31666666666667], [1.68598212E12, 31.566666666666666], [1.68598374E12, 28.533333333333335], [1.6859799E12, 41.88333333333333], [1.68598434E12, 28.75], [1.6859805E12, 39.13333333333333], [1.68598272E12, 29.4], [1.6859811E12, 37.88333333333333], [1.68598332E12, 33.53333333333333], [1.68598008E12, 42.15], [1.6859817E12, 34.35], [1.68598392E12, 30.916666666666668], [1.68598068E12, 42.516666666666666], [1.6859823E12, 34.9], [1.6859829E12, 32.5], [1.68598128E12, 34.65], [1.68598188E12, 34.983333333333334], [1.6859835E12, 32.1], [1.6859841E12, 33.71666666666667], [1.68598026E12, 46.95], [1.68598248E12, 31.35], [1.68598086E12, 41.483333333333334], [1.68598308E12, 34.1], [1.68597984E12, 33.65], [1.68598146E12, 33.333333333333336], [1.68598368E12, 29.366666666666667], [1.68598044E12, 41.55], [1.68598206E12, 30.4], [1.68598428E12, 30.033333333333335], [1.68598104E12, 36.166666666666664], [1.68598266E12, 32.766666666666666], [1.68598326E12, 33.166666666666664], [1.68598002E12, 38.11666666666667], [1.68598164E12, 32.516666666666666], [1.68598224E12, 29.35], [1.68598386E12, 29.516666666666666], [1.68598062E12, 37.03333333333333], [1.68598284E12, 34.0], [1.68598122E12, 36.25], [1.68598344E12, 29.5], [1.6859802E12, 30.066666666666666], [1.68598182E12, 32.68333333333333], [1.68598404E12, 26.266666666666666], [1.6859808E12, 39.15], [1.68598242E12, 33.35], [1.68598446E12, 2.433333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68598446E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68597972E12, "maxY": 32.93333333333333, "series": [{"data": [[1.68598302E12, 21.7], [1.68597978E12, 30.183333333333334], [1.6859814E12, 28.283333333333335], [1.685982E12, 27.783333333333335], [1.68598362E12, 22.05], [1.68598422E12, 18.233333333333334], [1.68598038E12, 31.133333333333333], [1.6859826E12, 25.0], [1.68598098E12, 26.983333333333334], [1.6859832E12, 22.883333333333333], [1.68598158E12, 24.616666666666667], [1.6859838E12, 21.8], [1.68598056E12, 29.016666666666666], [1.68597996E12, 27.183333333333334], [1.68598218E12, 22.233333333333334], [1.68598116E12, 26.75], [1.68598278E12, 22.683333333333334], [1.6859844E12, 19.883333333333333], [1.68598176E12, 27.516666666666666], [1.68598338E12, 23.133333333333333], [1.68598398E12, 20.1], [1.68598236E12, 26.033333333333335], [1.68598014E12, 31.416666666666668], [1.68598074E12, 30.15], [1.68598296E12, 23.35], [1.68598134E12, 28.116666666666667], [1.68598356E12, 23.75], [1.68598032E12, 31.833333333333332], [1.68597972E12, 8.266666666666667], [1.68598194E12, 27.883333333333333], [1.68598416E12, 20.633333333333333], [1.68598092E12, 28.783333333333335], [1.68598254E12, 25.633333333333333], [1.68598314E12, 25.25], [1.68598152E12, 24.25], [1.68598212E12, 23.533333333333335], [1.68598374E12, 21.466666666666665], [1.6859799E12, 30.9], [1.68598434E12, 22.183333333333334], [1.6859805E12, 28.833333333333332], [1.68598272E12, 23.216666666666665], [1.6859811E12, 27.133333333333333], [1.68598332E12, 23.866666666666667], [1.68598008E12, 30.066666666666666], [1.6859817E12, 25.416666666666668], [1.68598392E12, 22.75], [1.68598068E12, 31.516666666666666], [1.6859823E12, 25.216666666666665], [1.6859829E12, 23.733333333333334], [1.68598128E12, 25.233333333333334], [1.68598188E12, 25.266666666666666], [1.6859835E12, 23.983333333333334], [1.6859841E12, 23.766666666666666], [1.68598026E12, 32.93333333333333], [1.68598248E12, 22.966666666666665], [1.68598086E12, 29.65], [1.68598308E12, 25.6], [1.68597984E12, 24.916666666666668], [1.68598146E12, 25.183333333333334], [1.68598368E12, 22.35], [1.68598044E12, 29.333333333333332], [1.68598206E12, 22.95], [1.68598428E12, 21.566666666666666], [1.68598104E12, 27.1], [1.68598266E12, 24.1], [1.68598326E12, 24.183333333333334], [1.68598002E12, 27.016666666666666], [1.68598164E12, 24.616666666666667], [1.68598224E12, 21.516666666666666], [1.68598386E12, 22.433333333333334], [1.68598062E12, 27.383333333333333], [1.68598284E12, 23.783333333333335], [1.68598122E12, 27.516666666666666], [1.68598344E12, 22.066666666666666], [1.6859802E12, 23.383333333333333], [1.68598182E12, 24.5], [1.68598404E12, 19.2], [1.6859808E12, 28.5], [1.68598242E12, 24.283333333333335], [1.68598446E12, 2.283333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.68598302E12, 7.8], [1.68597978E12, 11.116666666666667], [1.6859814E12, 10.733333333333333], [1.685982E12, 9.85], [1.68598362E12, 7.683333333333334], [1.68598422E12, 6.383333333333334], [1.68598038E12, 11.333333333333334], [1.6859826E12, 9.216666666666667], [1.68598098E12, 9.733333333333333], [1.6859832E12, 7.4], [1.68598158E12, 9.0], [1.6859838E12, 6.833333333333333], [1.68598056E12, 8.216666666666667], [1.68597996E12, 10.666666666666666], [1.68598218E12, 9.25], [1.68598116E12, 10.383333333333333], [1.68598278E12, 7.933333333333334], [1.6859844E12, 6.066666666666666], [1.68598176E12, 9.483333333333333], [1.68598338E12, 8.666666666666666], [1.68598398E12, 6.716666666666667], [1.68598236E12, 9.85], [1.68598014E12, 11.616666666666667], [1.68598074E12, 11.816666666666666], [1.68598296E12, 8.7], [1.68598134E12, 9.05], [1.68598356E12, 9.15], [1.68598032E12, 11.5], [1.68597972E12, 4.05], [1.68598194E12, 12.25], [1.68598416E12, 6.45], [1.68598092E12, 10.3], [1.68598254E12, 8.933333333333334], [1.68598314E12, 9.083333333333334], [1.68598152E12, 8.066666666666666], [1.68598212E12, 8.033333333333333], [1.68598374E12, 7.066666666666666], [1.6859799E12, 10.633333333333333], [1.68598434E12, 6.766666666666667], [1.6859805E12, 10.283333333333333], [1.68598272E12, 6.183333333333334], [1.6859811E12, 10.75], [1.68598332E12, 9.666666666666666], [1.68598008E12, 11.65], [1.6859817E12, 8.933333333333334], [1.68598392E12, 8.766666666666667], [1.68598068E12, 11.0], [1.6859823E12, 9.683333333333334], [1.6859829E12, 8.766666666666667], [1.68598128E12, 9.416666666666666], [1.68598188E12, 9.7], [1.6859835E12, 8.116666666666667], [1.6859841E12, 9.666666666666666], [1.68598026E12, 13.016666666666667], [1.68598248E12, 8.383333333333333], [1.68598086E12, 11.833333333333334], [1.68598308E12, 8.5], [1.68597984E12, 8.666666666666666], [1.68598146E12, 8.15], [1.68598368E12, 7.016666666666667], [1.68598044E12, 12.216666666666667], [1.68598206E12, 7.45], [1.68598428E12, 8.1], [1.68598104E12, 9.066666666666666], [1.68598266E12, 8.65], [1.68598326E12, 8.983333333333333], [1.68598002E12, 10.466666666666667], [1.68598164E12, 7.9], [1.68598224E12, 7.833333333333333], [1.68598386E12, 7.083333333333333], [1.68598062E12, 9.65], [1.68598284E12, 10.216666666666667], [1.68598122E12, 8.733333333333333], [1.68598344E12, 7.433333333333334], [1.6859802E12, 7.083333333333333], [1.68598182E12, 8.183333333333334], [1.68598404E12, 6.1], [1.6859808E12, 10.65], [1.68598242E12, 9.066666666666666], [1.68598446E12, 0.3333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68598188E12, 0.016666666666666666], [1.68598428E12, 0.016666666666666666], [1.68598266E12, 0.016666666666666666], [1.68598362E12, 0.016666666666666666], [1.6859841E12, 0.016666666666666666], [1.68598074E12, 0.016666666666666666], [1.68598002E12, 0.016666666666666666], [1.6859826E12, 0.016666666666666666], [1.68598434E12, 0.016666666666666666], [1.6859805E12, 0.016666666666666666], [1.68597972E12, 0.016666666666666666]], "isOverall": false, "label": "409", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68598446E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.68597972E12, "maxY": 32.93333333333333, "series": [{"data": [[1.68598302E12, 21.7], [1.68597978E12, 30.183333333333334], [1.6859814E12, 28.283333333333335], [1.685982E12, 27.783333333333335], [1.68598362E12, 22.05], [1.68598422E12, 18.233333333333334], [1.68598038E12, 31.133333333333333], [1.6859826E12, 25.0], [1.68598098E12, 26.983333333333334], [1.6859832E12, 22.883333333333333], [1.68598158E12, 24.616666666666667], [1.6859838E12, 21.8], [1.68598056E12, 29.016666666666666], [1.68597996E12, 27.183333333333334], [1.68598218E12, 22.233333333333334], [1.68598116E12, 26.75], [1.68598278E12, 22.683333333333334], [1.6859844E12, 19.883333333333333], [1.68598176E12, 27.516666666666666], [1.68598338E12, 23.133333333333333], [1.68598398E12, 20.1], [1.68598236E12, 26.033333333333335], [1.68598014E12, 31.416666666666668], [1.68598074E12, 30.15], [1.68598296E12, 23.35], [1.68598134E12, 28.116666666666667], [1.68598356E12, 23.75], [1.68598032E12, 31.833333333333332], [1.68597972E12, 8.266666666666667], [1.68598194E12, 27.883333333333333], [1.68598416E12, 20.633333333333333], [1.68598092E12, 28.783333333333335], [1.68598254E12, 25.633333333333333], [1.68598314E12, 25.25], [1.68598152E12, 24.25], [1.68598212E12, 23.533333333333335], [1.68598374E12, 21.466666666666665], [1.6859799E12, 30.9], [1.68598434E12, 22.183333333333334], [1.6859805E12, 28.833333333333332], [1.68598272E12, 23.216666666666665], [1.6859811E12, 27.133333333333333], [1.68598332E12, 23.866666666666667], [1.68598008E12, 30.066666666666666], [1.6859817E12, 25.416666666666668], [1.68598392E12, 22.75], [1.68598068E12, 31.516666666666666], [1.6859823E12, 25.216666666666665], [1.6859829E12, 23.733333333333334], [1.68598128E12, 25.233333333333334], [1.68598188E12, 25.266666666666666], [1.6859835E12, 23.983333333333334], [1.6859841E12, 23.766666666666666], [1.68598026E12, 32.93333333333333], [1.68598248E12, 22.966666666666665], [1.68598086E12, 29.65], [1.68598308E12, 25.6], [1.68597984E12, 24.916666666666668], [1.68598146E12, 25.183333333333334], [1.68598368E12, 22.35], [1.68598044E12, 29.333333333333332], [1.68598206E12, 22.95], [1.68598428E12, 21.566666666666666], [1.68598104E12, 27.1], [1.68598266E12, 24.1], [1.68598326E12, 24.183333333333334], [1.68598002E12, 27.016666666666666], [1.68598164E12, 24.616666666666667], [1.68598224E12, 21.516666666666666], [1.68598386E12, 22.433333333333334], [1.68598062E12, 27.383333333333333], [1.68598284E12, 23.783333333333335], [1.68598122E12, 27.516666666666666], [1.68598344E12, 22.066666666666666], [1.6859802E12, 23.383333333333333], [1.68598182E12, 24.5], [1.68598404E12, 19.2], [1.6859808E12, 28.5], [1.68598242E12, 24.283333333333335], [1.68598446E12, 2.283333333333333]], "isOverall": false, "label": "create cin-success", "isController": false}, {"data": [[1.68598302E12, 7.8], [1.68597978E12, 11.116666666666667], [1.6859814E12, 10.733333333333333], [1.685982E12, 9.85], [1.68598362E12, 7.7], [1.68598422E12, 6.383333333333334], [1.68598038E12, 11.333333333333334], [1.6859826E12, 9.233333333333333], [1.68598098E12, 9.733333333333333], [1.6859832E12, 7.4], [1.68598158E12, 9.0], [1.6859838E12, 6.833333333333333], [1.68598056E12, 8.216666666666667], [1.68597996E12, 10.666666666666666], [1.68598218E12, 9.25], [1.68598116E12, 10.383333333333333], [1.68598278E12, 7.933333333333334], [1.6859844E12, 6.066666666666666], [1.68598176E12, 9.483333333333333], [1.68598338E12, 8.666666666666666], [1.68598398E12, 6.716666666666667], [1.68598236E12, 9.85], [1.68598014E12, 11.616666666666667], [1.68598074E12, 11.833333333333334], [1.68598296E12, 8.7], [1.68598134E12, 9.05], [1.68598356E12, 9.15], [1.68598032E12, 11.5], [1.68597972E12, 4.066666666666666], [1.68598194E12, 12.25], [1.68598416E12, 6.45], [1.68598092E12, 10.3], [1.68598254E12, 8.933333333333334], [1.68598314E12, 9.083333333333334], [1.68598152E12, 8.066666666666666], [1.68598212E12, 8.033333333333333], [1.68598374E12, 7.066666666666666], [1.6859799E12, 10.633333333333333], [1.68598434E12, 6.783333333333333], [1.6859805E12, 10.3], [1.68598272E12, 6.183333333333334], [1.6859811E12, 10.75], [1.68598332E12, 9.666666666666666], [1.68598008E12, 11.65], [1.6859817E12, 8.933333333333334], [1.68598392E12, 8.766666666666667], [1.68598068E12, 11.0], [1.6859823E12, 9.683333333333334], [1.6859829E12, 8.766666666666667], [1.68598128E12, 9.416666666666666], [1.68598188E12, 9.716666666666667], [1.6859835E12, 8.116666666666667], [1.6859841E12, 9.683333333333334], [1.68598026E12, 13.016666666666667], [1.68598248E12, 8.383333333333333], [1.68598086E12, 11.833333333333334], [1.68598308E12, 8.5], [1.68597984E12, 8.666666666666666], [1.68598146E12, 8.15], [1.68598368E12, 7.016666666666667], [1.68598044E12, 12.216666666666667], [1.68598206E12, 7.45], [1.68598428E12, 8.116666666666667], [1.68598104E12, 9.066666666666666], [1.68598266E12, 8.666666666666666], [1.68598326E12, 8.983333333333333], [1.68598002E12, 10.483333333333333], [1.68598164E12, 7.9], [1.68598224E12, 7.833333333333333], [1.68598386E12, 7.083333333333333], [1.68598062E12, 9.65], [1.68598284E12, 10.216666666666667], [1.68598122E12, 8.733333333333333], [1.68598344E12, 7.433333333333334], [1.6859802E12, 7.083333333333333], [1.68598182E12, 8.183333333333334], [1.68598404E12, 6.1], [1.6859808E12, 10.65], [1.68598242E12, 9.066666666666666], [1.68598446E12, 0.3333333333333333]], "isOverall": false, "label": "create cin-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68598446E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.68597972E12, "maxY": 32.93333333333333, "series": [{"data": [[1.68598302E12, 21.7], [1.68597978E12, 30.183333333333334], [1.6859814E12, 28.283333333333335], [1.685982E12, 27.783333333333335], [1.68598362E12, 22.05], [1.68598422E12, 18.233333333333334], [1.68598038E12, 31.133333333333333], [1.6859826E12, 25.0], [1.68598098E12, 26.983333333333334], [1.6859832E12, 22.883333333333333], [1.68598158E12, 24.616666666666667], [1.6859838E12, 21.8], [1.68598056E12, 29.016666666666666], [1.68597996E12, 27.183333333333334], [1.68598218E12, 22.233333333333334], [1.68598116E12, 26.75], [1.68598278E12, 22.683333333333334], [1.6859844E12, 19.883333333333333], [1.68598176E12, 27.516666666666666], [1.68598338E12, 23.133333333333333], [1.68598398E12, 20.1], [1.68598236E12, 26.033333333333335], [1.68598014E12, 31.416666666666668], [1.68598074E12, 30.15], [1.68598296E12, 23.35], [1.68598134E12, 28.116666666666667], [1.68598356E12, 23.75], [1.68598032E12, 31.833333333333332], [1.68597972E12, 8.266666666666667], [1.68598194E12, 27.883333333333333], [1.68598416E12, 20.633333333333333], [1.68598092E12, 28.783333333333335], [1.68598254E12, 25.633333333333333], [1.68598314E12, 25.25], [1.68598152E12, 24.25], [1.68598212E12, 23.533333333333335], [1.68598374E12, 21.466666666666665], [1.6859799E12, 30.9], [1.68598434E12, 22.183333333333334], [1.6859805E12, 28.833333333333332], [1.68598272E12, 23.216666666666665], [1.6859811E12, 27.133333333333333], [1.68598332E12, 23.866666666666667], [1.68598008E12, 30.066666666666666], [1.6859817E12, 25.416666666666668], [1.68598392E12, 22.75], [1.68598068E12, 31.516666666666666], [1.6859823E12, 25.216666666666665], [1.6859829E12, 23.733333333333334], [1.68598128E12, 25.233333333333334], [1.68598188E12, 25.266666666666666], [1.6859835E12, 23.983333333333334], [1.6859841E12, 23.766666666666666], [1.68598026E12, 32.93333333333333], [1.68598248E12, 22.966666666666665], [1.68598086E12, 29.65], [1.68598308E12, 25.6], [1.68597984E12, 24.916666666666668], [1.68598146E12, 25.183333333333334], [1.68598368E12, 22.35], [1.68598044E12, 29.333333333333332], [1.68598206E12, 22.95], [1.68598428E12, 21.566666666666666], [1.68598104E12, 27.1], [1.68598266E12, 24.1], [1.68598326E12, 24.183333333333334], [1.68598002E12, 27.016666666666666], [1.68598164E12, 24.616666666666667], [1.68598224E12, 21.516666666666666], [1.68598386E12, 22.433333333333334], [1.68598062E12, 27.383333333333333], [1.68598284E12, 23.783333333333335], [1.68598122E12, 27.516666666666666], [1.68598344E12, 22.066666666666666], [1.6859802E12, 23.383333333333333], [1.68598182E12, 24.5], [1.68598404E12, 19.2], [1.6859808E12, 28.5], [1.68598242E12, 24.283333333333335], [1.68598446E12, 2.283333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68598302E12, 7.8], [1.68597978E12, 11.116666666666667], [1.6859814E12, 10.733333333333333], [1.685982E12, 9.85], [1.68598362E12, 7.7], [1.68598422E12, 6.383333333333334], [1.68598038E12, 11.333333333333334], [1.6859826E12, 9.233333333333333], [1.68598098E12, 9.733333333333333], [1.6859832E12, 7.4], [1.68598158E12, 9.0], [1.6859838E12, 6.833333333333333], [1.68598056E12, 8.216666666666667], [1.68597996E12, 10.666666666666666], [1.68598218E12, 9.25], [1.68598116E12, 10.383333333333333], [1.68598278E12, 7.933333333333334], [1.6859844E12, 6.066666666666666], [1.68598176E12, 9.483333333333333], [1.68598338E12, 8.666666666666666], [1.68598398E12, 6.716666666666667], [1.68598236E12, 9.85], [1.68598014E12, 11.616666666666667], [1.68598074E12, 11.833333333333334], [1.68598296E12, 8.7], [1.68598134E12, 9.05], [1.68598356E12, 9.15], [1.68598032E12, 11.5], [1.68597972E12, 4.066666666666666], [1.68598194E12, 12.25], [1.68598416E12, 6.45], [1.68598092E12, 10.3], [1.68598254E12, 8.933333333333334], [1.68598314E12, 9.083333333333334], [1.68598152E12, 8.066666666666666], [1.68598212E12, 8.033333333333333], [1.68598374E12, 7.066666666666666], [1.6859799E12, 10.633333333333333], [1.68598434E12, 6.783333333333333], [1.6859805E12, 10.3], [1.68598272E12, 6.183333333333334], [1.6859811E12, 10.75], [1.68598332E12, 9.666666666666666], [1.68598008E12, 11.65], [1.6859817E12, 8.933333333333334], [1.68598392E12, 8.766666666666667], [1.68598068E12, 11.0], [1.6859823E12, 9.683333333333334], [1.6859829E12, 8.766666666666667], [1.68598128E12, 9.416666666666666], [1.68598188E12, 9.716666666666667], [1.6859835E12, 8.116666666666667], [1.6859841E12, 9.683333333333334], [1.68598026E12, 13.016666666666667], [1.68598248E12, 8.383333333333333], [1.68598086E12, 11.833333333333334], [1.68598308E12, 8.5], [1.68597984E12, 8.666666666666666], [1.68598146E12, 8.15], [1.68598368E12, 7.016666666666667], [1.68598044E12, 12.216666666666667], [1.68598206E12, 7.45], [1.68598428E12, 8.116666666666667], [1.68598104E12, 9.066666666666666], [1.68598266E12, 8.666666666666666], [1.68598326E12, 8.983333333333333], [1.68598002E12, 10.483333333333333], [1.68598164E12, 7.9], [1.68598224E12, 7.833333333333333], [1.68598386E12, 7.083333333333333], [1.68598062E12, 9.65], [1.68598284E12, 10.216666666666667], [1.68598122E12, 8.733333333333333], [1.68598344E12, 7.433333333333334], [1.6859802E12, 7.083333333333333], [1.68598182E12, 8.183333333333334], [1.68598404E12, 6.1], [1.6859808E12, 10.65], [1.68598242E12, 9.066666666666666], [1.68598446E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68598446E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

