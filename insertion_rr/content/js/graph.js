/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 19018.0, "series": [{"data": [[0.0, 6.0], [0.1, 8.0], [0.2, 8.0], [0.3, 9.0], [0.4, 9.0], [0.5, 10.0], [0.6, 10.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 14.0], [2.4, 14.0], [2.5, 14.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 15.0], [3.2, 15.0], [3.3, 15.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 15.0], [4.1, 15.0], [4.2, 15.0], [4.3, 16.0], [4.4, 16.0], [4.5, 16.0], [4.6, 16.0], [4.7, 16.0], [4.8, 16.0], [4.9, 16.0], [5.0, 16.0], [5.1, 16.0], [5.2, 16.0], [5.3, 16.0], [5.4, 16.0], [5.5, 16.0], [5.6, 16.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 17.0], [6.2, 17.0], [6.3, 17.0], [6.4, 17.0], [6.5, 17.0], [6.6, 17.0], [6.7, 17.0], [6.8, 17.0], [6.9, 17.0], [7.0, 17.0], [7.1, 17.0], [7.2, 17.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 18.0], [7.7, 18.0], [7.8, 18.0], [7.9, 18.0], [8.0, 18.0], [8.1, 18.0], [8.2, 18.0], [8.3, 18.0], [8.4, 18.0], [8.5, 18.0], [8.6, 18.0], [8.7, 18.0], [8.8, 18.0], [8.9, 18.0], [9.0, 18.0], [9.1, 18.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 19.0], [9.6, 19.0], [9.7, 19.0], [9.8, 19.0], [9.9, 19.0], [10.0, 19.0], [10.1, 19.0], [10.2, 19.0], [10.3, 19.0], [10.4, 19.0], [10.5, 19.0], [10.6, 19.0], [10.7, 19.0], [10.8, 19.0], [10.9, 19.0], [11.0, 19.0], [11.1, 19.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 20.0], [11.9, 20.0], [12.0, 20.0], [12.1, 20.0], [12.2, 20.0], [12.3, 20.0], [12.4, 20.0], [12.5, 20.0], [12.6, 20.0], [12.7, 20.0], [12.8, 20.0], [12.9, 20.0], [13.0, 20.0], [13.1, 20.0], [13.2, 20.0], [13.3, 20.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 21.0], [15.0, 21.0], [15.1, 21.0], [15.2, 21.0], [15.3, 21.0], [15.4, 21.0], [15.5, 21.0], [15.6, 21.0], [15.7, 21.0], [15.8, 22.0], [15.9, 22.0], [16.0, 22.0], [16.1, 22.0], [16.2, 22.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 22.0], [16.7, 22.0], [16.8, 22.0], [16.9, 22.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 22.0], [17.4, 22.0], [17.5, 22.0], [17.6, 22.0], [17.7, 22.0], [17.8, 22.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 23.0], [18.4, 23.0], [18.5, 23.0], [18.6, 23.0], [18.7, 23.0], [18.8, 23.0], [18.9, 23.0], [19.0, 23.0], [19.1, 23.0], [19.2, 23.0], [19.3, 23.0], [19.4, 23.0], [19.5, 23.0], [19.6, 23.0], [19.7, 23.0], [19.8, 23.0], [19.9, 23.0], [20.0, 23.0], [20.1, 23.0], [20.2, 23.0], [20.3, 23.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 23.0], [20.8, 23.0], [20.9, 24.0], [21.0, 24.0], [21.1, 24.0], [21.2, 24.0], [21.3, 24.0], [21.4, 24.0], [21.5, 24.0], [21.6, 24.0], [21.7, 24.0], [21.8, 24.0], [21.9, 24.0], [22.0, 24.0], [22.1, 24.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 24.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 24.0], [23.3, 24.0], [23.4, 25.0], [23.5, 25.0], [23.6, 25.0], [23.7, 25.0], [23.8, 25.0], [23.9, 25.0], [24.0, 25.0], [24.1, 25.0], [24.2, 25.0], [24.3, 25.0], [24.4, 25.0], [24.5, 25.0], [24.6, 25.0], [24.7, 25.0], [24.8, 25.0], [24.9, 25.0], [25.0, 25.0], [25.1, 25.0], [25.2, 25.0], [25.3, 25.0], [25.4, 25.0], [25.5, 25.0], [25.6, 25.0], [25.7, 25.0], [25.8, 25.0], [25.9, 25.0], [26.0, 26.0], [26.1, 26.0], [26.2, 26.0], [26.3, 26.0], [26.4, 26.0], [26.5, 26.0], [26.6, 26.0], [26.7, 26.0], [26.8, 26.0], [26.9, 26.0], [27.0, 26.0], [27.1, 26.0], [27.2, 26.0], [27.3, 26.0], [27.4, 26.0], [27.5, 26.0], [27.6, 26.0], [27.7, 26.0], [27.8, 26.0], [27.9, 26.0], [28.0, 26.0], [28.1, 26.0], [28.2, 26.0], [28.3, 26.0], [28.4, 26.0], [28.5, 26.0], [28.6, 27.0], [28.7, 27.0], [28.8, 27.0], [28.9, 27.0], [29.0, 27.0], [29.1, 27.0], [29.2, 27.0], [29.3, 27.0], [29.4, 27.0], [29.5, 27.0], [29.6, 27.0], [29.7, 27.0], [29.8, 27.0], [29.9, 27.0], [30.0, 27.0], [30.1, 27.0], [30.2, 27.0], [30.3, 27.0], [30.4, 27.0], [30.5, 27.0], [30.6, 27.0], [30.7, 27.0], [30.8, 27.0], [30.9, 27.0], [31.0, 27.0], [31.1, 28.0], [31.2, 28.0], [31.3, 28.0], [31.4, 28.0], [31.5, 28.0], [31.6, 28.0], [31.7, 28.0], [31.8, 28.0], [31.9, 28.0], [32.0, 28.0], [32.1, 28.0], [32.2, 28.0], [32.3, 28.0], [32.4, 28.0], [32.5, 28.0], [32.6, 28.0], [32.7, 28.0], [32.8, 28.0], [32.9, 28.0], [33.0, 28.0], [33.1, 28.0], [33.2, 28.0], [33.3, 28.0], [33.4, 28.0], [33.5, 28.0], [33.6, 29.0], [33.7, 29.0], [33.8, 29.0], [33.9, 29.0], [34.0, 29.0], [34.1, 29.0], [34.2, 29.0], [34.3, 29.0], [34.4, 29.0], [34.5, 29.0], [34.6, 29.0], [34.7, 29.0], [34.8, 29.0], [34.9, 29.0], [35.0, 29.0], [35.1, 29.0], [35.2, 29.0], [35.3, 29.0], [35.4, 29.0], [35.5, 29.0], [35.6, 29.0], [35.7, 29.0], [35.8, 29.0], [35.9, 30.0], [36.0, 30.0], [36.1, 30.0], [36.2, 30.0], [36.3, 30.0], [36.4, 30.0], [36.5, 30.0], [36.6, 30.0], [36.7, 30.0], [36.8, 30.0], [36.9, 30.0], [37.0, 30.0], [37.1, 30.0], [37.2, 30.0], [37.3, 30.0], [37.4, 30.0], [37.5, 30.0], [37.6, 30.0], [37.7, 30.0], [37.8, 30.0], [37.9, 31.0], [38.0, 31.0], [38.1, 31.0], [38.2, 31.0], [38.3, 31.0], [38.4, 31.0], [38.5, 31.0], [38.6, 31.0], [38.7, 31.0], [38.8, 31.0], [38.9, 31.0], [39.0, 31.0], [39.1, 31.0], [39.2, 31.0], [39.3, 31.0], [39.4, 31.0], [39.5, 31.0], [39.6, 31.0], [39.7, 31.0], [39.8, 32.0], [39.9, 32.0], [40.0, 32.0], [40.1, 32.0], [40.2, 32.0], [40.3, 32.0], [40.4, 32.0], [40.5, 32.0], [40.6, 32.0], [40.7, 32.0], [40.8, 32.0], [40.9, 32.0], [41.0, 32.0], [41.1, 32.0], [41.2, 32.0], [41.3, 32.0], [41.4, 32.0], [41.5, 32.0], [41.6, 33.0], [41.7, 33.0], [41.8, 33.0], [41.9, 33.0], [42.0, 33.0], [42.1, 33.0], [42.2, 33.0], [42.3, 33.0], [42.4, 33.0], [42.5, 33.0], [42.6, 33.0], [42.7, 33.0], [42.8, 33.0], [42.9, 33.0], [43.0, 33.0], [43.1, 34.0], [43.2, 34.0], [43.3, 34.0], [43.4, 34.0], [43.5, 34.0], [43.6, 34.0], [43.7, 34.0], [43.8, 34.0], [43.9, 34.0], [44.0, 34.0], [44.1, 34.0], [44.2, 34.0], [44.3, 34.0], [44.4, 35.0], [44.5, 35.0], [44.6, 35.0], [44.7, 35.0], [44.8, 35.0], [44.9, 35.0], [45.0, 35.0], [45.1, 35.0], [45.2, 35.0], [45.3, 35.0], [45.4, 35.0], [45.5, 36.0], [45.6, 36.0], [45.7, 36.0], [45.8, 36.0], [45.9, 36.0], [46.0, 36.0], [46.1, 36.0], [46.2, 36.0], [46.3, 36.0], [46.4, 37.0], [46.5, 37.0], [46.6, 37.0], [46.7, 37.0], [46.8, 37.0], [46.9, 37.0], [47.0, 37.0], [47.1, 37.0], [47.2, 38.0], [47.3, 38.0], [47.4, 38.0], [47.5, 38.0], [47.6, 38.0], [47.7, 38.0], [47.8, 38.0], [47.9, 39.0], [48.0, 39.0], [48.1, 39.0], [48.2, 39.0], [48.3, 39.0], [48.4, 39.0], [48.5, 39.0], [48.6, 40.0], [48.7, 40.0], [48.8, 40.0], [48.9, 40.0], [49.0, 40.0], [49.1, 40.0], [49.2, 40.0], [49.3, 41.0], [49.4, 41.0], [49.5, 41.0], [49.6, 41.0], [49.7, 41.0], [49.8, 41.0], [49.9, 41.0], [50.0, 42.0], [50.1, 42.0], [50.2, 42.0], [50.3, 42.0], [50.4, 42.0], [50.5, 42.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 44.0], [51.4, 44.0], [51.5, 44.0], [51.6, 44.0], [51.7, 44.0], [51.8, 44.0], [51.9, 44.0], [52.0, 45.0], [52.1, 45.0], [52.2, 45.0], [52.3, 45.0], [52.4, 45.0], [52.5, 45.0], [52.6, 46.0], [52.7, 46.0], [52.8, 46.0], [52.9, 46.0], [53.0, 46.0], [53.1, 46.0], [53.2, 47.0], [53.3, 47.0], [53.4, 47.0], [53.5, 47.0], [53.6, 47.0], [53.7, 47.0], [53.8, 48.0], [53.9, 48.0], [54.0, 48.0], [54.1, 48.0], [54.2, 48.0], [54.3, 49.0], [54.4, 49.0], [54.5, 49.0], [54.6, 49.0], [54.7, 49.0], [54.8, 49.0], [54.9, 50.0], [55.0, 50.0], [55.1, 50.0], [55.2, 50.0], [55.3, 50.0], [55.4, 50.0], [55.5, 51.0], [55.6, 51.0], [55.7, 51.0], [55.8, 51.0], [55.9, 51.0], [56.0, 52.0], [56.1, 52.0], [56.2, 52.0], [56.3, 52.0], [56.4, 52.0], [56.5, 52.0], [56.6, 53.0], [56.7, 53.0], [56.8, 53.0], [56.9, 53.0], [57.0, 53.0], [57.1, 53.0], [57.2, 54.0], [57.3, 54.0], [57.4, 54.0], [57.5, 54.0], [57.6, 54.0], [57.7, 55.0], [57.8, 55.0], [57.9, 55.0], [58.0, 55.0], [58.1, 55.0], [58.2, 56.0], [58.3, 56.0], [58.4, 56.0], [58.5, 56.0], [58.6, 56.0], [58.7, 57.0], [58.8, 57.0], [58.9, 57.0], [59.0, 57.0], [59.1, 57.0], [59.2, 58.0], [59.3, 58.0], [59.4, 58.0], [59.5, 58.0], [59.6, 58.0], [59.7, 58.0], [59.8, 59.0], [59.9, 59.0], [60.0, 59.0], [60.1, 59.0], [60.2, 59.0], [60.3, 60.0], [60.4, 60.0], [60.5, 60.0], [60.6, 60.0], [60.7, 60.0], [60.8, 61.0], [60.9, 61.0], [61.0, 61.0], [61.1, 61.0], [61.2, 62.0], [61.3, 62.0], [61.4, 62.0], [61.5, 62.0], [61.6, 62.0], [61.7, 63.0], [61.8, 63.0], [61.9, 63.0], [62.0, 63.0], [62.1, 64.0], [62.2, 64.0], [62.3, 64.0], [62.4, 64.0], [62.5, 65.0], [62.6, 65.0], [62.7, 65.0], [62.8, 65.0], [62.9, 66.0], [63.0, 66.0], [63.1, 66.0], [63.2, 66.0], [63.3, 67.0], [63.4, 67.0], [63.5, 67.0], [63.6, 67.0], [63.7, 68.0], [63.8, 68.0], [63.9, 68.0], [64.0, 68.0], [64.1, 69.0], [64.2, 69.0], [64.3, 69.0], [64.4, 70.0], [64.5, 70.0], [64.6, 70.0], [64.7, 71.0], [64.8, 71.0], [64.9, 72.0], [65.0, 72.0], [65.1, 73.0], [65.2, 73.0], [65.3, 74.0], [65.4, 74.0], [65.5, 75.0], [65.6, 76.0], [65.7, 76.0], [65.8, 77.0], [65.9, 78.0], [66.0, 81.0], [66.1, 84.0], [66.2, 89.0], [66.3, 96.0], [66.4, 104.0], [66.5, 115.0], [66.6, 131.0], [66.7, 164.0], [66.8, 221.0], [66.9, 280.0], [67.0, 337.0], [67.1, 379.0], [67.2, 413.0], [67.3, 449.0], [67.4, 482.0], [67.5, 510.0], [67.6, 539.0], [67.7, 568.0], [67.8, 599.0], [67.9, 627.0], [68.0, 660.0], [68.1, 688.0], [68.2, 714.0], [68.3, 744.0], [68.4, 777.0], [68.5, 812.0], [68.6, 851.0], [68.7, 887.0], [68.8, 921.0], [68.9, 954.0], [69.0, 985.0], [69.1, 1013.0], [69.2, 1038.0], [69.3, 1065.0], [69.4, 1087.0], [69.5, 1111.0], [69.6, 1131.0], [69.7, 1155.0], [69.8, 1177.0], [69.9, 1201.0], [70.0, 1226.0], [70.1, 1251.0], [70.2, 1276.0], [70.3, 1303.0], [70.4, 1330.0], [70.5, 1356.0], [70.6, 1385.0], [70.7, 1412.0], [70.8, 1441.0], [70.9, 1472.0], [71.0, 1506.0], [71.1, 1540.0], [71.2, 1567.0], [71.3, 1594.0], [71.4, 1623.0], [71.5, 1651.0], [71.6, 1676.0], [71.7, 1704.0], [71.8, 1728.0], [71.9, 1752.0], [72.0, 1778.0], [72.1, 1803.0], [72.2, 1829.0], [72.3, 1852.0], [72.4, 1877.0], [72.5, 1903.0], [72.6, 1929.0], [72.7, 1957.0], [72.8, 1984.0], [72.9, 2009.0], [73.0, 2035.0], [73.1, 2062.0], [73.2, 2089.0], [73.3, 2115.0], [73.4, 2139.0], [73.5, 2164.0], [73.6, 2194.0], [73.7, 2219.0], [73.8, 2254.0], [73.9, 2280.0], [74.0, 2308.0], [74.1, 2335.0], [74.2, 2365.0], [74.3, 2394.0], [74.4, 2424.0], [74.5, 2454.0], [74.6, 2483.0], [74.7, 2513.0], [74.8, 2542.0], [74.9, 2571.0], [75.0, 2598.0], [75.1, 2626.0], [75.2, 2652.0], [75.3, 2678.0], [75.4, 2705.0], [75.5, 2732.0], [75.6, 2756.0], [75.7, 2785.0], [75.8, 2813.0], [75.9, 2842.0], [76.0, 2873.0], [76.1, 2904.0], [76.2, 2940.0], [76.3, 2968.0], [76.4, 3002.0], [76.5, 3041.0], [76.6, 3079.0], [76.7, 3117.0], [76.8, 3152.0], [76.9, 3185.0], [77.0, 3219.0], [77.1, 3251.0], [77.2, 3283.0], [77.3, 3317.0], [77.4, 3348.0], [77.5, 3382.0], [77.6, 3416.0], [77.7, 3447.0], [77.8, 3480.0], [77.9, 3517.0], [78.0, 3555.0], [78.1, 3595.0], [78.2, 3636.0], [78.3, 3677.0], [78.4, 3721.0], [78.5, 3769.0], [78.6, 3809.0], [78.7, 3853.0], [78.8, 3898.0], [78.9, 3937.0], [79.0, 3979.0], [79.1, 4018.0], [79.2, 4058.0], [79.3, 4099.0], [79.4, 4143.0], [79.5, 4183.0], [79.6, 4225.0], [79.7, 4268.0], [79.8, 4305.0], [79.9, 4345.0], [80.0, 4385.0], [80.1, 4422.0], [80.2, 4460.0], [80.3, 4500.0], [80.4, 4537.0], [80.5, 4578.0], [80.6, 4616.0], [80.7, 4651.0], [80.8, 4687.0], [80.9, 4721.0], [81.0, 4752.0], [81.1, 4787.0], [81.2, 4817.0], [81.3, 4849.0], [81.4, 4878.0], [81.5, 4906.0], [81.6, 4936.0], [81.7, 4969.0], [81.8, 4997.0], [81.9, 5027.0], [82.0, 5059.0], [82.1, 5086.0], [82.2, 5116.0], [82.3, 5140.0], [82.4, 5170.0], [82.5, 5196.0], [82.6, 5222.0], [82.7, 5246.0], [82.8, 5270.0], [82.9, 5295.0], [83.0, 5320.0], [83.1, 5343.0], [83.2, 5368.0], [83.3, 5389.0], [83.4, 5412.0], [83.5, 5437.0], [83.6, 5461.0], [83.7, 5486.0], [83.8, 5506.0], [83.9, 5525.0], [84.0, 5547.0], [84.1, 5569.0], [84.2, 5590.0], [84.3, 5610.0], [84.4, 5634.0], [84.5, 5655.0], [84.6, 5675.0], [84.7, 5693.0], [84.8, 5711.0], [84.9, 5730.0], [85.0, 5750.0], [85.1, 5770.0], [85.2, 5791.0], [85.3, 5811.0], [85.4, 5830.0], [85.5, 5849.0], [85.6, 5869.0], [85.7, 5888.0], [85.8, 5907.0], [85.9, 5928.0], [86.0, 5947.0], [86.1, 5963.0], [86.2, 5983.0], [86.3, 6002.0], [86.4, 6019.0], [86.5, 6037.0], [86.6, 6055.0], [86.7, 6075.0], [86.8, 6092.0], [86.9, 6110.0], [87.0, 6128.0], [87.1, 6147.0], [87.2, 6164.0], [87.3, 6183.0], [87.4, 6201.0], [87.5, 6220.0], [87.6, 6238.0], [87.7, 6255.0], [87.8, 6272.0], [87.9, 6288.0], [88.0, 6307.0], [88.1, 6321.0], [88.2, 6339.0], [88.3, 6354.0], [88.4, 6371.0], [88.5, 6388.0], [88.6, 6405.0], [88.7, 6422.0], [88.8, 6438.0], [88.9, 6456.0], [89.0, 6473.0], [89.1, 6491.0], [89.2, 6508.0], [89.3, 6525.0], [89.4, 6544.0], [89.5, 6559.0], [89.6, 6577.0], [89.7, 6593.0], [89.8, 6611.0], [89.9, 6628.0], [90.0, 6648.0], [90.1, 6665.0], [90.2, 6684.0], [90.3, 6701.0], [90.4, 6721.0], [90.5, 6739.0], [90.6, 6759.0], [90.7, 6777.0], [90.8, 6794.0], [90.9, 6812.0], [91.0, 6830.0], [91.1, 6848.0], [91.2, 6868.0], [91.3, 6885.0], [91.4, 6904.0], [91.5, 6922.0], [91.6, 6940.0], [91.7, 6957.0], [91.8, 6976.0], [91.9, 6997.0], [92.0, 7017.0], [92.1, 7035.0], [92.2, 7055.0], [92.3, 7073.0], [92.4, 7092.0], [92.5, 7112.0], [92.6, 7132.0], [92.7, 7152.0], [92.8, 7171.0], [92.9, 7188.0], [93.0, 7206.0], [93.1, 7226.0], [93.2, 7246.0], [93.3, 7265.0], [93.4, 7287.0], [93.5, 7310.0], [93.6, 7330.0], [93.7, 7356.0], [93.8, 7379.0], [93.9, 7401.0], [94.0, 7425.0], [94.1, 7448.0], [94.2, 7470.0], [94.3, 7489.0], [94.4, 7511.0], [94.5, 7535.0], [94.6, 7560.0], [94.7, 7585.0], [94.8, 7609.0], [94.9, 7635.0], [95.0, 7661.0], [95.1, 7688.0], [95.2, 7715.0], [95.3, 7739.0], [95.4, 7763.0], [95.5, 7791.0], [95.6, 7817.0], [95.7, 7841.0], [95.8, 7871.0], [95.9, 7896.0], [96.0, 7924.0], [96.1, 7955.0], [96.2, 7984.0], [96.3, 8015.0], [96.4, 8043.0], [96.5, 8076.0], [96.6, 8106.0], [96.7, 8141.0], [96.8, 8177.0], [96.9, 8219.0], [97.0, 8259.0], [97.1, 8296.0], [97.2, 8336.0], [97.3, 8376.0], [97.4, 8419.0], [97.5, 8458.0], [97.6, 8500.0], [97.7, 8547.0], [97.8, 8592.0], [97.9, 8638.0], [98.0, 8685.0], [98.1, 8736.0], [98.2, 8785.0], [98.3, 8842.0], [98.4, 8904.0], [98.5, 8984.0], [98.6, 9046.0], [98.7, 9116.0], [98.8, 9196.0], [98.9, 9279.0], [99.0, 9376.0], [99.1, 9477.0], [99.2, 9583.0], [99.3, 9701.0], [99.4, 9831.0], [99.5, 9989.0], [99.6, 10191.0], [99.7, 10425.0], [99.8, 10795.0], [99.9, 11501.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 160884.0, "series": [{"data": [[0.0, 160884.0], [100.0, 1006.0], [200.0, 382.0], [300.0, 585.0], [400.0, 730.0], [500.0, 818.0], [600.0, 833.0], [700.0, 779.0], [800.0, 646.0], [900.0, 771.0], [1000.0, 974.0], [1100.0, 1071.0], [1200.0, 949.0], [1300.0, 887.0], [1400.0, 791.0], [1500.0, 833.0], [1600.0, 880.0], [1700.0, 963.0], [1800.0, 980.0], [1900.0, 904.0], [2000.0, 911.0], [2100.0, 941.0], [2300.0, 847.0], [2200.0, 840.0], [2400.0, 827.0], [2500.0, 842.0], [2600.0, 918.0], [2700.0, 872.0], [2800.0, 825.0], [2900.0, 746.0], [3000.0, 633.0], [3100.0, 689.0], [3200.0, 745.0], [3300.0, 731.0], [3400.0, 750.0], [3500.0, 616.0], [3700.0, 551.0], [3600.0, 584.0], [3800.0, 548.0], [3900.0, 608.0], [4000.0, 598.0], [4200.0, 607.0], [4100.0, 569.0], [4300.0, 622.0], [4400.0, 623.0], [4500.0, 614.0], [4600.0, 700.0], [4700.0, 710.0], [4800.0, 834.0], [4900.0, 796.0], [5100.0, 905.0], [5000.0, 812.0], [5300.0, 1028.0], [5200.0, 983.0], [5600.0, 1190.0], [5500.0, 1160.0], [5400.0, 1032.0], [5700.0, 1238.0], [5800.0, 1242.0], [6000.0, 1331.0], [5900.0, 1280.0], [6100.0, 1349.0], [6200.0, 1376.0], [6300.0, 1460.0], [6400.0, 1412.0], [6500.0, 1434.0], [6600.0, 1344.0], [6700.0, 1300.0], [6800.0, 1316.0], [6900.0, 1312.0], [7100.0, 1270.0], [7000.0, 1276.0], [7300.0, 1054.0], [7400.0, 1103.0], [7200.0, 1202.0], [7600.0, 925.0], [7500.0, 992.0], [7700.0, 962.0], [7800.0, 911.0], [7900.0, 829.0], [8000.0, 804.0], [8100.0, 654.0], [8400.0, 602.0], [8200.0, 620.0], [8600.0, 498.0], [8700.0, 475.0], [8300.0, 586.0], [8500.0, 532.0], [8900.0, 328.0], [8800.0, 420.0], [9000.0, 358.0], [9100.0, 317.0], [9200.0, 284.0], [9600.0, 208.0], [9700.0, 183.0], [9400.0, 223.0], [9300.0, 249.0], [9500.0, 227.0], [9800.0, 174.0], [10000.0, 127.0], [9900.0, 144.0], [10100.0, 114.0], [10200.0, 126.0], [10300.0, 83.0], [10400.0, 81.0], [10700.0, 65.0], [10500.0, 68.0], [10600.0, 57.0], [11100.0, 19.0], [11000.0, 37.0], [10900.0, 48.0], [10800.0, 51.0], [11200.0, 27.0], [11400.0, 28.0], [11600.0, 18.0], [11500.0, 25.0], [11300.0, 27.0], [11700.0, 27.0], [12000.0, 12.0], [11800.0, 23.0], [12200.0, 14.0], [12100.0, 17.0], [11900.0, 13.0], [12300.0, 7.0], [12600.0, 6.0], [12500.0, 9.0], [12700.0, 6.0], [12400.0, 1.0], [12900.0, 9.0], [13100.0, 3.0], [13000.0, 6.0], [12800.0, 4.0], [13200.0, 4.0], [13300.0, 2.0], [13500.0, 6.0], [13600.0, 4.0], [13400.0, 4.0], [13700.0, 2.0], [13800.0, 2.0], [14000.0, 3.0], [14100.0, 4.0], [14200.0, 2.0], [13900.0, 2.0], [14300.0, 1.0], [14700.0, 1.0], [14600.0, 3.0], [15000.0, 1.0], [14900.0, 1.0], [19000.0, 1.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3731.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 149047.0, "series": [{"data": [[0.0, 149047.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3731.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 53524.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 36176.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.748466257668708, "minX": 1.6866708E12, "maxY": 100.0, "series": [{"data": [[1.68667296E12, 100.0], [1.68667458E12, 100.0], [1.68667116E12, 68.63036393264507], [1.68667236E12, 100.0], [1.68667176E12, 100.0], [1.68667398E12, 100.0], [1.68667338E12, 100.0], [1.68667278E12, 100.0], [1.686675E12, 89.16369160653264], [1.6866744E12, 100.0], [1.68667098E12, 44.99521422060161], [1.6866738E12, 100.0], [1.68667542E12, 49.9486740804107], [1.6866732E12, 100.0], [1.68667482E12, 100.0], [1.68667158E12, 100.0], [1.6866726E12, 100.0], [1.68667218E12, 100.0], [1.68667422E12, 100.0], [1.68667392E12, 100.0], [1.68667554E12, 8.748466257668708], [1.68667212E12, 100.0], [1.68667494E12, 100.0], [1.68667332E12, 100.0], [1.6866711E12, 23.810422535211174], [1.68667272E12, 100.0], [1.68667434E12, 100.0], [1.6866717E12, 100.0], [1.68667374E12, 100.0], [1.68667134E12, 47.41967363824394], [1.68667314E12, 100.0], [1.68667536E12, 44.625266146202954], [1.68667194E12, 100.0], [1.68667254E12, 100.0], [1.68667476E12, 100.0], [1.68667416E12, 100.0], [1.68667092E12, 17.445655764783606], [1.68667518E12, 72.47700038654799], [1.68667356E12, 100.0], [1.68667152E12, 100.0], [1.68667086E12, 24.50336700336694], [1.68667266E12, 100.0], [1.68667488E12, 100.0], [1.68667146E12, 100.0], [1.68667428E12, 100.0], [1.6866753E12, 17.920535340861566], [1.68667206E12, 100.0], [1.68667368E12, 100.0], [1.68667308E12, 100.0], [1.6866747E12, 100.0], [1.68667104E12, 38.64335060449051], [1.68667248E12, 100.0], [1.6866741E12, 100.0], [1.68667128E12, 21.73653250774001], [1.6866735E12, 100.0], [1.6866729E12, 100.0], [1.68667512E12, 32.40008257638317], [1.68667188E12, 100.0], [1.6866723E12, 100.0], [1.68667452E12, 100.0], [1.68667182E12, 100.0], [1.68667362E12, 100.0], [1.6866708E12, 12.154882154882154], [1.68667302E12, 100.0], [1.68667524E12, 61.41936957514862], [1.68667242E12, 100.0], [1.68667464E12, 100.0], [1.6866714E12, 95.28154552823567], [1.68667404E12, 100.0], [1.686672E12, 100.0], [1.68667506E12, 34.90725633319025], [1.68667344E12, 100.0], [1.68667164E12, 100.0], [1.68667284E12, 100.0], [1.68667446E12, 100.0], [1.68667224E12, 100.0], [1.68667386E12, 100.0], [1.68667122E12, 67.90095181439587], [1.68667326E12, 100.0], [1.68667548E12, 25.496524761077342]], "isOverall": false, "label": "OM2M-Insertion Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68667554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 194.1506172839508, "minX": 1.0, "maxY": 2552.4144144144143, "series": [{"data": [[2.0, 206.1282051282052], [3.0, 215.31073446327676], [4.0, 216.35840707964604], [5.0, 199.37065637065643], [6.0, 201.944297082228], [7.0, 194.1506172839508], [8.0, 197.85294117647067], [9.0, 215.08905380333968], [10.0, 238.73304157549228], [11.0, 215.85497470489025], [12.0, 225.93108974358964], [13.0, 237.31748251748243], [14.0, 266.3798977853493], [15.0, 282.6337579617833], [16.0, 261.18441971383146], [17.0, 287.36807387862785], [18.0, 315.9511854951185], [19.0, 333.88305847076515], [20.0, 341.79066666666705], [21.0, 360.3707713125842], [22.0, 314.33077905491683], [23.0, 405.6707317073171], [24.0, 397.43846153846135], [25.0, 436.6314523885851], [26.0, 484.78414839797637], [27.0, 485.1899313501144], [28.0, 526.4486404833833], [29.0, 421.8034321372851], [30.0, 520.1886477462434], [31.0, 533.5912240184759], [32.0, 624.0487288135593], [33.0, 512.058988764045], [34.0, 555.2543554006969], [35.0, 625.8902877697844], [36.0, 635.6882933709448], [37.0, 629.1984435797672], [38.0, 630.7699346405227], [39.0, 615.3927038626612], [40.0, 820.869230769231], [41.0, 737.5008375209387], [42.0, 743.9916666666662], [43.0, 901.7310344827588], [44.0, 823.8208955223885], [45.0, 853.6385281385288], [46.0, 776.7578947368416], [47.0, 846.5322834645671], [48.0, 934.7144846796649], [49.0, 866.521164021164], [50.0, 967.3971590085536], [51.0, 1042.558317399618], [52.0, 1177.1752577319585], [53.0, 1180.3625000000018], [54.0, 1288.9817073170734], [55.0, 1113.9189944134073], [56.0, 1078.1942446043163], [57.0, 1115.4745762711868], [58.0, 1141.4335664335667], [59.0, 1157.712918660287], [60.0, 1254.8328611897998], [61.0, 1209.0720720720717], [62.0, 1022.0561797752812], [63.0, 1292.2362637362642], [64.0, 1151.3536977491954], [65.0, 1132.6132596685081], [66.0, 1319.28388746803], [67.0, 1327.499999999999], [68.0, 1320.440340909091], [69.0, 1371.7391304347823], [70.0, 1197.457142857143], [71.0, 1590.759036144578], [72.0, 1367.6196078431362], [73.0, 1030.8058608058607], [74.0, 1348.6009174311919], [75.0, 1467.174165901437], [76.0, 1214.4177215189875], [77.0, 1319.3548387096785], [78.0, 1089.9999999999995], [79.0, 1380.2428571428568], [80.0, 1173.181818181818], [81.0, 1303.5074626865664], [82.0, 1534.5654450261788], [83.0, 1825.686666666667], [84.0, 1465.1346153846152], [85.0, 1490.5277777777783], [86.0, 1527.8111111111107], [87.0, 1654.7083333333337], [88.0, 1759.6879999999999], [89.0, 1523.5434782608695], [90.0, 1445.8533333333332], [91.0, 1897.8089887640451], [92.0, 1805.1063829787238], [93.0, 2552.4144144144143], [94.0, 2145.4871794871797], [95.0, 1701.4117647058824], [96.0, 2167.940909090908], [97.0, 1642.2685185185176], [98.0, 1630.2499999999995], [99.0, 1413.7735849056608], [100.0, 1936.7063525339333], [1.0, 248.56249999999997]], "isOverall": false, "label": "create cin", "isController": false}, {"data": [[86.66472009831797, 1674.28403813953]], "isOverall": false, "label": "create cin-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2238.5333333333333, "minX": 1.6866708E12, "maxY": 44849.51666666667, "series": [{"data": [[1.68667296E12, 32905.166666666664], [1.68667458E12, 28323.85], [1.68667116E12, 38409.88333333333], [1.68667236E12, 34554.53333333333], [1.68667176E12, 38703.48333333333], [1.68667398E12, 28062.75], [1.68667338E12, 28664.666666666668], [1.68667278E12, 34217.36666666667], [1.686675E12, 27779.333333333332], [1.6866744E12, 25811.566666666666], [1.68667098E12, 44713.88333333333], [1.6866738E12, 32076.8], [1.68667542E12, 24976.666666666668], [1.6866732E12, 29435.316666666666], [1.68667482E12, 29956.4], [1.68667158E12, 36123.6], [1.6866726E12, 35124.433333333334], [1.68667218E12, 35079.63333333333], [1.68667422E12, 29428.483333333334], [1.68667392E12, 31981.416666666668], [1.68667554E12, 3520.483333333333], [1.68667212E12, 36974.53333333333], [1.68667494E12, 27037.6], [1.68667332E12, 30293.4], [1.6866711E12, 36701.46666666667], [1.68667272E12, 34452.083333333336], [1.68667434E12, 24874.95], [1.6866717E12, 40096.416666666664], [1.68667374E12, 30924.75], [1.68667134E12, 44849.51666666667], [1.68667314E12, 31771.6], [1.68667536E12, 29135.616666666665], [1.68667194E12, 37936.183333333334], [1.68667254E12, 32904.71666666667], [1.68667476E12, 31615.4], [1.68667416E12, 33767.46666666667], [1.68667092E12, 31808.2], [1.68667518E12, 27258.816666666666], [1.68667356E12, 30219.116666666665], [1.68667152E12, 36657.8], [1.68667086E12, 42053.933333333334], [1.68667266E12, 34202.5], [1.68667488E12, 26840.45], [1.68667146E12, 36402.5], [1.68667428E12, 25322.083333333332], [1.6866753E12, 24719.866666666665], [1.68667206E12, 36209.7], [1.68667368E12, 31080.483333333334], [1.68667308E12, 32288.25], [1.6866747E12, 28987.3], [1.68667104E12, 36553.38333333333], [1.68667248E12, 33078.78333333333], [1.6866741E12, 29715.75], [1.68667128E12, 33775.3], [1.6866735E12, 30728.1], [1.6866729E12, 32271.7], [1.68667512E12, 25513.3], [1.68667188E12, 38995.7], [1.6866723E12, 34878.2], [1.68667452E12, 31346.5], [1.68667182E12, 36880.183333333334], [1.68667362E12, 33679.15], [1.6866708E12, 5906.066666666667], [1.68667302E12, 36781.63333333333], [1.68667524E12, 23202.466666666667], [1.68667242E12, 38586.333333333336], [1.68667464E12, 28907.383333333335], [1.6866714E12, 38647.88333333333], [1.68667404E12, 27707.5], [1.686672E12, 33205.15], [1.68667506E12, 24840.233333333334], [1.68667344E12, 31402.7], [1.68667164E12, 37824.65], [1.68667284E12, 30770.283333333333], [1.68667446E12, 30583.316666666666], [1.68667224E12, 35863.183333333334], [1.68667386E12, 29556.45], [1.68667122E12, 35346.2], [1.68667326E12, 28891.816666666666], [1.68667548E12, 24393.483333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68667296E12, 21478.933333333334], [1.68667458E12, 18368.333333333332], [1.68667116E12, 25283.066666666666], [1.68667236E12, 22735.533333333333], [1.68667176E12, 25482.2], [1.68667398E12, 18093.666666666668], [1.68667338E12, 18718.533333333333], [1.68667278E12, 22309.8], [1.686675E12, 18079.933333333334], [1.6866744E12, 16940.066666666666], [1.68667098E12, 30130.933333333334], [1.6866738E12, 21300.4], [1.68667542E12, 16054.266666666666], [1.6866732E12, 19158.0], [1.68667482E12, 19563.133333333335], [1.68667158E12, 23353.533333333333], [1.6866726E12, 23085.733333333334], [1.68667218E12, 22790.466666666667], [1.68667422E12, 19391.466666666667], [1.68667392E12, 21314.133333333335], [1.68667554E12, 2238.5333333333333], [1.68667212E12, 24548.333333333332], [1.68667494E12, 17640.466666666667], [1.68667332E12, 19556.266666666666], [1.6866711E12, 24376.666666666668], [1.68667272E12, 22742.4], [1.68667434E12, 16026.8], [1.6866717E12, 26670.133333333335], [1.68667374E12, 20236.066666666666], [1.68667134E12, 29876.866666666665], [1.68667314E12, 20716.733333333334], [1.68667536E12, 19350.266666666666], [1.68667194E12, 25214.4], [1.68667254E12, 21410.266666666666], [1.68667476E12, 21101.266666666666], [1.68667416E12, 22275.466666666667], [1.68667092E12, 20785.4], [1.68667518E12, 17764.066666666666], [1.68667356E12, 19583.733333333334], [1.68667152E12, 23909.733333333334], [1.68667086E12, 28551.6], [1.68667266E12, 22529.533333333333], [1.68667488E12, 17331.466666666667], [1.68667146E12, 23738.066666666666], [1.68667428E12, 16191.6], [1.6866753E12, 16418.2], [1.68667206E12, 23813.6], [1.68667368E12, 20387.133333333335], [1.68667308E12, 20984.533333333333], [1.6866747E12, 19370.866666666665], [1.68667104E12, 23854.8], [1.68667248E12, 21630.0], [1.6866741E12, 19721.066666666666], [1.68667128E12, 22179.333333333332], [1.6866735E12, 20064.4], [1.6866729E12, 20977.666666666668], [1.68667512E12, 16631.066666666666], [1.68667188E12, 25715.666666666668], [1.6866723E12, 22824.8], [1.68667452E12, 20771.666666666668], [1.68667182E12, 23944.066666666666], [1.68667362E12, 22296.066666666666], [1.6866708E12, 4078.8], [1.68667302E12, 24225.6], [1.68667524E12, 15031.133333333333], [1.68667242E12, 25592.066666666666], [1.68667464E12, 19068.733333333334], [1.6866714E12, 25413.533333333333], [1.68667404E12, 18162.333333333332], [1.686672E12, 22042.0], [1.68667506E12, 15992.466666666667], [1.68667344E12, 20407.733333333334], [1.68667164E12, 24987.8], [1.68667284E12, 20016.333333333332], [1.68667446E12, 20483.266666666666], [1.68667224E12, 23429.066666666666], [1.68667386E12, 19226.666666666668], [1.68667122E12, 23085.733333333334], [1.68667326E12, 18382.066666666666], [1.68667548E12, 15807.066666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68667554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 240.9949494949494, "minX": 1.6866708E12, "maxY": 2521.308736217134, "series": [{"data": [[1.68667296E12, 1914.4888107416873], [1.68667458E12, 2209.2314018691573], [1.68667116E12, 1095.0214557305842], [1.68667236E12, 1811.2935668982175], [1.68667176E12, 1625.3074642953375], [1.68667398E12, 2279.524478178369], [1.68667338E12, 2202.756419662501], [1.68667278E12, 1841.3342566943663], [1.686675E12, 2145.7071781238105], [1.6866744E12, 2479.2732063234675], [1.68667098E12, 611.8849134001837], [1.6866738E12, 1956.9574468085088], [1.68667542E12, 1307.6886227544933], [1.6866732E12, 2134.892831541217], [1.68667482E12, 2081.825903825901], [1.68667158E12, 1746.0599823581256], [1.6866726E12, 1802.917013682329], [1.68667218E12, 1815.7556492919564], [1.68667422E12, 2127.5913597733784], [1.68667392E12, 1928.2097293814415], [1.68667554E12, 294.47852760736197], [1.68667212E12, 1684.6990209790195], [1.68667494E12, 2315.58466329311], [1.68667332E12, 2104.2296348314685], [1.6866711E12, 328.8250704225353], [1.68667272E12, 1798.9622584541062], [1.68667434E12, 2516.197086546696], [1.6866717E12, 1533.1351699279098], [1.68667374E12, 2023.431964709873], [1.68667134E12, 617.1314640312576], [1.68667314E12, 1949.9433211799821], [1.68667536E12, 941.9946770759382], [1.68667194E12, 1664.6138344226613], [1.68667254E12, 1932.9756254008985], [1.68667476E12, 1976.1848356654743], [1.68667416E12, 1878.3196670776813], [1.68667092E12, 291.65939874463123], [1.68667518E12, 1664.6776188635486], [1.68667356E12, 2124.9221598878025], [1.68667152E12, 1746.484491671451], [1.68667086E12, 350.59283309283336], [1.68667266E12, 1836.0719292898505], [1.68667488E12, 2404.036846275753], [1.68667146E12, 1712.831067399479], [1.68667428E12, 2521.308736217134], [1.6866753E12, 396.32455039732395], [1.68667206E12, 1726.1340830449822], [1.68667368E12, 2023.721455035366], [1.68667308E12, 1974.559882198953], [1.6866747E12, 2125.640198511165], [1.68667104E12, 693.0641911341377], [1.68667248E12, 1904.2457142857147], [1.6866741E12, 2086.778551532024], [1.68667128E12, 354.97027863777043], [1.6866735E12, 2009.8162217659178], [1.6866729E12, 1988.4739770867398], [1.68667512E12, 639.7118084227898], [1.68667188E12, 1597.4400534045367], [1.6866723E12, 1791.981949458482], [1.68667452E12, 1980.4743801652921], [1.68667182E12, 1709.3102953828482], [1.68667362E12, 1853.231290421928], [1.6866708E12, 240.9949494949494], [1.68667302E12, 1698.8387188208599], [1.68667524E12, 1735.664687071725], [1.68667242E12, 1588.4561309364115], [1.68667464E12, 2170.3943104069203], [1.6866714E12, 1514.0435017562804], [1.68667404E12, 2226.1678638941344], [1.686672E12, 1837.2535825545165], [1.68667506E12, 930.0674109059671], [1.68667344E12, 2045.3065275908427], [1.68667164E12, 1674.4174223687812], [1.68667284E12, 2035.07753001715], [1.68667446E12, 2028.1770030170937], [1.68667224E12, 1766.976260257913], [1.68667386E12, 2140.717500000003], [1.68667122E12, 1216.3072575847705], [1.68667326E12, 2270.342921180431], [1.68667548E12, 686.5812337098189]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68667554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 240.9208754208754, "minX": 1.6866708E12, "maxY": 2521.2964376590326, "series": [{"data": [[1.68667296E12, 1914.4753836317147], [1.68667458E12, 2209.2175700934577], [1.68667116E12, 1095.0092341118946], [1.68667236E12, 1811.2775596496535], [1.68667176E12, 1625.2921045540295], [1.68667398E12, 2279.513092979122], [1.68667338E12, 2202.740645634628], [1.68667278E12, 1841.3145583256376], [1.686675E12, 2145.693125712117], [1.6866744E12, 2479.2561815970803], [1.68667098E12, 611.8701002734747], [1.6866738E12, 1956.941650548035], [1.68667542E12, 1307.6685201026503], [1.6866732E12, 2134.8795698924664], [1.68667482E12, 2081.811161811164], [1.68667158E12, 1746.045574830931], [1.6866726E12, 1802.9027364663864], [1.68667218E12, 1815.7387767399825], [1.68667422E12, 2127.575070821529], [1.68667392E12, 1928.1968427835036], [1.68667554E12, 294.45705521472394], [1.68667212E12, 1684.6850349650344], [1.68667494E12, 2315.564811210591], [1.68667332E12, 2104.2173455056254], [1.6866711E12, 328.80704225352144], [1.68667272E12, 1798.950785024154], [1.68667434E12, 2516.1799485861175], [1.6866717E12, 1533.1228115345002], [1.68667374E12, 2023.4160162877508], [1.68667134E12, 617.1167547690164], [1.68667314E12, 1949.9317202519092], [1.68667536E12, 941.9794180269711], [1.68667194E12, 1664.5969498910692], [1.68667254E12, 1932.961513790887], [1.68667476E12, 1976.1708428245981], [1.68667416E12, 1878.3054870530214], [1.68667092E12, 291.64354146019105], [1.68667518E12, 1664.6621569385372], [1.68667356E12, 2124.908835904634], [1.68667152E12, 1746.4718552556023], [1.68667086E12, 350.56637806637804], [1.68667266E12, 1836.0569948186524], [1.68667488E12, 2404.0229793977805], [1.68667146E12, 1712.816314723748], [1.68667428E12, 2521.2964376590326], [1.6866753E12, 396.31367628607353], [1.68667206E12, 1726.1182237600917], [1.68667368E12, 2023.7079824856808], [1.68667308E12, 1974.5467931937183], [1.6866747E12, 2125.6256646579136], [1.68667104E12, 693.051525618881], [1.68667248E12, 1904.2336507936532], [1.6866741E12, 2086.7611420612834], [1.68667128E12, 354.95015479876196], [1.6866735E12, 2009.8035592060205], [1.6866729E12, 1988.460883797055], [1.68667512E12, 639.6998348472334], [1.68667188E12, 1597.4232309746367], [1.6866723E12, 1791.965703971121], [1.68667452E12, 1980.457520661156], [1.68667182E12, 1709.2971035273893], [1.68667362E12, 1853.2177394518017], [1.6866708E12, 240.9208754208754], [1.68667302E12, 1698.822278911564], [1.68667524E12, 1735.648698035631], [1.68667242E12, 1588.4424470083209], [1.68667464E12, 2170.3806265754433], [1.6866714E12, 1514.025668738182], [1.68667404E12, 2226.1519848771263], [1.686672E12, 1837.237071651091], [1.68667506E12, 930.0545298411344], [1.68667344E12, 2045.2917227456292], [1.68667164E12, 1674.4045067326174], [1.68667284E12, 2035.061063464837], [1.68667446E12, 2028.1656050955369], [1.68667224E12, 1766.9630715123083], [1.68667386E12, 2140.7], [1.68667122E12, 1216.290600832838], [1.68667326E12, 2270.3249906611895], [1.68667548E12, 686.5690703735889]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68667554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.42649079417422364, "minX": 1.6866708E12, "maxY": 0.9507283633247645, "series": [{"data": [[1.68667296E12, 0.6361892583120213], [1.68667458E12, 0.5712149532710288], [1.68667116E12, 0.6067354698533415], [1.68667236E12, 0.5786771368166732], [1.68667176E12, 0.6006467259498781], [1.68667398E12, 0.6986717267552196], [1.68667338E12, 0.6100513573000738], [1.68667278E12, 0.5506309633733467], [1.686675E12, 0.655146221040637], [1.6866744E12, 0.5926226185650579], [1.68667098E12, 0.598222424794893], [1.6866738E12, 0.529013539651838], [1.68667542E12, 0.6663815226689463], [1.6866732E12, 0.5616487455197127], [1.68667482E12, 0.5661635661635649], [1.68667158E12, 0.573948838576888], [1.6866726E12, 0.5431290898274843], [1.68667218E12, 0.6477854775534816], [1.68667422E12, 0.7156515580736535], [1.68667392E12, 0.5873067010309272], [1.68667554E12, 0.592024539877301], [1.68667212E12, 0.596363636363638], [1.68667494E12, 0.6667964188400158], [1.68667332E12, 0.5691713483146063], [1.6866711E12, 0.5656338028169001], [1.68667272E12, 0.5851449275362314], [1.68667434E12, 0.9507283633247645], [1.6866717E12, 0.5638516992790943], [1.68667374E12, 0.5704105870376663], [1.68667134E12, 0.5375775683750842], [1.68667314E12, 0.5512098110705995], [1.68667536E12, 0.533711852377572], [1.68667194E12, 0.5936819172113282], [1.68667254E12, 0.7450288646568276], [1.68667476E12, 0.5727302310445797], [1.68667416E12, 0.569358816276202], [1.68667092E12, 0.6263627353815653], [1.68667518E12, 0.7692307692307689], [1.68667356E12, 0.626227208976157], [1.68667152E12, 0.5763928776565215], [1.68667086E12, 0.5793650793650809], [1.68667266E12, 0.5278878390734532], [1.68667488E12, 0.5927099841521392], [1.68667146E12, 0.572461671969917], [1.68667428E12, 0.737489397794742], [1.6866753E12, 0.6428272689251354], [1.68667206E12, 0.6133217993079582], [1.68667368E12, 0.7025934658134064], [1.68667308E12, 0.5304319371727736], [1.6866747E12, 0.6146756469337106], [1.68667104E12, 0.67789291882556], [1.68667248E12, 0.7958730158730156], [1.6866741E12, 0.5755571030640682], [1.68667128E12, 0.5749226006191936], [1.6866735E12, 0.7857631759069131], [1.6866729E12, 0.6500818330605572], [1.68667512E12, 0.595375722543354], [1.68667188E12, 0.6841121495327097], [1.6866723E12, 0.5782190132370626], [1.68667452E12, 0.5659504132231418], [1.68667182E12, 0.5402925150559237], [1.68667362E12, 0.6060979365568218], [1.6866708E12, 0.9259259259259258], [1.68667302E12, 0.5680272108843558], [1.68667524E12, 0.5335769757880322], [1.68667242E12, 0.5959216528038638], [1.68667464E12, 0.5660785019805542], [1.6866714E12, 0.5747095379627132], [1.68667404E12, 0.5557655954631385], [1.686672E12, 0.7570093457943936], [1.68667506E12, 0.759982825246887], [1.68667344E12, 0.5891655450874846], [1.68667164E12, 0.42649079417422364], [1.68667284E12, 0.6336192109777001], [1.68667446E12, 0.5936976198457927], [1.68667224E12, 0.5961313012895664], [1.68667386E12, 0.6310714285714283], [1.68667122E12, 0.6130279595478874], [1.68667326E12, 0.5928277923048171], [1.68667548E12, 0.6794092093831453]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68667554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.6866708E12, "maxY": 19018.0, "series": [{"data": [[1.68667296E12, 11710.0], [1.68667458E12, 11910.0], [1.68667116E12, 6803.0], [1.68667236E12, 11048.0], [1.68667176E12, 8976.0], [1.68667398E12, 12264.0], [1.68667338E12, 19018.0], [1.68667278E12, 9883.0], [1.686675E12, 13080.0], [1.6866744E12, 13188.0], [1.68667098E12, 4203.0], [1.6866738E12, 11740.0], [1.68667542E12, 7189.0], [1.6866732E12, 12314.0], [1.68667482E12, 12234.0], [1.68667158E12, 9950.0], [1.6866726E12, 9960.0], [1.68667218E12, 9388.0], [1.68667422E12, 13034.0], [1.68667392E12, 12529.0], [1.68667554E12, 1597.0], [1.68667212E12, 10421.0], [1.68667494E12, 13581.0], [1.68667332E12, 13512.0], [1.6866711E12, 3535.0], [1.68667272E12, 10414.0], [1.68667434E12, 14684.0], [1.6866717E12, 9024.0], [1.68667374E12, 12194.0], [1.68667134E12, 4895.0], [1.68667314E12, 11026.0], [1.68667536E12, 6502.0], [1.68667194E12, 9834.0], [1.68667254E12, 10576.0], [1.68667476E12, 12327.0], [1.68667416E12, 10774.0], [1.68667092E12, 2349.0], [1.68667518E12, 10592.0], [1.68667356E12, 12075.0], [1.68667152E12, 11652.0], [1.68667086E12, 2137.0], [1.68667266E12, 10691.0], [1.68667488E12, 11838.0], [1.68667146E12, 11482.0], [1.68667428E12, 13514.0], [1.6866753E12, 3503.0], [1.68667206E12, 10955.0], [1.68667368E12, 10735.0], [1.68667308E12, 10101.0], [1.6866747E12, 12955.0], [1.68667104E12, 4434.0], [1.68667248E12, 11600.0], [1.6866741E12, 11924.0], [1.68667128E12, 3316.0], [1.6866735E12, 11487.0], [1.6866729E12, 12028.0], [1.68667512E12, 5103.0], [1.68667188E12, 9677.0], [1.6866723E12, 10222.0], [1.68667452E12, 11413.0], [1.68667182E12, 8745.0], [1.68667362E12, 11251.0], [1.6866708E12, 1169.0], [1.68667302E12, 9720.0], [1.68667524E12, 10974.0], [1.68667242E12, 9563.0], [1.68667464E12, 13645.0], [1.6866714E12, 8485.0], [1.68667404E12, 11995.0], [1.686672E12, 11100.0], [1.68667506E12, 6464.0], [1.68667344E12, 14645.0], [1.68667164E12, 10255.0], [1.68667284E12, 11572.0], [1.68667446E12, 12501.0], [1.68667224E12, 9922.0], [1.68667386E12, 11897.0], [1.68667122E12, 8480.0], [1.68667326E12, 14177.0], [1.68667548E12, 4441.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68667296E12, 6972.4], [1.68667458E12, 8039.000000000001], [1.68667116E12, 4171.400000000001], [1.68667236E12, 6963.8], [1.68667176E12, 6218.8], [1.68667398E12, 8088.1], [1.68667338E12, 7694.9], [1.68667278E12, 6837.0], [1.686675E12, 7984.0], [1.6866744E12, 9300.0], [1.68667098E12, 2542.7999999999997], [1.6866738E12, 7421.0], [1.68667542E12, 4681.500000000001], [1.6866732E12, 7828.800000000001], [1.68667482E12, 7904.0], [1.68667158E12, 6258.6], [1.6866726E12, 6708.799999999999], [1.68667218E12, 6619.200000000001], [1.68667422E12, 8152.4000000000015], [1.68667392E12, 7464.0], [1.68667554E12, 893.4], [1.68667212E12, 6449.0], [1.68667494E12, 8522.2], [1.68667332E12, 7581.0], [1.6866711E12, 1330.0], [1.68667272E12, 6807.8], [1.68667434E12, 8910.6], [1.6866717E12, 5954.400000000001], [1.68667374E12, 7654.0], [1.68667134E12, 2617.800000000001], [1.68667314E12, 7224.0], [1.68667536E12, 3865.700000000003], [1.68667194E12, 6425.0], [1.68667254E12, 7111.700000000001], [1.68667476E12, 7757.5], [1.68667416E12, 7189.400000000001], [1.68667092E12, 1088.6], [1.68667518E12, 6145.6], [1.68667356E12, 7813.400000000003], [1.68667152E12, 6371.200000000002], [1.68667086E12, 1280.0], [1.68667266E12, 6972.0], [1.68667488E12, 8671.4], [1.68667146E12, 6322.8], [1.68667428E12, 9022.0], [1.6866753E12, 1461.400000000001], [1.68667206E12, 6508.800000000001], [1.68667368E12, 7489.399999999999], [1.68667308E12, 7170.500000000007], [1.6866747E12, 8431.900000000001], [1.68667104E12, 2721.3999999999996], [1.68667248E12, 7052.900000000001], [1.6866741E12, 7991.0], [1.68667128E12, 1342.800000000001], [1.6866735E12, 7429.6], [1.6866729E12, 7354.600000000001], [1.68667512E12, 2595.0], [1.68667188E12, 6129.400000000001], [1.6866723E12, 6715.400000000001], [1.68667452E12, 7653.2], [1.68667182E12, 6351.0], [1.68667362E12, 7106.5], [1.6866708E12, 685.2], [1.68667302E12, 6536.5], [1.68667524E12, 6309.200000000002], [1.68667242E12, 6163.3], [1.68667464E12, 8493.4], [1.6866714E12, 5791.599999999999], [1.68667404E12, 8344.0], [1.686672E12, 6945.9], [1.68667506E12, 3828.2000000000003], [1.68667344E12, 7512.0], [1.68667164E12, 6273.1], [1.68667284E12, 7409.800000000001], [1.68667446E12, 7931.200000000001], [1.68667224E12, 6615.0], [1.68667386E12, 7946.6], [1.68667122E12, 4305.799999999999], [1.68667326E12, 7845.200000000002], [1.68667548E12, 2516.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68667296E12, 8889.96], [1.68667458E12, 9874.820000000003], [1.68667116E12, 5545.740000000002], [1.68667236E12, 8895.920000000002], [1.68667176E12, 7789.440000000002], [1.68667398E12, 10118.55], [1.68667338E12, 13360.89000000002], [1.68667278E12, 8488.150000000001], [1.686675E12, 10185.240000000002], [1.6866744E12, 11914.0], [1.68667098E12, 3423.039999999999], [1.6866738E12, 9340.299999999997], [1.68667542E12, 6421.250000000002], [1.6866732E12, 9909.65], [1.68667482E12, 9702.900000000007], [1.68667158E12, 8120.120000000003], [1.6866726E12, 8599.240000000002], [1.68667218E12, 8257.68], [1.68667422E12, 10429.439999999995], [1.68667392E12, 9769.399999999998], [1.68667554E12, 1311.1], [1.68667212E12, 8267.650000000001], [1.68667494E12, 10635.880000000001], [1.68667332E12, 9630.4], [1.6866711E12, 2462.420000000001], [1.68667272E12, 8762.919999999998], [1.68667434E12, 11312.65], [1.6866717E12, 7290.68], [1.68667374E12, 9591.400000000007], [1.68667134E12, 4111.040000000001], [1.68667314E12, 9183.05], [1.68667536E12, 5219.289999999999], [1.68667194E12, 8299.6], [1.68667254E12, 9141.070000000003], [1.68667476E12, 9561.250000000004], [1.68667416E12, 9040.3], [1.68667092E12, 1670.199999999999], [1.68667518E12, 7903.319999999999], [1.68667356E12, 10152.539999999999], [1.68667152E12, 8634.330000000004], [1.68667086E12, 1758.5899999999992], [1.68667266E12, 8940.5], [1.68667488E12, 10589.2], [1.68667146E12, 8314.080000000002], [1.68667428E12, 11141.519999999997], [1.6866753E12, 2691.2], [1.68667206E12, 8873.750000000004], [1.68667368E12, 9402.43], [1.68667308E12, 8577.400000000003], [1.6866747E12, 11539.010000000002], [1.68667104E12, 3569.9199999999983], [1.68667248E12, 8894.03000000002], [1.6866741E12, 10247.0], [1.68667128E12, 2457.8599999999997], [1.6866735E12, 9348.280000000002], [1.6866729E12, 9766.620000000003], [1.68667512E12, 4300.50000000001], [1.68667188E12, 7785.980000000002], [1.6866723E12, 8733.539999999999], [1.68667452E12, 10033.379999999994], [1.68667182E12, 7696.000000000007], [1.68667362E12, 8900.5], [1.6866708E12, 1044.1199999999994], [1.68667302E12, 8358.5], [1.68667524E12, 8947.600000000002], [1.68667242E12, 7780.15], [1.68667464E12, 11119.519999999999], [1.6866714E12, 7225.27], [1.68667404E12, 10449.280000000002], [1.686672E12, 9179.510000000002], [1.68667506E12, 5597.259999999999], [1.68667344E12, 9766.00000000001], [1.68667164E12, 8490.07], [1.68667284E12, 9393.429999999998], [1.68667446E12, 10053.200000000003], [1.68667224E12, 8132.75], [1.68667386E12, 10224.0], [1.68667122E12, 6033.119999999995], [1.68667326E12, 10391.24], [1.68667548E12, 3421.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68667296E12, 7589.4], [1.68667458E12, 8703.0], [1.68667116E12, 4678.4], [1.68667236E12, 7611.2999999999965], [1.68667176E12, 6734.849999999999], [1.68667398E12, 8857.149999999996], [1.68667338E12, 8439.499999999996], [1.68667278E12, 7430.0], [1.686675E12, 8834.2], [1.6866744E12, 10256.0], [1.68667098E12, 2951.899999999999], [1.6866738E12, 8180.5], [1.68667542E12, 5164.1], [1.6866732E12, 8544.900000000001], [1.68667482E12, 8643.5], [1.68667158E12, 6815.599999999997], [1.6866726E12, 7421.799999999996], [1.68667218E12, 7262.000000000001], [1.68667422E12, 9030.0], [1.68667392E12, 8331.599999999999], [1.68667554E12, 993.3999999999999], [1.68667212E12, 7021.0], [1.68667494E12, 9179.599999999999], [1.68667332E12, 8305.5], [1.6866711E12, 1783.1000000000008], [1.68667272E12, 7475.600000000001], [1.68667434E12, 9817.949999999999], [1.6866717E12, 6440.15], [1.68667374E12, 8340.0], [1.68667134E12, 3231.999999999998], [1.68667314E12, 7948.5], [1.68667536E12, 4368.7], [1.68667194E12, 7076.0], [1.68667254E12, 7836.149999999999], [1.68667476E12, 8469.75], [1.68667416E12, 7830.0], [1.68667092E12, 1325.2999999999997], [1.68667518E12, 6748.799999999999], [1.68667356E12, 8617.599999999999], [1.68667152E12, 7165.7], [1.68667086E12, 1491.949999999999], [1.68667266E12, 7792.0], [1.68667488E12, 9456.7], [1.68667146E12, 7051.0], [1.68667428E12, 9739.9], [1.6866753E12, 2031.3999999999996], [1.68667206E12, 7215.849999999999], [1.68667368E12, 8133.599999999997], [1.68667308E12, 7641.0], [1.6866747E12, 9521.749999999996], [1.68667104E12, 3063.0], [1.68667248E12, 7720.200000000001], [1.6866741E12, 8663.0], [1.68667128E12, 1970.7999999999993], [1.6866735E12, 8079.0], [1.6866729E12, 8165.549999999998], [1.68667512E12, 3291.5], [1.68667188E12, 6784.9], [1.6866723E12, 7402.300000000001], [1.68667452E12, 8299.0], [1.68667182E12, 6896.0], [1.68667362E12, 7718.0], [1.6866708E12, 803.0], [1.68667302E12, 7225.25], [1.68667524E12, 7310.2], [1.68667242E12, 6823.499999999996], [1.68667464E12, 9471.599999999999], [1.6866714E12, 6338.0], [1.68667404E12, 9056.399999999998], [1.686672E12, 7815.749999999999], [1.68667506E12, 4665.899999999999], [1.68667344E12, 8233.5], [1.68667164E12, 6820.85], [1.68667284E12, 8084.250000000002], [1.68667446E12, 8646.399999999998], [1.68667224E12, 7167.75], [1.68667386E12, 8768.899999999996], [1.68667122E12, 4861.599999999997], [1.68667326E12, 8596.599999999999], [1.68667548E12, 2828.449999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68667296E12, 15.0], [1.68667458E12, 19.0], [1.68667116E12, 10.0], [1.68667236E12, 14.0], [1.68667176E12, 12.0], [1.68667398E12, 18.0], [1.68667338E12, 17.0], [1.68667278E12, 15.0], [1.686675E12, 21.0], [1.6866744E12, 19.0], [1.68667098E12, 10.0], [1.6866738E12, 18.0], [1.68667542E12, 22.0], [1.6866732E12, 16.0], [1.68667482E12, 20.0], [1.68667158E12, 11.0], [1.6866726E12, 14.0], [1.68667218E12, 13.0], [1.68667422E12, 19.0], [1.68667392E12, 18.0], [1.68667554E12, 24.0], [1.68667212E12, 13.0], [1.68667494E12, 22.0], [1.68667332E12, 17.0], [1.6866711E12, 9.0], [1.68667272E12, 15.0], [1.68667434E12, 20.0], [1.6866717E12, 11.0], [1.68667374E12, 18.0], [1.68667134E12, 10.0], [1.68667314E12, 16.0], [1.68667536E12, 22.0], [1.68667194E12, 12.0], [1.68667254E12, 15.0], [1.68667476E12, 20.0], [1.68667416E12, 19.0], [1.68667092E12, 9.0], [1.68667518E12, 22.0], [1.68667356E12, 16.0], [1.68667152E12, 12.0], [1.68667086E12, 10.0], [1.68667266E12, 15.0], [1.68667488E12, 20.0], [1.68667146E12, 12.0], [1.68667428E12, 19.0], [1.6866753E12, 21.0], [1.68667206E12, 13.0], [1.68667368E12, 17.0], [1.68667308E12, 16.0], [1.6866747E12, 20.0], [1.68667104E12, 10.0], [1.68667248E12, 14.0], [1.6866741E12, 19.0], [1.68667128E12, 11.0], [1.6866735E12, 17.0], [1.6866729E12, 15.0], [1.68667512E12, 22.0], [1.68667188E12, 12.0], [1.6866723E12, 13.0], [1.68667452E12, 19.0], [1.68667182E12, 11.0], [1.68667362E12, 17.0], [1.6866708E12, 23.0], [1.68667302E12, 15.0], [1.68667524E12, 22.0], [1.68667242E12, 14.0], [1.68667464E12, 20.0], [1.6866714E12, 11.0], [1.68667404E12, 19.0], [1.686672E12, 13.0], [1.68667506E12, 21.0], [1.68667344E12, 17.0], [1.68667164E12, 11.0], [1.68667284E12, 15.0], [1.68667446E12, 20.0], [1.68667224E12, 13.0], [1.68667386E12, 19.0], [1.68667122E12, 12.0], [1.68667326E12, 16.0], [1.68667548E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68667296E12, 34.0], [1.68667458E12, 43.0], [1.68667116E12, 42.0], [1.68667236E12, 32.0], [1.68667176E12, 33.0], [1.68667398E12, 41.0], [1.68667338E12, 36.0], [1.68667278E12, 33.0], [1.686675E12, 43.0], [1.6866744E12, 42.0], [1.68667098E12, 41.0], [1.6866738E12, 38.0], [1.68667542E12, 46.0], [1.6866732E12, 35.0], [1.68667482E12, 40.0], [1.68667158E12, 37.0], [1.6866726E12, 31.0], [1.68667218E12, 35.0], [1.68667422E12, 39.0], [1.68667392E12, 36.0], [1.68667554E12, 49.0], [1.68667212E12, 31.0], [1.68667494E12, 43.0], [1.68667332E12, 38.0], [1.6866711E12, 34.0], [1.68667272E12, 32.0], [1.68667434E12, 45.0], [1.6866717E12, 31.0], [1.68667374E12, 37.0], [1.68667134E12, 31.0], [1.68667314E12, 35.0], [1.68667536E12, 42.0], [1.68667194E12, 30.0], [1.68667254E12, 33.0], [1.68667476E12, 41.0], [1.68667416E12, 35.0], [1.68667092E12, 42.0], [1.68667518E12, 44.0], [1.68667356E12, 36.0], [1.68667152E12, 37.0], [1.68667086E12, 58.0], [1.68667266E12, 32.0], [1.68667488E12, 44.0], [1.68667146E12, 36.0], [1.68667428E12, 44.0], [1.6866753E12, 44.0], [1.68667206E12, 32.0], [1.68667368E12, 35.0], [1.68667308E12, 37.0], [1.6866747E12, 41.0], [1.68667104E12, 43.0], [1.68667248E12, 32.0], [1.6866741E12, 39.0], [1.68667128E12, 41.0], [1.6866735E12, 37.0], [1.6866729E12, 34.0], [1.68667512E12, 43.0], [1.68667188E12, 32.0], [1.6866723E12, 33.0], [1.68667452E12, 39.0], [1.68667182E12, 34.0], [1.68667362E12, 36.0], [1.6866708E12, 116.0], [1.68667302E12, 32.0], [1.68667524E12, 51.0], [1.68667242E12, 29.5], [1.68667464E12, 41.0], [1.6866714E12, 35.0], [1.68667404E12, 40.0], [1.686672E12, 33.0], [1.68667506E12, 47.0], [1.68667344E12, 38.0], [1.68667164E12, 33.0], [1.68667284E12, 35.0], [1.68667446E12, 40.0], [1.68667224E12, 32.0], [1.68667386E12, 38.0], [1.68667122E12, 46.0], [1.68667326E12, 37.0], [1.68667548E12, 45.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68667554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 3925.0, "series": [{"data": [[2.0, 90.0], [3.0, 60.0], [4.0, 247.0], [5.0, 77.0], [6.0, 57.5], [7.0, 80.0], [8.0, 75.0], [9.0, 66.0], [10.0, 56.0], [11.0, 57.0], [12.0, 54.5], [13.0, 59.0], [14.0, 60.5], [15.0, 62.0], [16.0, 57.0], [17.0, 59.0], [18.0, 54.0], [19.0, 55.0], [20.0, 58.0], [21.0, 58.0], [22.0, 55.5], [23.0, 56.0], [24.0, 55.0], [25.0, 52.0], [26.0, 54.0], [27.0, 53.0], [28.0, 50.0], [29.0, 52.0], [30.0, 51.5], [31.0, 51.0], [33.0, 52.0], [32.0, 51.0], [34.0, 47.0], [35.0, 47.0], [37.0, 47.0], [36.0, 45.0], [38.0, 45.0], [39.0, 43.0], [41.0, 42.0], [40.0, 43.0], [43.0, 43.0], [42.0, 42.0], [45.0, 41.0], [44.0, 44.0], [46.0, 40.0], [47.0, 42.0], [49.0, 38.0], [48.0, 40.0], [51.0, 41.0], [50.0, 40.0], [53.0, 39.0], [52.0, 38.0], [54.0, 38.0], [55.0, 38.0], [56.0, 37.0], [57.0, 35.0], [58.0, 35.0], [59.0, 35.0], [60.0, 35.0], [61.0, 36.0], [63.0, 36.0], [62.0, 33.0], [67.0, 34.0], [64.0, 36.0], [66.0, 34.0], [65.0, 34.0], [71.0, 34.0], [69.0, 35.0], [68.0, 35.0], [70.0, 34.0], [72.0, 34.0], [75.0, 33.0], [74.0, 32.0], [73.0, 35.0], [76.0, 32.0], [78.0, 32.0], [79.0, 31.0], [77.0, 30.0], [83.0, 32.0], [81.0, 31.0], [80.0, 31.0], [82.0, 30.0], [84.0, 33.0], [86.0, 29.0], [85.0, 32.0], [87.0, 30.0], [89.0, 34.0], [88.0, 32.0], [90.0, 31.0], [91.0, 29.0], [94.0, 32.0], [92.0, 31.0], [93.0, 32.0], [95.0, 30.0], [97.0, 36.0], [98.0, 35.0], [99.0, 29.0], [96.0, 28.0], [101.0, 32.0], [100.0, 27.5], [103.0, 29.0], [102.0, 24.0], [105.0, 30.0], [106.0, 31.0], [104.0, 32.0], [107.0, 20.0], [108.0, 37.0], [110.0, 30.0], [111.0, 21.5], [109.0, 31.0], [113.0, 24.0], [115.0, 24.0], [114.0, 24.0], [117.0, 25.0], [119.0, 31.0], [116.0, 25.5], [118.0, 30.5], [121.0, 22.0], [122.0, 25.0], [120.0, 28.5], [127.0, 90.0], [124.0, 24.5], [125.0, 30.0], [128.0, 64.0], [133.0, 16.0], [131.0, 21.0], [140.0, 19.0], [149.0, 22.0], [1.0, 811.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 2607.0], [7.0, 1769.0], [8.0, 2640.0], [9.0, 2058.5], [10.0, 2526.0], [11.0, 384.0], [12.0, 3055.0], [13.0, 3452.0], [14.0, 3897.0], [15.0, 1696.0], [16.0, 3880.0], [17.0, 2472.0], [18.0, 2996.0], [19.0, 2452.0], [20.0, 2541.0], [21.0, 2562.5], [22.0, 3103.0], [23.0, 2191.5], [24.0, 2516.5], [25.0, 2762.0], [26.0, 2599.0], [27.0, 2535.5], [28.0, 2694.0], [29.0, 2672.0], [30.0, 2569.5], [31.0, 2348.5], [33.0, 2432.5], [32.0, 2087.5], [34.0, 2100.0], [35.0, 2024.0], [37.0, 1681.0], [36.0, 1948.5], [38.0, 2324.0], [39.0, 2036.5], [41.0, 2028.0], [40.0, 2034.5], [43.0, 2185.5], [42.0, 2066.5], [45.0, 1842.0], [44.0, 1642.5], [46.0, 1729.5], [47.0, 1639.5], [49.0, 1762.5], [48.0, 1854.5], [51.0, 1463.5], [50.0, 1720.0], [53.0, 1421.0], [52.0, 1702.0], [54.0, 1338.0], [55.0, 1333.5], [56.0, 1862.0], [57.0, 1763.5], [58.0, 1630.0], [59.0, 1333.5], [60.0, 1242.0], [61.0, 1448.0], [63.0, 1240.5], [62.0, 1310.0], [67.0, 801.5], [64.0, 1481.0], [66.0, 1004.0], [65.0, 1073.0], [71.0, 1133.5], [69.0, 1202.0], [68.0, 450.0], [70.0, 1288.5], [72.0, 1074.0], [75.0, 755.0], [74.0, 972.0], [73.0, 342.5], [76.0, 1004.5], [78.0, 587.0], [79.0, 713.0], [77.0, 1094.0], [83.0, 754.0], [81.0, 1131.0], [80.0, 486.5], [82.0, 1097.0], [84.0, 710.5], [86.0, 881.5], [85.0, 635.0], [87.0, 511.5], [89.0, 215.0], [88.0, 1099.0], [90.0, 889.5], [91.0, 265.5], [94.0, 477.0], [92.0, 646.0], [93.0, 697.0], [95.0, 1009.0], [97.0, 44.0], [98.0, 542.0], [99.0, 357.0], [96.0, 1074.0], [101.0, 255.5], [100.0, 239.5], [103.0, 31.0], [102.0, 1322.0], [105.0, 342.0], [106.0, 35.0], [104.0, 28.0], [107.0, 3925.0], [108.0, 51.0], [110.0, 425.0], [111.0, 1631.0], [109.0, 1108.0], [113.0, 322.5], [115.0, 437.0], [114.0, 484.5], [117.0, 262.0], [119.0, 143.0], [116.0, 514.5], [118.0, 86.0], [121.0, 763.0], [122.0, 936.0], [120.0, 20.0], [127.0, 107.0], [124.0, 217.0], [125.0, 20.0], [128.0, 48.0], [133.0, 18.5], [131.0, 1574.0], [140.0, 1259.0], [149.0, 648.5], [1.0, 2814.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 3925.0, "series": [{"data": [[2.0, 90.0], [3.0, 60.0], [4.0, 247.0], [5.0, 77.0], [6.0, 57.5], [7.0, 80.0], [8.0, 75.0], [9.0, 66.0], [10.0, 56.0], [11.0, 57.0], [12.0, 54.5], [13.0, 59.0], [14.0, 60.5], [15.0, 62.0], [16.0, 57.0], [17.0, 59.0], [18.0, 54.0], [19.0, 55.0], [20.0, 58.0], [21.0, 58.0], [22.0, 55.5], [23.0, 56.0], [24.0, 55.0], [25.0, 52.0], [26.0, 54.0], [27.0, 53.0], [28.0, 50.0], [29.0, 52.0], [30.0, 51.5], [31.0, 51.0], [33.0, 52.0], [32.0, 51.0], [34.0, 47.0], [35.0, 47.0], [37.0, 47.0], [36.0, 45.0], [38.0, 45.0], [39.0, 43.0], [41.0, 42.0], [40.0, 43.0], [43.0, 43.0], [42.0, 42.0], [45.0, 41.0], [44.0, 44.0], [46.0, 40.0], [47.0, 42.0], [49.0, 38.0], [48.0, 40.0], [51.0, 41.0], [50.0, 40.0], [53.0, 39.0], [52.0, 38.0], [54.0, 38.0], [55.0, 38.0], [56.0, 37.0], [57.0, 35.0], [58.0, 35.0], [59.0, 35.0], [60.0, 35.0], [61.0, 36.0], [63.0, 36.0], [62.0, 33.0], [67.0, 34.0], [64.0, 36.0], [66.0, 34.0], [65.0, 34.0], [71.0, 34.0], [69.0, 35.0], [68.0, 35.0], [70.0, 34.0], [72.0, 34.0], [75.0, 33.0], [74.0, 32.0], [73.0, 35.0], [76.0, 32.0], [78.0, 32.0], [79.0, 31.0], [77.0, 30.0], [83.0, 32.0], [81.0, 31.0], [80.0, 31.0], [82.0, 30.0], [84.0, 33.0], [86.0, 29.0], [85.0, 32.0], [87.0, 30.0], [89.0, 34.0], [88.0, 32.0], [90.0, 31.0], [91.0, 29.0], [94.0, 32.0], [92.0, 31.0], [93.0, 32.0], [95.0, 30.0], [97.0, 36.0], [98.0, 35.0], [99.0, 29.0], [96.0, 28.0], [101.0, 32.0], [100.0, 27.5], [103.0, 29.0], [102.0, 24.0], [105.0, 30.0], [106.0, 31.0], [104.0, 32.0], [107.0, 20.0], [108.0, 37.0], [110.0, 30.0], [111.0, 21.5], [109.0, 31.0], [113.0, 24.0], [115.0, 24.0], [114.0, 24.0], [117.0, 25.0], [119.0, 31.0], [116.0, 25.5], [118.0, 30.5], [121.0, 22.0], [122.0, 25.0], [120.0, 28.5], [127.0, 90.0], [124.0, 24.5], [125.0, 29.5], [128.0, 64.0], [133.0, 16.0], [131.0, 21.0], [140.0, 19.0], [149.0, 22.0], [1.0, 811.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 2607.0], [7.0, 1769.0], [8.0, 2640.0], [9.0, 2058.5], [10.0, 2526.0], [11.0, 384.0], [12.0, 3055.0], [13.0, 3452.0], [14.0, 3897.0], [15.0, 1696.0], [16.0, 3880.0], [17.0, 2472.0], [18.0, 2996.0], [19.0, 2452.0], [20.0, 2541.0], [21.0, 2562.5], [22.0, 3103.0], [23.0, 2191.5], [24.0, 2516.5], [25.0, 2762.0], [26.0, 2599.0], [27.0, 2535.5], [28.0, 2694.0], [29.0, 2672.0], [30.0, 2569.5], [31.0, 2348.5], [33.0, 2432.5], [32.0, 2087.5], [34.0, 2100.0], [35.0, 2024.0], [37.0, 1681.0], [36.0, 1948.5], [38.0, 2324.0], [39.0, 2036.5], [41.0, 2027.0], [40.0, 2034.5], [43.0, 2185.5], [42.0, 2066.5], [45.0, 1841.0], [44.0, 1642.5], [46.0, 1729.5], [47.0, 1639.5], [49.0, 1762.5], [48.0, 1854.5], [51.0, 1463.5], [50.0, 1720.0], [53.0, 1421.0], [52.0, 1702.0], [54.0, 1338.0], [55.0, 1333.5], [56.0, 1862.0], [57.0, 1763.5], [58.0, 1630.0], [59.0, 1333.5], [60.0, 1242.0], [61.0, 1448.0], [63.0, 1240.5], [62.0, 1310.0], [67.0, 801.5], [64.0, 1481.0], [66.0, 1004.0], [65.0, 1073.0], [71.0, 1133.5], [69.0, 1202.0], [68.0, 450.0], [70.0, 1288.5], [72.0, 1074.0], [75.0, 755.0], [74.0, 972.0], [73.0, 342.5], [76.0, 1004.5], [78.0, 587.0], [79.0, 713.0], [77.0, 1094.0], [83.0, 754.0], [81.0, 1131.0], [80.0, 486.5], [82.0, 1097.0], [84.0, 710.5], [86.0, 881.5], [85.0, 635.0], [87.0, 511.5], [89.0, 215.0], [88.0, 1099.0], [90.0, 889.5], [91.0, 265.5], [94.0, 477.0], [92.0, 646.0], [93.0, 697.0], [95.0, 1009.0], [97.0, 44.0], [98.0, 542.0], [99.0, 357.0], [96.0, 1074.0], [101.0, 255.5], [100.0, 239.5], [103.0, 31.0], [102.0, 1322.0], [105.0, 342.0], [106.0, 35.0], [104.0, 28.0], [107.0, 3925.0], [108.0, 51.0], [110.0, 425.0], [111.0, 1631.0], [109.0, 1108.0], [113.0, 322.5], [115.0, 437.0], [114.0, 484.5], [117.0, 262.0], [119.0, 143.0], [116.0, 514.5], [118.0, 86.0], [121.0, 763.0], [122.0, 936.0], [120.0, 20.0], [127.0, 107.0], [124.0, 217.0], [125.0, 20.0], [128.0, 48.0], [133.0, 18.5], [131.0, 1574.0], [140.0, 1259.0], [149.0, 648.5], [1.0, 2814.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.2, "minX": 1.6866708E12, "maxY": 73.51666666666667, "series": [{"data": [[1.68667296E12, 52.13333333333333], [1.68667458E12, 44.583333333333336], [1.68667116E12, 61.833333333333336], [1.68667236E12, 55.18333333333333], [1.68667176E12, 61.85], [1.68667398E12, 43.916666666666664], [1.68667338E12, 45.43333333333333], [1.68667278E12, 54.15], [1.686675E12, 43.28333333333333], [1.6866744E12, 41.11666666666667], [1.68667098E12, 73.51666666666667], [1.6866738E12, 51.7], [1.68667542E12, 38.78333333333333], [1.6866732E12, 46.5], [1.68667482E12, 47.483333333333334], [1.68667158E12, 56.68333333333333], [1.6866726E12, 56.03333333333333], [1.68667218E12, 55.35], [1.68667422E12, 47.06666666666667], [1.68667392E12, 51.733333333333334], [1.68667554E12, 5.2], [1.68667212E12, 59.55], [1.68667494E12, 42.81666666666667], [1.68667332E12, 47.46666666666667], [1.6866711E12, 59.733333333333334], [1.68667272E12, 55.2], [1.68667434E12, 38.9], [1.6866717E12, 64.73333333333333], [1.68667374E12, 49.11666666666667], [1.68667134E12, 73.51666666666667], [1.68667314E12, 50.28333333333333], [1.68667536E12, 47.35], [1.68667194E12, 61.2], [1.68667254E12, 51.96666666666667], [1.68667476E12, 51.21666666666667], [1.68667416E12, 54.06666666666667], [1.68667092E12, 50.483333333333334], [1.68667518E12, 43.416666666666664], [1.68667356E12, 47.516666666666666], [1.68667152E12, 58.03333333333333], [1.68667086E12, 69.43333333333334], [1.68667266E12, 54.68333333333333], [1.68667488E12, 42.06666666666667], [1.68667146E12, 57.61666666666667], [1.68667428E12, 39.3], [1.6866753E12, 39.71666666666667], [1.68667206E12, 57.8], [1.68667368E12, 49.483333333333334], [1.68667308E12, 50.93333333333333], [1.6866747E12, 47.016666666666666], [1.68667104E12, 57.28333333333333], [1.68667248E12, 52.5], [1.6866741E12, 47.86666666666667], [1.68667128E12, 53.38333333333333], [1.6866735E12, 48.7], [1.6866729E12, 50.916666666666664], [1.68667512E12, 41.266666666666666], [1.68667188E12, 62.416666666666664], [1.6866723E12, 55.4], [1.68667452E12, 50.416666666666664], [1.68667182E12, 58.11666666666667], [1.68667362E12, 54.13333333333333], [1.6866708E12, 10.183333333333334], [1.68667302E12, 58.8], [1.68667524E12, 35.81666666666667], [1.68667242E12, 62.11666666666667], [1.68667464E12, 46.28333333333333], [1.6866714E12, 62.06666666666667], [1.68667404E12, 44.083333333333336], [1.686672E12, 53.5], [1.68667506E12, 37.8], [1.68667344E12, 49.53333333333333], [1.68667164E12, 60.65], [1.68667284E12, 48.583333333333336], [1.68667446E12, 49.71666666666667], [1.68667224E12, 56.86666666666667], [1.68667386E12, 46.666666666666664], [1.68667122E12, 55.516666666666666], [1.68667326E12, 44.61666666666667], [1.68667548E12, 37.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68667554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6866708E12, "maxY": 60.18333333333333, "series": [{"data": [[1.68667296E12, 44.75], [1.68667458E12, 38.68333333333333], [1.68667116E12, 51.95], [1.68667236E12, 46.75], [1.68667176E12, 52.333333333333336], [1.68667398E12, 38.46666666666667], [1.68667338E12, 38.96666666666667], [1.68667278E12, 46.56666666666667], [1.686675E12, 37.85], [1.6866744E12, 34.983333333333334], [1.68667098E12, 59.55], [1.6866738E12, 43.15], [1.68667542E12, 34.3], [1.6866732E12, 40.1], [1.68667482E12, 40.733333333333334], [1.68667158E12, 49.416666666666664], [1.6866726E12, 47.55], [1.68667218E12, 47.85], [1.68667422E12, 39.78333333333333], [1.68667392E12, 42.916666666666664], [1.68667554E12, 4.866666666666666], [1.68667212E12, 49.733333333333334], [1.68667494E12, 36.78333333333333], [1.68667332E12, 41.483333333333334], [1.6866711E12, 49.35], [1.68667272E12, 46.516666666666666], [1.68667434E12, 34.1], [1.6866717E12, 53.86666666666667], [1.68667374E12, 41.983333333333334], [1.68667134E12, 60.18333333333333], [1.68667314E12, 43.233333333333334], [1.68667536E12, 39.2], [1.68667194E12, 50.983333333333334], [1.68667254E12, 44.833333333333336], [1.68667476E12, 42.4], [1.68667416E12, 45.61666666666667], [1.68667092E12, 43.21666666666667], [1.68667518E12, 37.11666666666667], [1.68667356E12, 41.28333333333333], [1.68667152E12, 49.86666666666667], [1.68667086E12, 55.766666666666666], [1.68667266E12, 46.233333333333334], [1.68667488E12, 36.75], [1.68667146E12, 49.516666666666666], [1.68667428E12, 34.88333333333333], [1.6866753E12, 33.25], [1.68667206E12, 49.0], [1.68667368E12, 42.13333333333333], [1.68667308E12, 44.03333333333333], [1.6866747E12, 38.833333333333336], [1.68667104E12, 49.71666666666667], [1.68667248E12, 44.93333333333333], [1.6866741E12, 39.983333333333334], [1.68667128E12, 45.75], [1.6866735E12, 41.78333333333333], [1.6866729E12, 44.0], [1.68667512E12, 34.733333333333334], [1.68667188E12, 52.68333333333333], [1.6866723E12, 47.35], [1.68667452E12, 42.21666666666667], [1.68667182E12, 50.31666666666667], [1.68667362E12, 45.4], [1.6866708E12, 7.75], [1.68667302E12, 49.733333333333334], [1.68667524E12, 31.716666666666665], [1.68667242E12, 51.93333333333333], [1.68667464E12, 39.05], [1.6866714E12, 52.3], [1.68667404E12, 37.583333333333336], [1.686672E12, 44.666666666666664], [1.68667506E12, 34.083333333333336], [1.68667344E12, 42.81666666666667], [1.68667164E12, 51.03333333333333], [1.68667284E12, 41.93333333333333], [1.68667446E12, 40.916666666666664], [1.68667224E12, 48.733333333333334], [1.68667386E12, 40.28333333333333], [1.68667122E12, 48.05], [1.68667326E12, 39.916666666666664], [1.68667548E12, 33.333333333333336]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.68667296E12, 7.366666666666666], [1.68667458E12, 5.9], [1.68667116E12, 9.416666666666666], [1.68667236E12, 8.433333333333334], [1.68667176E12, 9.516666666666667], [1.68667398E12, 5.45], [1.68667338E12, 6.466666666666667], [1.68667278E12, 7.583333333333333], [1.686675E12, 6.033333333333333], [1.6866744E12, 6.133333333333334], [1.68667098E12, 13.583333333333334], [1.6866738E12, 8.55], [1.68667542E12, 4.666666666666667], [1.6866732E12, 6.4], [1.68667482E12, 6.75], [1.68667158E12, 7.266666666666667], [1.6866726E12, 8.483333333333333], [1.68667218E12, 7.466666666666667], [1.68667422E12, 7.283333333333333], [1.68667392E12, 8.816666666666666], [1.68667554E12, 0.5666666666666667], [1.68667212E12, 9.85], [1.68667494E12, 6.033333333333333], [1.68667332E12, 5.983333333333333], [1.6866711E12, 9.816666666666666], [1.68667272E12, 8.683333333333334], [1.68667434E12, 4.8], [1.6866717E12, 10.866666666666667], [1.68667374E12, 7.133333333333334], [1.68667134E12, 12.333333333333334], [1.68667314E12, 7.05], [1.68667536E12, 7.75], [1.68667194E12, 10.216666666666667], [1.68667254E12, 7.133333333333334], [1.68667476E12, 8.816666666666666], [1.68667416E12, 8.45], [1.68667092E12, 7.233333333333333], [1.68667518E12, 6.0], [1.68667356E12, 6.25], [1.68667152E12, 8.166666666666666], [1.68667086E12, 13.533333333333333], [1.68667266E12, 8.45], [1.68667488E12, 5.316666666666666], [1.68667146E12, 8.1], [1.68667428E12, 4.416666666666667], [1.6866753E12, 6.6], [1.68667206E12, 8.8], [1.68667368E12, 7.35], [1.68667308E12, 6.9], [1.6866747E12, 8.183333333333334], [1.68667104E12, 8.183333333333334], [1.68667248E12, 7.566666666666666], [1.6866741E12, 7.883333333333334], [1.68667128E12, 8.083333333333334], [1.6866735E12, 6.916666666666667], [1.6866729E12, 6.916666666666667], [1.68667512E12, 5.633333333333334], [1.68667188E12, 9.733333333333333], [1.6866723E12, 8.05], [1.68667452E12, 8.2], [1.68667182E12, 7.8], [1.68667362E12, 8.716666666666667], [1.6866708E12, 2.15], [1.68667302E12, 9.066666666666666], [1.68667524E12, 4.75], [1.68667242E12, 10.166666666666666], [1.68667464E12, 7.233333333333333], [1.6866714E12, 9.366666666666667], [1.68667404E12, 6.5], [1.686672E12, 8.833333333333334], [1.68667506E12, 4.733333333333333], [1.68667344E12, 6.716666666666667], [1.68667164E12, 9.616666666666667], [1.68667284E12, 6.633333333333334], [1.68667446E12, 8.8], [1.68667224E12, 8.133333333333333], [1.68667386E12, 6.366666666666666], [1.68667122E12, 7.983333333333333], [1.68667326E12, 4.666666666666667], [1.68667548E12, 5.033333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68667296E12, 0.016666666666666666], [1.68667536E12, 0.016666666666666666], [1.68667284E12, 0.016666666666666666], [1.68667524E12, 0.016666666666666666], [1.68667242E12, 0.016666666666666666], [1.6866714E12, 0.016666666666666666], [1.68667386E12, 0.016666666666666666], [1.68667326E12, 0.03333333333333333]], "isOverall": false, "label": "409", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68667554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5666666666666667, "minX": 1.6866708E12, "maxY": 60.18333333333333, "series": [{"data": [[1.68667296E12, 44.75], [1.68667458E12, 38.68333333333333], [1.68667116E12, 51.95], [1.68667236E12, 46.75], [1.68667176E12, 52.333333333333336], [1.68667398E12, 38.46666666666667], [1.68667338E12, 38.96666666666667], [1.68667278E12, 46.56666666666667], [1.686675E12, 37.85], [1.6866744E12, 34.983333333333334], [1.68667098E12, 59.55], [1.6866738E12, 43.15], [1.68667542E12, 34.3], [1.6866732E12, 40.1], [1.68667482E12, 40.733333333333334], [1.68667158E12, 49.416666666666664], [1.6866726E12, 47.55], [1.68667218E12, 47.85], [1.68667422E12, 39.78333333333333], [1.68667392E12, 42.916666666666664], [1.68667554E12, 4.866666666666666], [1.68667212E12, 49.733333333333334], [1.68667494E12, 36.78333333333333], [1.68667332E12, 41.483333333333334], [1.6866711E12, 49.35], [1.68667272E12, 46.516666666666666], [1.68667434E12, 34.1], [1.6866717E12, 53.86666666666667], [1.68667374E12, 41.983333333333334], [1.68667134E12, 60.18333333333333], [1.68667314E12, 43.233333333333334], [1.68667536E12, 39.2], [1.68667194E12, 50.983333333333334], [1.68667254E12, 44.833333333333336], [1.68667476E12, 42.4], [1.68667416E12, 45.61666666666667], [1.68667092E12, 43.21666666666667], [1.68667518E12, 37.11666666666667], [1.68667356E12, 41.28333333333333], [1.68667152E12, 49.86666666666667], [1.68667086E12, 55.766666666666666], [1.68667266E12, 46.233333333333334], [1.68667488E12, 36.75], [1.68667146E12, 49.516666666666666], [1.68667428E12, 34.88333333333333], [1.6866753E12, 33.25], [1.68667206E12, 49.0], [1.68667368E12, 42.13333333333333], [1.68667308E12, 44.03333333333333], [1.6866747E12, 38.833333333333336], [1.68667104E12, 49.71666666666667], [1.68667248E12, 44.93333333333333], [1.6866741E12, 39.983333333333334], [1.68667128E12, 45.75], [1.6866735E12, 41.78333333333333], [1.6866729E12, 44.0], [1.68667512E12, 34.733333333333334], [1.68667188E12, 52.68333333333333], [1.6866723E12, 47.35], [1.68667452E12, 42.21666666666667], [1.68667182E12, 50.31666666666667], [1.68667362E12, 45.4], [1.6866708E12, 7.75], [1.68667302E12, 49.733333333333334], [1.68667524E12, 31.716666666666665], [1.68667242E12, 51.93333333333333], [1.68667464E12, 39.05], [1.6866714E12, 52.3], [1.68667404E12, 37.583333333333336], [1.686672E12, 44.666666666666664], [1.68667506E12, 34.083333333333336], [1.68667344E12, 42.81666666666667], [1.68667164E12, 51.03333333333333], [1.68667284E12, 41.93333333333333], [1.68667446E12, 40.916666666666664], [1.68667224E12, 48.733333333333334], [1.68667386E12, 40.28333333333333], [1.68667122E12, 48.05], [1.68667326E12, 39.916666666666664], [1.68667548E12, 33.333333333333336]], "isOverall": false, "label": "create cin-success", "isController": false}, {"data": [[1.68667296E12, 7.383333333333334], [1.68667458E12, 5.9], [1.68667116E12, 9.416666666666666], [1.68667236E12, 8.433333333333334], [1.68667176E12, 9.516666666666667], [1.68667398E12, 5.45], [1.68667338E12, 6.466666666666667], [1.68667278E12, 7.583333333333333], [1.686675E12, 6.033333333333333], [1.6866744E12, 6.133333333333334], [1.68667098E12, 13.583333333333334], [1.6866738E12, 8.55], [1.68667542E12, 4.666666666666667], [1.6866732E12, 6.4], [1.68667482E12, 6.75], [1.68667158E12, 7.266666666666667], [1.6866726E12, 8.483333333333333], [1.68667218E12, 7.466666666666667], [1.68667422E12, 7.283333333333333], [1.68667392E12, 8.816666666666666], [1.68667554E12, 0.5666666666666667], [1.68667212E12, 9.85], [1.68667494E12, 6.033333333333333], [1.68667332E12, 5.983333333333333], [1.6866711E12, 9.816666666666666], [1.68667272E12, 8.683333333333334], [1.68667434E12, 4.8], [1.6866717E12, 10.866666666666667], [1.68667374E12, 7.133333333333334], [1.68667134E12, 12.333333333333334], [1.68667314E12, 7.05], [1.68667536E12, 7.766666666666667], [1.68667194E12, 10.216666666666667], [1.68667254E12, 7.133333333333334], [1.68667476E12, 8.816666666666666], [1.68667416E12, 8.45], [1.68667092E12, 7.233333333333333], [1.68667518E12, 6.0], [1.68667356E12, 6.25], [1.68667152E12, 8.166666666666666], [1.68667086E12, 13.533333333333333], [1.68667266E12, 8.45], [1.68667488E12, 5.316666666666666], [1.68667146E12, 8.1], [1.68667428E12, 4.416666666666667], [1.6866753E12, 6.6], [1.68667206E12, 8.8], [1.68667368E12, 7.35], [1.68667308E12, 6.9], [1.6866747E12, 8.183333333333334], [1.68667104E12, 8.183333333333334], [1.68667248E12, 7.566666666666666], [1.6866741E12, 7.883333333333334], [1.68667128E12, 8.083333333333334], [1.6866735E12, 6.916666666666667], [1.6866729E12, 6.916666666666667], [1.68667512E12, 5.633333333333334], [1.68667188E12, 9.733333333333333], [1.6866723E12, 8.05], [1.68667452E12, 8.2], [1.68667182E12, 7.8], [1.68667362E12, 8.716666666666667], [1.6866708E12, 2.15], [1.68667302E12, 9.066666666666666], [1.68667524E12, 4.766666666666667], [1.68667242E12, 10.183333333333334], [1.68667464E12, 7.233333333333333], [1.6866714E12, 9.383333333333333], [1.68667404E12, 6.5], [1.686672E12, 8.833333333333334], [1.68667506E12, 4.733333333333333], [1.68667344E12, 6.716666666666667], [1.68667164E12, 9.616666666666667], [1.68667284E12, 6.65], [1.68667446E12, 8.8], [1.68667224E12, 8.133333333333333], [1.68667386E12, 6.383333333333334], [1.68667122E12, 7.983333333333333], [1.68667326E12, 4.7], [1.68667548E12, 5.033333333333333]], "isOverall": false, "label": "create cin-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68667554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5666666666666667, "minX": 1.6866708E12, "maxY": 60.18333333333333, "series": [{"data": [[1.68667296E12, 44.75], [1.68667458E12, 38.68333333333333], [1.68667116E12, 51.95], [1.68667236E12, 46.75], [1.68667176E12, 52.333333333333336], [1.68667398E12, 38.46666666666667], [1.68667338E12, 38.96666666666667], [1.68667278E12, 46.56666666666667], [1.686675E12, 37.85], [1.6866744E12, 34.983333333333334], [1.68667098E12, 59.55], [1.6866738E12, 43.15], [1.68667542E12, 34.3], [1.6866732E12, 40.1], [1.68667482E12, 40.733333333333334], [1.68667158E12, 49.416666666666664], [1.6866726E12, 47.55], [1.68667218E12, 47.85], [1.68667422E12, 39.78333333333333], [1.68667392E12, 42.916666666666664], [1.68667554E12, 4.866666666666666], [1.68667212E12, 49.733333333333334], [1.68667494E12, 36.78333333333333], [1.68667332E12, 41.483333333333334], [1.6866711E12, 49.35], [1.68667272E12, 46.516666666666666], [1.68667434E12, 34.1], [1.6866717E12, 53.86666666666667], [1.68667374E12, 41.983333333333334], [1.68667134E12, 60.18333333333333], [1.68667314E12, 43.233333333333334], [1.68667536E12, 39.2], [1.68667194E12, 50.983333333333334], [1.68667254E12, 44.833333333333336], [1.68667476E12, 42.4], [1.68667416E12, 45.61666666666667], [1.68667092E12, 43.21666666666667], [1.68667518E12, 37.11666666666667], [1.68667356E12, 41.28333333333333], [1.68667152E12, 49.86666666666667], [1.68667086E12, 55.766666666666666], [1.68667266E12, 46.233333333333334], [1.68667488E12, 36.75], [1.68667146E12, 49.516666666666666], [1.68667428E12, 34.88333333333333], [1.6866753E12, 33.25], [1.68667206E12, 49.0], [1.68667368E12, 42.13333333333333], [1.68667308E12, 44.03333333333333], [1.6866747E12, 38.833333333333336], [1.68667104E12, 49.71666666666667], [1.68667248E12, 44.93333333333333], [1.6866741E12, 39.983333333333334], [1.68667128E12, 45.75], [1.6866735E12, 41.78333333333333], [1.6866729E12, 44.0], [1.68667512E12, 34.733333333333334], [1.68667188E12, 52.68333333333333], [1.6866723E12, 47.35], [1.68667452E12, 42.21666666666667], [1.68667182E12, 50.31666666666667], [1.68667362E12, 45.4], [1.6866708E12, 7.75], [1.68667302E12, 49.733333333333334], [1.68667524E12, 31.716666666666665], [1.68667242E12, 51.93333333333333], [1.68667464E12, 39.05], [1.6866714E12, 52.3], [1.68667404E12, 37.583333333333336], [1.686672E12, 44.666666666666664], [1.68667506E12, 34.083333333333336], [1.68667344E12, 42.81666666666667], [1.68667164E12, 51.03333333333333], [1.68667284E12, 41.93333333333333], [1.68667446E12, 40.916666666666664], [1.68667224E12, 48.733333333333334], [1.68667386E12, 40.28333333333333], [1.68667122E12, 48.05], [1.68667326E12, 39.916666666666664], [1.68667548E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68667296E12, 7.383333333333334], [1.68667458E12, 5.9], [1.68667116E12, 9.416666666666666], [1.68667236E12, 8.433333333333334], [1.68667176E12, 9.516666666666667], [1.68667398E12, 5.45], [1.68667338E12, 6.466666666666667], [1.68667278E12, 7.583333333333333], [1.686675E12, 6.033333333333333], [1.6866744E12, 6.133333333333334], [1.68667098E12, 13.583333333333334], [1.6866738E12, 8.55], [1.68667542E12, 4.666666666666667], [1.6866732E12, 6.4], [1.68667482E12, 6.75], [1.68667158E12, 7.266666666666667], [1.6866726E12, 8.483333333333333], [1.68667218E12, 7.466666666666667], [1.68667422E12, 7.283333333333333], [1.68667392E12, 8.816666666666666], [1.68667554E12, 0.5666666666666667], [1.68667212E12, 9.85], [1.68667494E12, 6.033333333333333], [1.68667332E12, 5.983333333333333], [1.6866711E12, 9.816666666666666], [1.68667272E12, 8.683333333333334], [1.68667434E12, 4.8], [1.6866717E12, 10.866666666666667], [1.68667374E12, 7.133333333333334], [1.68667134E12, 12.333333333333334], [1.68667314E12, 7.05], [1.68667536E12, 7.766666666666667], [1.68667194E12, 10.216666666666667], [1.68667254E12, 7.133333333333334], [1.68667476E12, 8.816666666666666], [1.68667416E12, 8.45], [1.68667092E12, 7.233333333333333], [1.68667518E12, 6.0], [1.68667356E12, 6.25], [1.68667152E12, 8.166666666666666], [1.68667086E12, 13.533333333333333], [1.68667266E12, 8.45], [1.68667488E12, 5.316666666666666], [1.68667146E12, 8.1], [1.68667428E12, 4.416666666666667], [1.6866753E12, 6.6], [1.68667206E12, 8.8], [1.68667368E12, 7.35], [1.68667308E12, 6.9], [1.6866747E12, 8.183333333333334], [1.68667104E12, 8.183333333333334], [1.68667248E12, 7.566666666666666], [1.6866741E12, 7.883333333333334], [1.68667128E12, 8.083333333333334], [1.6866735E12, 6.916666666666667], [1.6866729E12, 6.916666666666667], [1.68667512E12, 5.633333333333334], [1.68667188E12, 9.733333333333333], [1.6866723E12, 8.05], [1.68667452E12, 8.2], [1.68667182E12, 7.8], [1.68667362E12, 8.716666666666667], [1.6866708E12, 2.15], [1.68667302E12, 9.066666666666666], [1.68667524E12, 4.766666666666667], [1.68667242E12, 10.183333333333334], [1.68667464E12, 7.233333333333333], [1.6866714E12, 9.383333333333333], [1.68667404E12, 6.5], [1.686672E12, 8.833333333333334], [1.68667506E12, 4.733333333333333], [1.68667344E12, 6.716666666666667], [1.68667164E12, 9.616666666666667], [1.68667284E12, 6.65], [1.68667446E12, 8.8], [1.68667224E12, 8.133333333333333], [1.68667386E12, 6.383333333333334], [1.68667122E12, 7.983333333333333], [1.68667326E12, 4.7], [1.68667548E12, 5.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68667554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

