/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 3036.0, "series": [{"data": [[0.0, 8.0], [0.1, 11.0], [0.2, 12.0], [0.3, 13.0], [0.4, 13.0], [0.5, 15.0], [0.6, 16.0], [0.7, 17.0], [0.8, 18.0], [0.9, 19.0], [1.0, 19.0], [1.1, 20.0], [1.2, 22.0], [1.3, 23.0], [1.4, 23.0], [1.5, 24.0], [1.6, 25.0], [1.7, 26.0], [1.8, 27.0], [1.9, 28.0], [2.0, 29.0], [2.1, 30.0], [2.2, 31.0], [2.3, 32.0], [2.4, 33.0], [2.5, 34.0], [2.6, 34.0], [2.7, 35.0], [2.8, 36.0], [2.9, 37.0], [3.0, 38.0], [3.1, 38.0], [3.2, 39.0], [3.3, 40.0], [3.4, 40.0], [3.5, 41.0], [3.6, 42.0], [3.7, 43.0], [3.8, 44.0], [3.9, 45.0], [4.0, 46.0], [4.1, 47.0], [4.2, 49.0], [4.3, 50.0], [4.4, 51.0], [4.5, 53.0], [4.6, 54.0], [4.7, 55.0], [4.8, 56.0], [4.9, 57.0], [5.0, 58.0], [5.1, 59.0], [5.2, 60.0], [5.3, 61.0], [5.4, 62.0], [5.5, 63.0], [5.6, 64.0], [5.7, 65.0], [5.8, 66.0], [5.9, 67.0], [6.0, 68.0], [6.1, 69.0], [6.2, 71.0], [6.3, 72.0], [6.4, 73.0], [6.5, 75.0], [6.6, 76.0], [6.7, 77.0], [6.8, 78.0], [6.9, 79.0], [7.0, 80.0], [7.1, 81.0], [7.2, 82.0], [7.3, 83.0], [7.4, 84.0], [7.5, 85.0], [7.6, 86.0], [7.7, 87.0], [7.8, 88.0], [7.9, 89.0], [8.0, 90.0], [8.1, 91.0], [8.2, 93.0], [8.3, 94.0], [8.4, 95.0], [8.5, 96.0], [8.6, 97.0], [8.7, 98.0], [8.8, 99.0], [8.9, 101.0], [9.0, 102.0], [9.1, 103.0], [9.2, 104.0], [9.3, 105.0], [9.4, 106.0], [9.5, 107.0], [9.6, 108.0], [9.7, 109.0], [9.8, 110.0], [9.9, 111.0], [10.0, 112.0], [10.1, 113.0], [10.2, 114.0], [10.3, 115.0], [10.4, 116.0], [10.5, 117.0], [10.6, 117.0], [10.7, 118.0], [10.8, 119.0], [10.9, 119.0], [11.0, 120.0], [11.1, 120.0], [11.2, 121.0], [11.3, 121.0], [11.4, 122.0], [11.5, 122.0], [11.6, 123.0], [11.7, 123.0], [11.8, 124.0], [11.9, 124.0], [12.0, 125.0], [12.1, 125.0], [12.2, 125.0], [12.3, 126.0], [12.4, 126.0], [12.5, 126.0], [12.6, 127.0], [12.7, 127.0], [12.8, 127.0], [12.9, 128.0], [13.0, 128.0], [13.1, 128.0], [13.2, 129.0], [13.3, 129.0], [13.4, 129.0], [13.5, 130.0], [13.6, 130.0], [13.7, 130.0], [13.8, 131.0], [13.9, 131.0], [14.0, 131.0], [14.1, 131.0], [14.2, 132.0], [14.3, 132.0], [14.4, 132.0], [14.5, 132.0], [14.6, 132.0], [14.7, 133.0], [14.8, 133.0], [14.9, 133.0], [15.0, 133.0], [15.1, 133.0], [15.2, 133.0], [15.3, 134.0], [15.4, 134.0], [15.5, 134.0], [15.6, 134.0], [15.7, 134.0], [15.8, 134.0], [15.9, 134.0], [16.0, 134.0], [16.1, 135.0], [16.2, 135.0], [16.3, 135.0], [16.4, 135.0], [16.5, 135.0], [16.6, 135.0], [16.7, 135.0], [16.8, 135.0], [16.9, 135.0], [17.0, 135.0], [17.1, 135.0], [17.2, 136.0], [17.3, 136.0], [17.4, 136.0], [17.5, 136.0], [17.6, 136.0], [17.7, 136.0], [17.8, 136.0], [17.9, 136.0], [18.0, 136.0], [18.1, 136.0], [18.2, 136.0], [18.3, 136.0], [18.4, 136.0], [18.5, 136.0], [18.6, 136.0], [18.7, 136.0], [18.8, 137.0], [18.9, 137.0], [19.0, 137.0], [19.1, 137.0], [19.2, 137.0], [19.3, 137.0], [19.4, 137.0], [19.5, 137.0], [19.6, 137.0], [19.7, 137.0], [19.8, 137.0], [19.9, 137.0], [20.0, 137.0], [20.1, 137.0], [20.2, 137.0], [20.3, 137.0], [20.4, 137.0], [20.5, 137.0], [20.6, 137.0], [20.7, 137.0], [20.8, 138.0], [20.9, 138.0], [21.0, 138.0], [21.1, 138.0], [21.2, 138.0], [21.3, 138.0], [21.4, 138.0], [21.5, 138.0], [21.6, 138.0], [21.7, 138.0], [21.8, 138.0], [21.9, 138.0], [22.0, 138.0], [22.1, 138.0], [22.2, 138.0], [22.3, 138.0], [22.4, 138.0], [22.5, 138.0], [22.6, 138.0], [22.7, 138.0], [22.8, 138.0], [22.9, 138.0], [23.0, 138.0], [23.1, 138.0], [23.2, 138.0], [23.3, 139.0], [23.4, 139.0], [23.5, 139.0], [23.6, 139.0], [23.7, 139.0], [23.8, 139.0], [23.9, 139.0], [24.0, 139.0], [24.1, 139.0], [24.2, 139.0], [24.3, 139.0], [24.4, 139.0], [24.5, 139.0], [24.6, 139.0], [24.7, 139.0], [24.8, 139.0], [24.9, 139.0], [25.0, 139.0], [25.1, 139.0], [25.2, 139.0], [25.3, 139.0], [25.4, 139.0], [25.5, 139.0], [25.6, 139.0], [25.7, 139.0], [25.8, 139.0], [25.9, 139.0], [26.0, 139.0], [26.1, 139.0], [26.2, 139.0], [26.3, 140.0], [26.4, 140.0], [26.5, 140.0], [26.6, 140.0], [26.7, 140.0], [26.8, 140.0], [26.9, 140.0], [27.0, 140.0], [27.1, 140.0], [27.2, 140.0], [27.3, 140.0], [27.4, 140.0], [27.5, 140.0], [27.6, 140.0], [27.7, 140.0], [27.8, 140.0], [27.9, 140.0], [28.0, 140.0], [28.1, 140.0], [28.2, 140.0], [28.3, 140.0], [28.4, 140.0], [28.5, 140.0], [28.6, 140.0], [28.7, 140.0], [28.8, 140.0], [28.9, 140.0], [29.0, 140.0], [29.1, 140.0], [29.2, 140.0], [29.3, 140.0], [29.4, 140.0], [29.5, 140.0], [29.6, 140.0], [29.7, 140.0], [29.8, 141.0], [29.9, 141.0], [30.0, 141.0], [30.1, 141.0], [30.2, 141.0], [30.3, 141.0], [30.4, 141.0], [30.5, 141.0], [30.6, 141.0], [30.7, 141.0], [30.8, 141.0], [30.9, 141.0], [31.0, 141.0], [31.1, 141.0], [31.2, 141.0], [31.3, 141.0], [31.4, 141.0], [31.5, 141.0], [31.6, 141.0], [31.7, 141.0], [31.8, 141.0], [31.9, 141.0], [32.0, 141.0], [32.1, 141.0], [32.2, 141.0], [32.3, 141.0], [32.4, 141.0], [32.5, 141.0], [32.6, 141.0], [32.7, 141.0], [32.8, 141.0], [32.9, 141.0], [33.0, 141.0], [33.1, 142.0], [33.2, 142.0], [33.3, 142.0], [33.4, 142.0], [33.5, 142.0], [33.6, 142.0], [33.7, 142.0], [33.8, 142.0], [33.9, 142.0], [34.0, 142.0], [34.1, 142.0], [34.2, 142.0], [34.3, 142.0], [34.4, 142.0], [34.5, 142.0], [34.6, 142.0], [34.7, 142.0], [34.8, 142.0], [34.9, 142.0], [35.0, 142.0], [35.1, 142.0], [35.2, 142.0], [35.3, 142.0], [35.4, 142.0], [35.5, 142.0], [35.6, 142.0], [35.7, 142.0], [35.8, 142.0], [35.9, 142.0], [36.0, 143.0], [36.1, 143.0], [36.2, 143.0], [36.3, 143.0], [36.4, 143.0], [36.5, 143.0], [36.6, 143.0], [36.7, 143.0], [36.8, 143.0], [36.9, 143.0], [37.0, 143.0], [37.1, 143.0], [37.2, 143.0], [37.3, 143.0], [37.4, 143.0], [37.5, 143.0], [37.6, 143.0], [37.7, 143.0], [37.8, 143.0], [37.9, 143.0], [38.0, 143.0], [38.1, 143.0], [38.2, 143.0], [38.3, 143.0], [38.4, 143.0], [38.5, 143.0], [38.6, 144.0], [38.7, 144.0], [38.8, 144.0], [38.9, 144.0], [39.0, 144.0], [39.1, 144.0], [39.2, 144.0], [39.3, 144.0], [39.4, 144.0], [39.5, 144.0], [39.6, 144.0], [39.7, 144.0], [39.8, 144.0], [39.9, 144.0], [40.0, 144.0], [40.1, 144.0], [40.2, 144.0], [40.3, 144.0], [40.4, 144.0], [40.5, 144.0], [40.6, 144.0], [40.7, 144.0], [40.8, 145.0], [40.9, 145.0], [41.0, 145.0], [41.1, 145.0], [41.2, 145.0], [41.3, 145.0], [41.4, 145.0], [41.5, 145.0], [41.6, 145.0], [41.7, 145.0], [41.8, 145.0], [41.9, 145.0], [42.0, 145.0], [42.1, 145.0], [42.2, 145.0], [42.3, 146.0], [42.4, 146.0], [42.5, 146.0], [42.6, 146.0], [42.7, 146.0], [42.8, 146.0], [42.9, 146.0], [43.0, 146.0], [43.1, 146.0], [43.2, 146.0], [43.3, 146.0], [43.4, 146.0], [43.5, 146.0], [43.6, 146.0], [43.7, 146.0], [43.8, 146.0], [43.9, 147.0], [44.0, 147.0], [44.1, 147.0], [44.2, 147.0], [44.3, 147.0], [44.4, 147.0], [44.5, 147.0], [44.6, 147.0], [44.7, 147.0], [44.8, 147.0], [44.9, 147.0], [45.0, 147.0], [45.1, 147.0], [45.2, 147.0], [45.3, 148.0], [45.4, 148.0], [45.5, 148.0], [45.6, 148.0], [45.7, 148.0], [45.8, 148.0], [45.9, 148.0], [46.0, 149.0], [46.1, 149.0], [46.2, 149.0], [46.3, 149.0], [46.4, 149.0], [46.5, 149.0], [46.6, 149.0], [46.7, 149.0], [46.8, 149.0], [46.9, 149.0], [47.0, 149.0], [47.1, 149.0], [47.2, 149.0], [47.3, 149.0], [47.4, 149.0], [47.5, 149.0], [47.6, 149.0], [47.7, 149.0], [47.8, 149.0], [47.9, 149.0], [48.0, 149.0], [48.1, 149.0], [48.2, 149.0], [48.3, 149.0], [48.4, 149.0], [48.5, 149.0], [48.6, 149.0], [48.7, 149.0], [48.8, 149.0], [48.9, 149.0], [49.0, 149.0], [49.1, 149.0], [49.2, 149.0], [49.3, 149.0], [49.4, 149.0], [49.5, 149.0], [49.6, 149.0], [49.7, 149.0], [49.8, 149.0], [49.9, 149.0], [50.0, 149.0], [50.1, 149.0], [50.2, 149.0], [50.3, 149.0], [50.4, 149.0], [50.5, 149.0], [50.6, 149.0], [50.7, 149.0], [50.8, 149.0], [50.9, 149.0], [51.0, 149.0], [51.1, 149.0], [51.2, 149.0], [51.3, 149.0], [51.4, 149.0], [51.5, 149.0], [51.6, 149.0], [51.7, 149.0], [51.8, 149.0], [51.9, 149.0], [52.0, 149.0], [52.1, 150.0], [52.2, 150.0], [52.3, 150.0], [52.4, 150.0], [52.5, 150.0], [52.6, 150.0], [52.7, 150.0], [52.8, 150.0], [52.9, 150.0], [53.0, 150.0], [53.1, 150.0], [53.2, 150.0], [53.3, 150.0], [53.4, 150.0], [53.5, 150.0], [53.6, 150.0], [53.7, 150.0], [53.8, 150.0], [53.9, 150.0], [54.0, 150.0], [54.1, 150.0], [54.2, 150.0], [54.3, 150.0], [54.4, 150.0], [54.5, 150.0], [54.6, 150.0], [54.7, 150.0], [54.8, 150.0], [54.9, 150.0], [55.0, 150.0], [55.1, 150.0], [55.2, 150.0], [55.3, 150.0], [55.4, 150.0], [55.5, 150.0], [55.6, 150.0], [55.7, 150.0], [55.8, 150.0], [55.9, 150.0], [56.0, 150.0], [56.1, 150.0], [56.2, 150.0], [56.3, 150.0], [56.4, 150.0], [56.5, 150.0], [56.6, 150.0], [56.7, 150.0], [56.8, 150.0], [56.9, 150.0], [57.0, 150.0], [57.1, 150.0], [57.2, 150.0], [57.3, 150.0], [57.4, 150.0], [57.5, 150.0], [57.6, 150.0], [57.7, 150.0], [57.8, 150.0], [57.9, 150.0], [58.0, 150.0], [58.1, 150.0], [58.2, 150.0], [58.3, 150.0], [58.4, 150.0], [58.5, 150.0], [58.6, 150.0], [58.7, 150.0], [58.8, 150.0], [58.9, 150.0], [59.0, 150.0], [59.1, 150.0], [59.2, 150.0], [59.3, 150.0], [59.4, 150.0], [59.5, 150.0], [59.6, 150.0], [59.7, 151.0], [59.8, 151.0], [59.9, 151.0], [60.0, 151.0], [60.1, 151.0], [60.2, 151.0], [60.3, 151.0], [60.4, 151.0], [60.5, 151.0], [60.6, 151.0], [60.7, 152.0], [60.8, 152.0], [60.9, 152.0], [61.0, 152.0], [61.1, 152.0], [61.2, 152.0], [61.3, 152.0], [61.4, 152.0], [61.5, 152.0], [61.6, 152.0], [61.7, 153.0], [61.8, 153.0], [61.9, 153.0], [62.0, 153.0], [62.1, 153.0], [62.2, 153.0], [62.3, 153.0], [62.4, 153.0], [62.5, 153.0], [62.6, 153.0], [62.7, 153.0], [62.8, 153.0], [62.9, 153.0], [63.0, 153.0], [63.1, 154.0], [63.2, 154.0], [63.3, 154.0], [63.4, 154.0], [63.5, 154.0], [63.6, 154.0], [63.7, 154.0], [63.8, 154.0], [63.9, 154.0], [64.0, 154.0], [64.1, 155.0], [64.2, 155.0], [64.3, 155.0], [64.4, 155.0], [64.5, 155.0], [64.6, 155.0], [64.7, 155.0], [64.8, 155.0], [64.9, 155.0], [65.0, 155.0], [65.1, 155.0], [65.2, 155.0], [65.3, 155.0], [65.4, 155.0], [65.5, 155.0], [65.6, 155.0], [65.7, 155.0], [65.8, 155.0], [65.9, 155.0], [66.0, 156.0], [66.1, 156.0], [66.2, 156.0], [66.3, 156.0], [66.4, 156.0], [66.5, 156.0], [66.6, 156.0], [66.7, 156.0], [66.8, 156.0], [66.9, 156.0], [67.0, 156.0], [67.1, 156.0], [67.2, 156.0], [67.3, 156.0], [67.4, 156.0], [67.5, 156.0], [67.6, 156.0], [67.7, 156.0], [67.8, 156.0], [67.9, 156.0], [68.0, 156.0], [68.1, 156.0], [68.2, 156.0], [68.3, 156.0], [68.4, 156.0], [68.5, 156.0], [68.6, 156.0], [68.7, 156.0], [68.8, 156.0], [68.9, 156.0], [69.0, 156.0], [69.1, 156.0], [69.2, 157.0], [69.3, 157.0], [69.4, 157.0], [69.5, 157.0], [69.6, 157.0], [69.7, 157.0], [69.8, 157.0], [69.9, 157.0], [70.0, 157.0], [70.1, 157.0], [70.2, 157.0], [70.3, 157.0], [70.4, 157.0], [70.5, 157.0], [70.6, 157.0], [70.7, 157.0], [70.8, 157.0], [70.9, 157.0], [71.0, 157.0], [71.1, 157.0], [71.2, 157.0], [71.3, 157.0], [71.4, 157.0], [71.5, 157.0], [71.6, 157.0], [71.7, 157.0], [71.8, 157.0], [71.9, 157.0], [72.0, 157.0], [72.1, 157.0], [72.2, 157.0], [72.3, 157.0], [72.4, 157.0], [72.5, 158.0], [72.6, 158.0], [72.7, 158.0], [72.8, 158.0], [72.9, 158.0], [73.0, 158.0], [73.1, 158.0], [73.2, 158.0], [73.3, 158.0], [73.4, 158.0], [73.5, 158.0], [73.6, 158.0], [73.7, 158.0], [73.8, 158.0], [73.9, 158.0], [74.0, 158.0], [74.1, 158.0], [74.2, 158.0], [74.3, 158.0], [74.4, 158.0], [74.5, 158.0], [74.6, 158.0], [74.7, 158.0], [74.8, 158.0], [74.9, 158.0], [75.0, 158.0], [75.1, 158.0], [75.2, 158.0], [75.3, 158.0], [75.4, 158.0], [75.5, 159.0], [75.6, 159.0], [75.7, 159.0], [75.8, 159.0], [75.9, 159.0], [76.0, 159.0], [76.1, 159.0], [76.2, 159.0], [76.3, 159.0], [76.4, 159.0], [76.5, 159.0], [76.6, 159.0], [76.7, 159.0], [76.8, 159.0], [76.9, 159.0], [77.0, 159.0], [77.1, 159.0], [77.2, 159.0], [77.3, 159.0], [77.4, 159.0], [77.5, 159.0], [77.6, 159.0], [77.7, 159.0], [77.8, 159.0], [77.9, 159.0], [78.0, 159.0], [78.1, 159.0], [78.2, 159.0], [78.3, 160.0], [78.4, 160.0], [78.5, 160.0], [78.6, 160.0], [78.7, 160.0], [78.8, 160.0], [78.9, 160.0], [79.0, 160.0], [79.1, 160.0], [79.2, 160.0], [79.3, 160.0], [79.4, 160.0], [79.5, 160.0], [79.6, 160.0], [79.7, 160.0], [79.8, 160.0], [79.9, 160.0], [80.0, 160.0], [80.1, 160.0], [80.2, 160.0], [80.3, 160.0], [80.4, 160.0], [80.5, 160.0], [80.6, 161.0], [80.7, 161.0], [80.8, 161.0], [80.9, 161.0], [81.0, 161.0], [81.1, 161.0], [81.2, 161.0], [81.3, 161.0], [81.4, 161.0], [81.5, 161.0], [81.6, 161.0], [81.7, 161.0], [81.8, 161.0], [81.9, 161.0], [82.0, 161.0], [82.1, 162.0], [82.2, 162.0], [82.3, 162.0], [82.4, 162.0], [82.5, 162.0], [82.6, 162.0], [82.7, 162.0], [82.8, 162.0], [82.9, 162.0], [83.0, 162.0], [83.1, 162.0], [83.2, 163.0], [83.3, 163.0], [83.4, 163.0], [83.5, 163.0], [83.6, 163.0], [83.7, 163.0], [83.8, 163.0], [83.9, 163.0], [84.0, 164.0], [84.1, 164.0], [84.2, 164.0], [84.3, 164.0], [84.4, 164.0], [84.5, 165.0], [84.6, 165.0], [84.7, 165.0], [84.8, 165.0], [84.9, 166.0], [85.0, 166.0], [85.1, 166.0], [85.2, 166.0], [85.3, 167.0], [85.4, 167.0], [85.5, 167.0], [85.6, 167.0], [85.7, 168.0], [85.8, 168.0], [85.9, 168.0], [86.0, 169.0], [86.1, 169.0], [86.2, 169.0], [86.3, 169.0], [86.4, 169.0], [86.5, 169.0], [86.6, 170.0], [86.7, 170.0], [86.8, 170.0], [86.9, 170.0], [87.0, 170.0], [87.1, 170.0], [87.2, 171.0], [87.3, 171.0], [87.4, 172.0], [87.5, 172.0], [87.6, 173.0], [87.7, 174.0], [87.8, 174.0], [87.9, 175.0], [88.0, 176.0], [88.1, 176.0], [88.2, 177.0], [88.3, 177.0], [88.4, 178.0], [88.5, 178.0], [88.6, 178.0], [88.7, 179.0], [88.8, 179.0], [88.9, 179.0], [89.0, 179.0], [89.1, 179.0], [89.2, 179.0], [89.3, 179.0], [89.4, 179.0], [89.5, 179.0], [89.6, 179.0], [89.7, 179.0], [89.8, 180.0], [89.9, 180.0], [90.0, 180.0], [90.1, 180.0], [90.2, 180.0], [90.3, 180.0], [90.4, 180.0], [90.5, 180.0], [90.6, 180.0], [90.7, 181.0], [90.8, 181.0], [90.9, 182.0], [91.0, 182.0], [91.1, 183.0], [91.2, 183.0], [91.3, 184.0], [91.4, 185.0], [91.5, 186.0], [91.6, 187.0], [91.7, 188.0], [91.8, 189.0], [91.9, 190.0], [92.0, 191.0], [92.1, 191.0], [92.2, 192.0], [92.3, 193.0], [92.4, 193.0], [92.5, 194.0], [92.6, 194.0], [92.7, 194.0], [92.8, 194.0], [92.9, 194.0], [93.0, 194.0], [93.1, 195.0], [93.2, 195.0], [93.3, 195.0], [93.4, 195.0], [93.5, 195.0], [93.6, 195.0], [93.7, 196.0], [93.8, 197.0], [93.9, 197.0], [94.0, 198.0], [94.1, 199.0], [94.2, 200.0], [94.3, 201.0], [94.4, 203.0], [94.5, 204.0], [94.6, 206.0], [94.7, 208.0], [94.8, 210.0], [94.9, 212.0], [95.0, 213.0], [95.1, 215.0], [95.2, 217.0], [95.3, 220.0], [95.4, 223.0], [95.5, 229.0], [95.6, 235.0], [95.7, 237.0], [95.8, 239.0], [95.9, 239.0], [96.0, 239.0], [96.1, 239.0], [96.2, 239.0], [96.3, 239.0], [96.4, 239.0], [96.5, 239.0], [96.6, 240.0], [96.7, 240.0], [96.8, 240.0], [96.9, 240.0], [97.0, 240.0], [97.1, 241.0], [97.2, 242.0], [97.3, 244.0], [97.4, 250.0], [97.5, 255.0], [97.6, 258.0], [97.7, 259.0], [97.8, 261.0], [97.9, 262.0], [98.0, 263.0], [98.1, 264.0], [98.2, 265.0], [98.3, 267.0], [98.4, 269.0], [98.5, 271.0], [98.6, 273.0], [98.7, 276.0], [98.8, 278.0], [98.9, 281.0], [99.0, 285.0], [99.1, 292.0], [99.2, 299.0], [99.3, 299.0], [99.4, 300.0], [99.5, 305.0], [99.6, 317.0], [99.7, 341.0], [99.8, 350.0], [99.9, 410.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 623496.0, "series": [{"data": [[0.0, 64340.0], [600.0, 9.0], [2400.0, 1.0], [2500.0, 4.0], [700.0, 13.0], [3000.0, 1.0], [200.0, 37897.0], [800.0, 2.0], [900.0, 2.0], [1000.0, 24.0], [1100.0, 128.0], [300.0, 4146.0], [1200.0, 64.0], [1400.0, 1.0], [1500.0, 10.0], [100.0, 623496.0], [400.0, 541.0], [1900.0, 1.0], [500.0, 51.0]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 730437.0, "series": [{"data": [[0.0, 730437.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 275.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.305309734513275, "minX": 1.68850008E12, "maxY": 25.0, "series": [{"data": [[1.68850128E12, 25.0], [1.6885029E12, 25.0], [1.68850008E12, 2.305309734513275], [1.6885023E12, 25.0], [1.68850452E12, 23.052978088673996], [1.6885017E12, 25.0], [1.68850392E12, 25.0], [1.68850068E12, 22.187471629596043], [1.6885011E12, 25.0], [1.68850332E12, 25.0], [1.68850146E12, 25.0], [1.68850368E12, 25.0], [1.68850026E12, 20.210584343991172], [1.6885047E12, 22.958803122289698], [1.68850308E12, 25.0], [1.6885041E12, 25.0], [1.68850086E12, 25.0], [1.68850248E12, 25.0], [1.68850188E12, 25.0], [1.6885035E12, 25.0], [1.68850014E12, 22.080823080186608], [1.68850194E12, 25.0], [1.68850416E12, 25.0], [1.68850074E12, 25.0], [1.68850134E12, 25.0], [1.68850356E12, 25.0], [1.68850296E12, 25.0], [1.68850458E12, 8.085488505747133], [1.68850398E12, 25.0], [1.68850236E12, 25.0], [1.68850032E12, 23.084833175455238], [1.68850272E12, 25.0], [1.68850434E12, 12.377203574016006], [1.68850092E12, 25.0], [1.68850374E12, 25.0], [1.68850212E12, 25.0], [1.68850152E12, 25.0], [1.68850314E12, 25.0], [1.6885005E12, 24.184909434381648], [1.68850254E12, 25.0], [1.68850476E12, 14.29790026246719], [1.68850482E12, 24.492250254553653], [1.68850098E12, 25.0], [1.6885032E12, 25.0], [1.6885026E12, 25.0], [1.68850422E12, 25.0], [1.688502E12, 25.0], [1.68850362E12, 25.0], [1.68850038E12, 6.632072313357864], [1.6885014E12, 25.0], [1.68850302E12, 25.0], [1.68850176E12, 25.0], [1.68850338E12, 25.0], [1.68850116E12, 25.0], [1.68850056E12, 10.568497284248684], [1.68850278E12, 25.0], [1.68850218E12, 25.0], [1.6885044E12, 6.914834717472715], [1.68850158E12, 25.0], [1.6885038E12, 25.0], [1.68850386E12, 25.0], [1.68850224E12, 25.0], [1.68850044E12, 20.420442319187124], [1.68850164E12, 25.0], [1.68850326E12, 25.0], [1.68850104E12, 25.0], [1.68850266E12, 25.0], [1.68850488E12, 8.98597081930415], [1.68850206E12, 25.0], [1.68850428E12, 24.023031278286208], [1.68850062E12, 8.650159987810419], [1.68850242E12, 25.0], [1.68850464E12, 20.073395526582072], [1.68850182E12, 25.0], [1.68850404E12, 25.0], [1.68850122E12, 25.0], [1.68850344E12, 25.0], [1.6885002E12, 18.011918346646294], [1.68850284E12, 25.0], [1.68850446E12, 22.159423384943846], [1.6885008E12, 25.0]], "isOverall": false, "label": "OM2M-Insertion Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68850488E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.4616352201258, "minX": 1.0, "maxY": 155.68954146695316, "series": [{"data": [[2.0, 23.99531250000006], [3.0, 27.164841669132855], [4.0, 36.40855374226219], [5.0, 49.33269476372926], [6.0, 54.74251662971177], [7.0, 68.97025100712726], [8.0, 73.51589802348914], [9.0, 65.25227113906347], [10.0, 79.52754716981131], [11.0, 82.55223193741381], [12.0, 87.95328399629972], [13.0, 105.84609533468534], [14.0, 100.22859084730408], [15.0, 105.51976770158579], [1.0, 19.4616352201258], [16.0, 118.48007457469114], [17.0, 116.74238468233251], [18.0, 129.7590661831368], [19.0, 128.71352389078518], [20.0, 128.2253036437246], [21.0, 134.01249232029505], [22.0, 136.01203883495157], [23.0, 140.65850366370944], [24.0, 150.52215189873436], [25.0, 155.68954146695316]], "isOverall": false, "label": "create cin", "isController": false}, {"data": [[23.508114477146542, 147.9299194915763]], "isOverall": false, "label": "create cin-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 621.5, "minX": 1.68850008E12, "maxY": 89804.86666666667, "series": [{"data": [[1.68850128E12, 24964.5], [1.6885029E12, 24120.25], [1.68850008E12, 621.5], [1.6885023E12, 28107.75], [1.68850452E12, 26732.75], [1.6885017E12, 23617.0], [1.68850392E12, 27764.0], [1.68850068E12, 24233.0], [1.6885011E12, 25022.25], [1.68850332E12, 26182.75], [1.68850146E12, 23749.0], [1.68850368E12, 27885.0], [1.68850026E12, 24942.5], [1.6885047E12, 25366.0], [1.68850308E12, 24348.5], [1.6885041E12, 27555.0], [1.68850086E12, 25082.75], [1.68850248E12, 27940.0], [1.68850188E12, 25069.0], [1.6885035E12, 28102.25], [1.68850014E12, 25927.0], [1.68850194E12, 27915.25], [1.68850416E12, 28006.0], [1.68850074E12, 25228.5], [1.68850134E12, 24862.75], [1.68850356E12, 27615.5], [1.68850296E12, 24926.0], [1.68850458E12, 19140.0], [1.68850398E12, 27967.5], [1.68850236E12, 27274.5], [1.68850032E12, 26127.75], [1.68850272E12, 24004.75], [1.68850434E12, 22775.5], [1.68850092E12, 26543.0], [1.68850374E12, 27827.25], [1.68850212E12, 27934.5], [1.68850152E12, 24035.0], [1.68850314E12, 25030.5], [1.6885005E12, 24747.25], [1.68850254E12, 25063.5], [1.68850476E12, 19010.566666666666], [1.68850482E12, 24307.25], [1.68850098E12, 26397.25], [1.6885032E12, 24846.25], [1.6885026E12, 28011.5], [1.68850422E12, 27849.25], [1.688502E12, 27824.5], [1.68850362E12, 27535.75], [1.68850038E12, 16428.5], [1.6885014E12, 23234.75], [1.68850302E12, 24780.25], [1.68850176E12, 26752.0], [1.68850338E12, 28278.25], [1.68850116E12, 24920.5], [1.68850056E12, 18227.0], [1.68850278E12, 24821.5], [1.68850218E12, 27489.0], [1.6885044E12, 16887.75], [1.68850158E12, 28006.0], [1.6885038E12, 27491.75], [1.68850386E12, 27788.75], [1.68850224E12, 28030.75], [1.68850044E12, 23003.75], [1.68850164E12, 25228.5], [1.68850326E12, 24208.25], [1.68850104E12, 23661.0], [1.68850266E12, 28003.25], [1.68850488E12, 4900.5], [1.68850206E12, 26947.25], [1.68850428E12, 27343.25], [1.68850062E12, 18048.25], [1.68850242E12, 28217.75], [1.68850464E12, 24466.75], [1.68850182E12, 27843.75], [1.68850404E12, 28198.5], [1.68850122E12, 22382.25], [1.68850344E12, 27150.75], [1.6885002E12, 21689.25], [1.68850284E12, 24931.5], [1.68850446E12, 25753.75], [1.6885008E12, 24406.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68850128E12, 79281.2], [1.6885029E12, 76600.06666666667], [1.68850008E12, 1973.7333333333333], [1.6885023E12, 89263.4], [1.68850452E12, 84896.73333333334], [1.6885017E12, 75001.86666666667], [1.68850392E12, 88171.73333333334], [1.68850068E12, 76958.13333333333], [1.6885011E12, 79464.6], [1.68850332E12, 83150.06666666667], [1.68850146E12, 75421.06666666667], [1.68850368E12, 88556.0], [1.68850026E12, 79211.33333333333], [1.6885047E12, 80556.26666666666], [1.68850308E12, 77324.93333333333], [1.6885041E12, 87508.0], [1.68850086E12, 79656.73333333334], [1.68850248E12, 88730.66666666667], [1.68850188E12, 79613.06666666667], [1.6885035E12, 89245.93333333333], [1.68850014E12, 82337.86666666667], [1.68850194E12, 88652.06666666667], [1.68850416E12, 88940.26666666666], [1.68850074E12, 80119.6], [1.68850134E12, 78958.06666666667], [1.68850356E12, 87700.13333333333], [1.68850296E12, 79158.93333333333], [1.68850458E12, 60784.0], [1.68850398E12, 88818.0], [1.68850236E12, 86617.2], [1.68850032E12, 82975.4], [1.68850272E12, 76233.26666666666], [1.68850434E12, 72329.46666666666], [1.68850092E12, 84294.13333333333], [1.68850374E12, 88372.6], [1.68850212E12, 88713.2], [1.68850152E12, 76329.33333333333], [1.68850314E12, 79490.8], [1.6885005E12, 78591.26666666666], [1.68850254E12, 79595.6], [1.68850476E12, 59858.26666666667], [1.68850482E12, 77193.93333333333], [1.68850098E12, 83831.26666666666], [1.6885032E12, 78905.66666666667], [1.6885026E12, 88957.73333333334], [1.68850422E12, 88442.46666666666], [1.688502E12, 88363.86666666667], [1.68850362E12, 87446.86666666667], [1.68850038E12, 52172.933333333334], [1.6885014E12, 73787.93333333333], [1.68850302E12, 78696.06666666667], [1.68850176E12, 84957.86666666667], [1.68850338E12, 89804.86666666667], [1.68850116E12, 79141.46666666666], [1.68850056E12, 57884.53333333333], [1.68850278E12, 78827.06666666667], [1.68850218E12, 87298.4], [1.6885044E12, 53631.4], [1.68850158E12, 88940.26666666666], [1.6885038E12, 87307.13333333333], [1.68850386E12, 88250.33333333333], [1.68850224E12, 89018.86666666667], [1.68850044E12, 73054.33333333333], [1.68850164E12, 80119.6], [1.68850326E12, 76879.53333333334], [1.68850104E12, 75141.6], [1.68850266E12, 88931.53333333334], [1.68850488E12, 15562.8], [1.68850206E12, 85577.93333333333], [1.68850428E12, 86835.53333333334], [1.68850062E12, 57316.86666666667], [1.68850242E12, 89612.73333333334], [1.68850464E12, 77700.46666666666], [1.68850182E12, 88425.0], [1.68850404E12, 89551.6], [1.68850122E12, 71080.6], [1.68850344E12, 86224.2], [1.6885002E12, 68879.8], [1.68850284E12, 79176.4], [1.68850446E12, 81787.66666666667], [1.6885008E12, 77508.33333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68850488E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.486725663716797, "minX": 1.68850008E12, "maxY": 183.49305811524727, "series": [{"data": [[1.68850128E12, 163.89226701916823], [1.6885029E12, 170.1825333485345], [1.68850008E12, 24.486725663716797], [1.6885023E12, 145.03580862929175], [1.68850452E12, 139.8517642217879], [1.6885017E12, 173.2782952957613], [1.68850392E12, 147.45423930269368], [1.68850068E12, 148.61575124829713], [1.6885011E12, 163.98955929222967], [1.68850332E12, 156.1905262052303], [1.68850146E12, 172.8552570634554], [1.68850368E12, 146.24654832347144], [1.68850026E12, 125.24167585446486], [1.6885047E12, 147.57903295750222], [1.68850308E12, 168.56652360515096], [1.6885041E12, 147.9177644710573], [1.68850086E12, 163.92763951321055], [1.68850248E12, 145.95354330708633], [1.68850188E12, 163.05967529618223], [1.6885035E12, 145.26626871513838], [1.68850014E12, 132.31639796351325], [1.68850194E12, 146.15013299182345], [1.68850416E12, 145.78701885310332], [1.68850074E12, 163.0163505559186], [1.68850134E12, 164.69538767835488], [1.68850356E12, 147.92471619199378], [1.68850296E12, 164.60205207414003], [1.68850458E12, 59.84712643678151], [1.68850398E12, 145.58053097345098], [1.68850236E12, 149.54738858640806], [1.68850032E12, 142.80096831912476], [1.68850272E12, 170.5765838011231], [1.68850434E12, 86.64235691861853], [1.68850092E12, 154.0776004973066], [1.68850374E12, 146.58434627927764], [1.68850212E12, 145.83333333333283], [1.68850152E12, 171.11464530892445], [1.68850314E12, 163.9578114700064], [1.6885005E12, 160.29292143571496], [1.68850254E12, 163.0249067368885], [1.68850476E12, 102.40288713910778], [1.68850482E12, 165.42798959158273], [1.68850098E12, 154.99916657985275], [1.6885032E12, 165.35517432208007], [1.6885026E12, 145.75593952483854], [1.68850422E12, 146.56176557716952], [1.688502E12, 146.8101403439411], [1.68850362E12, 148.27614101667783], [1.68850038E12, 60.03716103113485], [1.6885014E12, 176.8185584092792], [1.68850302E12, 165.569748085673], [1.68850176E12, 152.67865953947376], [1.68850338E12, 144.31459690751768], [1.68850116E12, 164.9336790995368], [1.68850056E12, 83.13488231744118], [1.68850278E12, 165.2460669177931], [1.68850218E12, 148.74129651860716], [1.6885044E12, 55.13743689952766], [1.68850158E12, 145.32069913589936], [1.6885038E12, 148.64449334800418], [1.68850386E12, 146.5828797624931], [1.68850224E12, 145.4357892671436], [1.68850044E12, 142.189958158996], [1.68850164E12, 162.63930673642918], [1.68850326E12, 169.57946154719968], [1.68850104E12, 173.19072524407292], [1.68850266E12, 145.6027693214178], [1.68850488E12, 77.5308641975307], [1.68850206E12, 151.5834268802936], [1.68850428E12, 143.8406919440813], [1.68850062E12, 72.72451622733522], [1.68850242E12, 144.66972030016484], [1.68850464E12, 128.83960885691837], [1.68850182E12, 145.4891851851849], [1.68850404E12, 144.86415057538534], [1.68850122E12, 183.49305811524727], [1.68850344E12, 150.2457206522837], [1.6885002E12, 112.69177126917717], [1.68850284E12, 164.95951908228557], [1.68850446E12, 139.85136145221605], [1.6885008E12, 167.6700845070425]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68850488E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.438053097345133, "minX": 1.68850008E12, "maxY": 183.48236884138063, "series": [{"data": [[1.68850128E12, 163.88025996915692], [1.6885029E12, 170.17079010375068], [1.68850008E12, 24.438053097345133], [1.6885023E12, 145.02710106643227], [1.68850452E12, 139.8421973048038], [1.6885017E12, 173.26734979040475], [1.68850392E12, 147.4422543581616], [1.68850068E12, 148.60213345438038], [1.6885011E12, 163.9758215188482], [1.68850332E12, 156.18044323075225], [1.68850146E12, 172.84263547938824], [1.68850368E12, 146.23550295858035], [1.68850026E12, 125.2314222712237], [1.6885047E12, 147.56624024284477], [1.68850308E12, 168.55376101197223], [1.6885041E12, 147.9086826347303], [1.68850086E12, 163.91601798048453], [1.68850248E12, 145.9412401574797], [1.68850188E12, 163.05144800351027], [1.6885035E12, 145.2556023094243], [1.68850014E12, 132.29847263470583], [1.68850194E12, 146.13929662102268], [1.68850416E12, 145.7787706205817], [1.68850074E12, 163.00632221495573], [1.68850134E12, 164.68443756221652], [1.68850356E12, 147.91435968930477], [1.68850296E12, 164.59245366284227], [1.68850458E12, 59.834626436781264], [1.68850398E12, 145.56794493608666], [1.68850236E12, 149.53589433353554], [1.68850032E12, 142.78981159877898], [1.68850272E12, 170.56615878107448], [1.68850434E12, 86.6308862593576], [1.68850092E12, 154.06568586821288], [1.68850374E12, 146.57149915999588], [1.68850212E12, 145.82309509746017], [1.68850152E12, 171.1030892448519], [1.68850314E12, 163.94539661612828], [1.6885005E12, 160.28225358373243], [1.68850254E12, 163.01426377002414], [1.68850476E12, 101.33624963546208], [1.68850482E12, 165.41712863446105], [1.68850098E12, 154.9884362954466], [1.6885032E12, 165.34388489208595], [1.6885026E12, 145.74484586687666], [1.68850422E12, 146.55031104966926], [1.688502E12, 146.79818145878556], [1.68850362E12, 148.26565464895677], [1.68850038E12, 60.026113157013896], [1.6885014E12, 176.80956326192435], [1.68850302E12, 165.559649317501], [1.68850176E12, 152.66817434210515], [1.68850338E12, 144.30380239229808], [1.68850116E12, 164.92275435886134], [1.68850056E12, 83.12598068799035], [1.68850278E12, 165.23465543984076], [1.68850218E12, 148.73019207683097], [1.6885044E12, 55.126363784400105], [1.68850158E12, 145.31274548311083], [1.6885038E12, 148.63479043713014], [1.68850386E12, 146.57199406234548], [1.68850224E12, 145.42362405572462], [1.68850044E12, 142.17836222355018], [1.68850164E12, 162.6308044473512], [1.68850326E12, 169.56889696694256], [1.68850104E12, 173.17956764295664], [1.68850266E12, 145.5911813807326], [1.68850488E12, 77.51795735129073], [1.68850206E12, 151.57495662822774], [1.68850428E12, 143.82761741928923], [1.68850062E12, 72.71598354411094], [1.68850242E12, 144.6566611441371], [1.68850464E12, 128.82702034393657], [1.68850182E12, 145.47743209876631], [1.68850404E12, 144.85654378779026], [1.68850122E12, 183.48236884138063], [1.68850344E12, 150.2348830142821], [1.6885002E12, 112.67630277672144], [1.68850284E12, 164.9493712773], [1.68850446E12, 139.84004271222716], [1.6885008E12, 167.66084507042285]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68850488E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.9469026548672566, "minX": 1.68850008E12, "maxY": 11.36706808707733, "series": [{"data": [[1.68850128E12, 5.882132628332229], [1.6885029E12, 6.50313533234525], [1.68850008E12, 3.9469026548672566], [1.6885023E12, 5.44868408179238], [1.68850452E12, 8.3953296985907], [1.6885017E12, 6.694340940847699], [1.68850392E12, 5.876386687797153], [1.68850068E12, 6.5516341352700875], [1.6885011E12, 6.27464556544676], [1.68850332E12, 6.110387564331481], [1.68850146E12, 11.36706808707733], [1.68850368E12, 5.799211045364886], [1.68850026E12, 7.063836824696807], [1.6885047E12, 8.37088031222895], [1.68850308E12, 5.506889541450193], [1.6885041E12, 5.634031936127775], [1.68850086E12, 5.650367284289008], [1.68850248E12, 5.332283464566943], [1.68850188E12, 6.85816147433087], [1.6885035E12, 5.18759174087485], [1.68850014E12, 5.04645736105215], [1.68850194E12, 5.306275243818346], [1.68850416E12, 5.49076983503534], [1.68850074E12, 6.6633965554828745], [1.68850134E12, 7.056520296427389], [1.68850356E12, 8.413563035251908], [1.68850296E12, 6.103375992939093], [1.68850458E12, 5.106178160919545], [1.68850398E12, 5.946705998033435], [1.68850236E12, 5.841802782819118], [1.68850032E12, 5.7560256815072295], [1.68850272E12, 6.213197388016975], [1.68850434E12, 5.93347017628591], [1.68850092E12, 6.231351015333619], [1.68850374E12, 5.452020950686823], [1.68850212E12, 5.792085056113374], [1.68850152E12, 5.509153318077811], [1.68850314E12, 6.737420347176441], [1.6885005E12, 7.109123235915093], [1.68850254E12, 6.498354180381831], [1.68850476E12, 9.134878973461657], [1.68850482E12, 11.082362258174035], [1.68850098E12, 5.1095947494530645], [1.6885032E12, 7.186718317653576], [1.6885026E12, 5.727174553308473], [1.68850422E12, 5.944801026957642], [1.688502E12, 6.660604862621095], [1.68850362E12, 5.564366323779109], [1.68850038E12, 5.187646468028127], [1.6885014E12, 5.58480293525857], [1.68850302E12, 7.078237709466218], [1.68850176E12, 5.918791118421079], [1.68850338E12, 5.529903724593999], [1.68850116E12, 6.689141469874212], [1.68850056E12, 5.309444779722374], [1.68850278E12, 7.158874362951478], [1.68850218E12, 5.3274309723889495], [1.6885044E12, 6.44764696303535], [1.68850158E12, 5.781716417910465], [1.6885038E12, 6.747824347304181], [1.68850386E12, 5.680950024740256], [1.68850224E12, 5.371235161385253], [1.68850044E12, 5.968679019725026], [1.68850164E12, 6.576738609112704], [1.68850326E12, 7.782801317732555], [1.68850104E12, 6.244072524407263], [1.68850266E12, 5.693705194932751], [1.68850488E12, 4.030303030303034], [1.68850206E12, 8.201449127461988], [1.68850428E12, 5.48446143015184], [1.68850062E12, 5.666311138198989], [1.68850242E12, 6.170841048630731], [1.68850464E12, 6.065752500842979], [1.68850182E12, 5.574222222222234], [1.68850404E12, 5.26370196996295], [1.68850122E12, 5.986361960928884], [1.68850344E12, 5.355616327357414], [1.6885002E12, 7.042982122480052], [1.68850284E12, 7.479263181116248], [1.68850446E12, 8.005125467164962], [1.6885008E12, 7.421971830985885]], "isOverall": false, "label": "create cin", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68850488E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.68850008E12, "maxY": 2594.0, "series": [{"data": [[1.68850128E12, 420.0], [1.6885029E12, 421.0], [1.68850008E12, 259.0], [1.6885023E12, 288.0], [1.68850452E12, 1219.0], [1.6885017E12, 407.0], [1.68850392E12, 367.0], [1.68850068E12, 384.0], [1.6885011E12, 434.0], [1.68850332E12, 415.0], [1.68850146E12, 1231.0], [1.68850368E12, 502.0], [1.68850026E12, 1121.0], [1.6885047E12, 1118.0], [1.68850308E12, 411.0], [1.6885041E12, 470.0], [1.68850086E12, 356.0], [1.68850248E12, 352.0], [1.68850188E12, 519.0], [1.6885035E12, 361.0], [1.68850014E12, 354.0], [1.68850194E12, 342.0], [1.68850416E12, 388.0], [1.68850074E12, 310.0], [1.68850134E12, 428.0], [1.68850356E12, 1173.0], [1.68850296E12, 395.0], [1.68850458E12, 348.0], [1.68850398E12, 300.0], [1.68850236E12, 582.0], [1.68850032E12, 331.0], [1.68850272E12, 432.0], [1.68850434E12, 376.0], [1.68850092E12, 307.0], [1.68850374E12, 318.0], [1.68850212E12, 501.0], [1.68850152E12, 451.0], [1.68850314E12, 1162.0], [1.6885005E12, 387.0], [1.68850254E12, 500.0], [1.68850476E12, 2594.0], [1.68850482E12, 1558.0], [1.68850098E12, 337.0], [1.6885032E12, 391.0], [1.6885026E12, 397.0], [1.68850422E12, 378.0], [1.688502E12, 429.0], [1.68850362E12, 410.0], [1.68850038E12, 1162.0], [1.6885014E12, 475.0], [1.68850302E12, 1249.0], [1.68850176E12, 449.0], [1.68850338E12, 389.0], [1.68850116E12, 423.0], [1.68850056E12, 318.0], [1.68850278E12, 400.0], [1.68850218E12, 326.0], [1.6885044E12, 375.0], [1.68850158E12, 299.0], [1.6885038E12, 1158.0], [1.68850386E12, 393.0], [1.68850224E12, 411.0], [1.68850044E12, 439.0], [1.68850164E12, 1145.0], [1.68850326E12, 1171.0], [1.68850104E12, 402.0], [1.68850266E12, 422.0], [1.68850488E12, 347.0], [1.68850206E12, 1205.0], [1.68850428E12, 450.0], [1.68850062E12, 386.0], [1.68850242E12, 347.0], [1.68850464E12, 421.0], [1.68850182E12, 321.0], [1.68850404E12, 283.0], [1.68850122E12, 451.0], [1.68850344E12, 1189.0], [1.6885002E12, 1250.0], [1.68850284E12, 1175.0], [1.68850446E12, 1199.0], [1.6885008E12, 1179.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68850128E12, 179.0], [1.6885029E12, 222.40000000000055], [1.68850008E12, 30.0], [1.6885023E12, 156.0], [1.68850452E12, 153.0], [1.6885017E12, 221.10000000000036], [1.68850392E12, 164.0], [1.68850068E12, 171.0], [1.6885011E12, 179.0], [1.68850332E12, 179.0], [1.68850146E12, 201.0], [1.68850368E12, 168.0], [1.68850026E12, 153.0], [1.6885047E12, 170.0], [1.68850308E12, 191.0], [1.6885041E12, 169.0], [1.68850086E12, 179.0], [1.68850248E12, 164.0], [1.68850188E12, 201.0], [1.6885035E12, 155.0], [1.68850014E12, 160.0], [1.68850194E12, 160.0], [1.68850416E12, 157.0], [1.68850074E12, 179.0], [1.68850134E12, 180.0], [1.68850356E12, 157.0], [1.68850296E12, 179.0], [1.68850458E12, 149.0], [1.68850398E12, 168.0], [1.68850236E12, 178.0], [1.68850032E12, 169.0], [1.68850272E12, 213.0], [1.68850434E12, 150.0], [1.68850092E12, 175.0], [1.68850374E12, 166.0], [1.68850212E12, 162.0], [1.68850152E12, 203.0], [1.68850314E12, 180.0], [1.6885005E12, 179.0], [1.68850254E12, 205.0], [1.68850476E12, 161.0], [1.68850482E12, 171.0], [1.68850098E12, 200.0], [1.6885032E12, 180.40000000000055], [1.6885026E12, 157.0], [1.68850422E12, 162.0], [1.688502E12, 167.0], [1.68850362E12, 168.0], [1.68850038E12, 149.0], [1.6885014E12, 219.0], [1.68850302E12, 180.0], [1.68850176E12, 192.0], [1.68850338E12, 153.0], [1.68850116E12, 179.0], [1.68850056E12, 150.0], [1.68850278E12, 179.0], [1.68850218E12, 176.0], [1.6885044E12, 147.0], [1.68850158E12, 164.0], [1.6885038E12, 168.0], [1.68850386E12, 166.0], [1.68850224E12, 157.60000000000036], [1.68850044E12, 169.0], [1.68850164E12, 203.0], [1.68850326E12, 194.0], [1.68850104E12, 220.0], [1.68850266E12, 167.0], [1.68850488E12, 149.0], [1.68850206E12, 173.0], [1.68850428E12, 164.0], [1.68850062E12, 150.0], [1.68850242E12, 159.0], [1.68850464E12, 172.0], [1.68850182E12, 169.0], [1.68850404E12, 156.0], [1.68850122E12, 255.0], [1.68850344E12, 170.0], [1.6885002E12, 152.0], [1.68850284E12, 179.0], [1.68850446E12, 174.0], [1.6885008E12, 195.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68850128E12, 283.0], [1.6885029E12, 307.0], [1.68850008E12, 238.62999999999968], [1.6885023E12, 241.0], [1.68850452E12, 241.0], [1.6885017E12, 329.0], [1.68850392E12, 254.0], [1.68850068E12, 263.8700000000008], [1.6885011E12, 285.0], [1.68850332E12, 264.0], [1.68850146E12, 323.0], [1.68850368E12, 256.0], [1.68850026E12, 301.0], [1.6885047E12, 282.75], [1.68850308E12, 289.0], [1.6885041E12, 265.0], [1.68850086E12, 282.0], [1.68850248E12, 243.0], [1.68850188E12, 343.0], [1.6885035E12, 240.0], [1.68850014E12, 240.0], [1.68850194E12, 242.95999999999913], [1.68850416E12, 240.0], [1.68850074E12, 277.25], [1.68850134E12, 280.0], [1.68850356E12, 240.0], [1.68850296E12, 279.0], [1.68850458E12, 238.39000000000033], [1.68850398E12, 240.0], [1.68850236E12, 265.0], [1.68850032E12, 250.0], [1.68850272E12, 304.50000000000364], [1.68850434E12, 240.0], [1.68850092E12, 266.0], [1.68850374E12, 242.0], [1.68850212E12, 253.0], [1.68850152E12, 300.0], [1.68850314E12, 279.0], [1.6885005E12, 299.0], [1.68850254E12, 340.0], [1.68850476E12, 223.0], [1.68850482E12, 299.0], [1.68850098E12, 299.0], [1.6885032E12, 279.0], [1.6885026E12, 255.0], [1.68850422E12, 246.0], [1.688502E12, 248.85999999999694], [1.68850362E12, 260.0], [1.68850038E12, 301.0], [1.6885014E12, 320.0], [1.68850302E12, 281.0], [1.68850176E12, 289.0], [1.68850338E12, 240.0], [1.68850116E12, 294.0], [1.68850056E12, 231.55000000000018], [1.68850278E12, 299.0], [1.68850218E12, 266.0], [1.6885044E12, 239.0], [1.68850158E12, 242.0], [1.6885038E12, 291.0], [1.68850386E12, 250.0], [1.68850224E12, 240.0], [1.68850044E12, 285.34000000000015], [1.68850164E12, 300.0], [1.68850326E12, 313.63999999999214], [1.68850104E12, 316.0], [1.68850266E12, 241.0], [1.68850488E12, 195.0], [1.68850206E12, 299.0], [1.68850428E12, 255.0], [1.68850062E12, 239.0], [1.68850242E12, 240.0], [1.68850464E12, 265.0], [1.68850182E12, 243.0], [1.68850404E12, 240.0], [1.68850122E12, 344.0], [1.68850344E12, 266.0], [1.6885002E12, 259.1199999999999], [1.68850284E12, 299.3299999999999], [1.68850446E12, 273.0], [1.6885008E12, 300.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68850128E12, 239.0], [1.6885029E12, 263.0], [1.68850008E12, 32.0], [1.6885023E12, 186.0], [1.68850452E12, 194.0], [1.6885017E12, 281.0], [1.68850392E12, 190.0], [1.68850068E12, 195.0], [1.6885011E12, 240.0], [1.68850332E12, 239.0], [1.68850146E12, 271.0], [1.68850368E12, 194.0], [1.68850026E12, 193.0], [1.6885047E12, 216.0], [1.68850308E12, 262.0], [1.6885041E12, 194.0], [1.68850086E12, 235.0], [1.68850248E12, 192.9499999999989], [1.68850188E12, 258.0], [1.6885035E12, 194.0], [1.68850014E12, 182.0], [1.68850194E12, 194.0], [1.68850416E12, 194.0], [1.68850074E12, 239.0], [1.68850134E12, 257.0], [1.68850356E12, 191.0], [1.68850296E12, 240.0], [1.68850458E12, 150.0], [1.68850398E12, 194.0], [1.68850236E12, 198.0], [1.68850032E12, 194.0], [1.68850272E12, 266.0], [1.68850434E12, 169.84999999999945], [1.68850092E12, 195.0], [1.68850374E12, 194.0], [1.68850212E12, 186.0], [1.68850152E12, 259.9499999999989], [1.68850314E12, 240.0], [1.6885005E12, 239.0], [1.68850254E12, 260.0], [1.68850476E12, 170.0], [1.68850482E12, 199.0], [1.68850098E12, 238.0], [1.6885032E12, 242.0], [1.6885026E12, 191.0], [1.68850422E12, 195.0], [1.688502E12, 193.0], [1.68850362E12, 195.0], [1.68850038E12, 151.25], [1.6885014E12, 274.0], [1.68850302E12, 240.0], [1.68850176E12, 207.0], [1.68850338E12, 180.0], [1.68850116E12, 240.0], [1.68850056E12, 161.0], [1.68850278E12, 245.0], [1.68850218E12, 194.0], [1.6885044E12, 150.0], [1.68850158E12, 188.0], [1.6885038E12, 195.0], [1.68850386E12, 195.0], [1.68850224E12, 192.0], [1.68850044E12, 195.0], [1.68850164E12, 250.0], [1.68850326E12, 260.0], [1.68850104E12, 262.0], [1.68850266E12, 194.0], [1.68850488E12, 168.0], [1.68850206E12, 194.0], [1.68850428E12, 194.0], [1.68850062E12, 152.0], [1.68850242E12, 183.0], [1.68850464E12, 195.0], [1.68850182E12, 194.0], [1.68850404E12, 180.0], [1.68850122E12, 299.0], [1.68850344E12, 197.0], [1.6885002E12, 180.0], [1.68850284E12, 240.0], [1.68850446E12, 195.0], [1.6885008E12, 263.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68850128E12, 11.0], [1.6885029E12, 12.0], [1.68850008E12, 10.0], [1.6885023E12, 9.0], [1.68850452E12, 11.0], [1.6885017E12, 11.0], [1.68850392E12, 10.0], [1.68850068E12, 11.0], [1.6885011E12, 12.0], [1.68850332E12, 10.0], [1.68850146E12, 13.0], [1.68850368E12, 11.0], [1.68850026E12, 8.0], [1.6885047E12, 10.0], [1.68850308E12, 11.0], [1.6885041E12, 10.0], [1.68850086E12, 11.0], [1.68850248E12, 11.0], [1.68850188E12, 10.0], [1.6885035E12, 12.0], [1.68850014E12, 9.0], [1.68850194E12, 11.0], [1.68850416E12, 11.0], [1.68850074E12, 13.0], [1.68850134E12, 12.0], [1.68850356E12, 11.0], [1.68850296E12, 12.0], [1.68850458E12, 8.0], [1.68850398E12, 10.0], [1.68850236E12, 11.0], [1.68850032E12, 10.0], [1.68850272E12, 11.0], [1.68850434E12, 10.0], [1.68850092E12, 10.0], [1.68850374E12, 11.0], [1.68850212E12, 11.0], [1.68850152E12, 11.0], [1.68850314E12, 10.0], [1.6885005E12, 12.0], [1.68850254E12, 11.0], [1.68850476E12, 11.0], [1.68850482E12, 15.0], [1.68850098E12, 11.0], [1.6885032E12, 12.0], [1.6885026E12, 11.0], [1.68850422E12, 9.0], [1.688502E12, 10.0], [1.68850362E12, 11.0], [1.68850038E12, 9.0], [1.6885014E12, 11.0], [1.68850302E12, 10.0], [1.68850176E12, 11.0], [1.68850338E12, 11.0], [1.68850116E12, 12.0], [1.68850056E12, 10.0], [1.68850278E12, 12.0], [1.68850218E12, 10.0], [1.6885044E12, 9.0], [1.68850158E12, 10.0], [1.6885038E12, 10.0], [1.68850386E12, 11.0], [1.68850224E12, 10.0], [1.68850044E12, 9.0], [1.68850164E12, 13.0], [1.68850326E12, 11.0], [1.68850104E12, 12.0], [1.68850266E12, 9.0], [1.68850488E12, 10.0], [1.68850206E12, 10.0], [1.68850428E12, 11.0], [1.68850062E12, 9.0], [1.68850242E12, 10.0], [1.68850464E12, 10.0], [1.68850182E12, 8.0], [1.68850404E12, 11.0], [1.68850122E12, 12.0], [1.68850344E12, 12.0], [1.6885002E12, 9.0], [1.68850284E12, 12.0], [1.68850446E12, 10.0], [1.6885008E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68850128E12, 158.0], [1.6885029E12, 159.0], [1.68850008E12, 16.0], [1.6885023E12, 143.0], [1.68850452E12, 140.0], [1.6885017E12, 161.0], [1.68850392E12, 143.0], [1.68850068E12, 150.0], [1.6885011E12, 158.0], [1.68850332E12, 152.0], [1.68850146E12, 159.0], [1.68850368E12, 142.0], [1.68850026E12, 138.0], [1.6885047E12, 149.0], [1.68850308E12, 159.0], [1.6885041E12, 144.0], [1.68850086E12, 158.0], [1.68850248E12, 144.0], [1.68850188E12, 149.0], [1.6885035E12, 142.0], [1.68850014E12, 143.0], [1.68850194E12, 143.0], [1.68850416E12, 143.0], [1.68850074E12, 158.0], [1.68850134E12, 159.0], [1.68850356E12, 143.0], [1.68850296E12, 158.0], [1.68850458E12, 45.0], [1.68850398E12, 142.0], [1.68850236E12, 145.0], [1.68850032E12, 144.0], [1.68850272E12, 158.0], [1.68850434E12, 78.0], [1.68850092E12, 153.0], [1.68850374E12, 143.0], [1.68850212E12, 143.0], [1.68850152E12, 160.0], [1.68850314E12, 158.0], [1.6885005E12, 157.0], [1.68850254E12, 149.0], [1.68850476E12, 95.0], [1.68850482E12, 158.0], [1.68850098E12, 145.0], [1.6885032E12, 158.0], [1.6885026E12, 142.0], [1.68850422E12, 143.0], [1.688502E12, 144.0], [1.68850362E12, 143.0], [1.68850038E12, 47.0], [1.6885014E12, 160.0], [1.68850302E12, 158.0], [1.68850176E12, 145.0], [1.68850338E12, 142.0], [1.68850116E12, 158.0], [1.68850056E12, 81.0], [1.68850278E12, 158.0], [1.68850218E12, 145.0], [1.6885044E12, 40.0], [1.68850158E12, 143.0], [1.6885038E12, 143.0], [1.68850386E12, 143.0], [1.68850224E12, 143.0], [1.68850044E12, 149.0], [1.68850164E12, 149.0], [1.68850326E12, 160.0], [1.68850104E12, 159.0], [1.68850266E12, 143.0], [1.68850488E12, 81.0], [1.68850206E12, 144.0], [1.68850428E12, 141.0], [1.68850062E12, 61.0], [1.68850242E12, 143.0], [1.68850464E12, 137.0], [1.68850182E12, 144.0], [1.68850404E12, 142.0], [1.68850122E12, 161.0], [1.68850344E12, 144.0], [1.6885002E12, 129.0], [1.68850284E12, 158.0], [1.68850446E12, 140.0], [1.6885008E12, 158.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68850488E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 1903.0, "series": [{"data": [[2.0, 77.5], [4.0, 13.0], [5.0, 13.5], [6.0, 33.5], [7.0, 17.0], [14.0, 1028.0], [15.0, 12.0], [17.0, 20.0], [18.0, 16.0], [19.0, 28.0], [21.0, 15.0], [22.0, 13.5], [23.0, 122.0], [24.0, 75.0], [25.0, 179.0], [26.0, 135.5], [27.0, 155.0], [28.0, 122.5], [30.0, 133.0], [31.0, 121.5], [32.0, 24.0], [33.0, 27.0], [34.0, 90.0], [35.0, 150.0], [36.0, 117.5], [37.0, 143.0], [39.0, 29.0], [41.0, 40.0], [40.0, 14.0], [42.0, 149.5], [43.0, 118.0], [45.0, 150.0], [44.0, 150.0], [47.0, 149.0], [46.0, 149.5], [48.0, 149.0], [49.0, 35.0], [51.0, 149.0], [50.0, 149.0], [53.0, 114.0], [52.0, 239.0], [55.0, 122.0], [54.0, 145.0], [57.0, 149.0], [56.0, 160.5], [58.0, 149.0], [59.0, 150.0], [61.0, 149.0], [60.0, 149.0], [62.0, 22.0], [64.0, 78.0], [67.0, 13.0], [66.0, 164.0], [65.0, 150.0], [68.0, 150.0], [70.0, 149.0], [71.0, 16.0], [74.0, 20.0], [75.0, 150.0], [73.0, 179.0], [72.0, 150.0], [78.0, 13.0], [77.0, 17.5], [76.0, 150.0], [79.0, 170.0], [83.0, 149.0], [80.0, 150.0], [82.0, 149.0], [81.0, 150.0], [84.0, 150.0], [86.0, 151.0], [87.0, 150.0], [85.0, 260.0], [89.0, 148.5], [90.0, 150.0], [91.0, 150.0], [88.0, 18.0], [93.0, 150.0], [95.0, 150.0], [92.0, 150.0], [94.0, 180.0], [99.0, 149.0], [96.0, 150.0], [98.0, 149.0], [97.0, 149.0], [100.0, 183.0], [101.0, 150.0], [102.0, 179.0], [103.0, 180.0], [106.0, 150.0], [104.0, 201.0], [107.0, 170.0], [105.0, 153.0], [111.0, 181.0], [109.0, 176.0], [110.0, 179.0], [108.0, 180.0], [114.0, 164.0], [115.0, 162.0], [112.0, 180.0], [113.0, 191.0], [117.0, 167.0], [119.0, 159.0], [116.0, 161.0], [118.0, 158.0], [122.0, 150.0], [121.0, 179.0], [123.0, 162.5], [120.0, 178.5], [125.0, 191.0], [127.0, 177.0], [126.0, 166.0], [124.0, 170.0], [134.0, 157.0], [129.0, 163.0], [131.0, 168.0], [132.0, 161.0], [133.0, 158.0], [128.0, 159.0], [130.0, 167.0], [135.0, 159.0], [140.0, 156.0], [138.0, 157.0], [139.0, 157.0], [143.0, 157.0], [136.0, 156.0], [141.0, 156.0], [137.0, 158.0], [142.0, 155.0], [147.0, 152.0], [151.0, 155.0], [149.0, 150.0], [145.0, 150.0], [150.0, 158.0], [146.0, 150.0], [144.0, 156.0], [148.0, 150.0], [158.0, 156.0], [156.0, 150.0], [152.0, 152.0], [154.0, 150.0], [155.0, 150.0], [153.0, 150.0], [159.0, 151.0], [157.0, 152.0], [167.0, 156.0], [161.0, 155.0], [164.0, 156.0], [166.0, 156.0], [163.0, 156.0], [162.0, 156.0], [160.0, 156.0], [165.0, 156.0], [173.0, 143.0], [175.0, 140.0], [172.0, 143.0], [174.0, 102.5], [170.0, 142.0], [169.0, 156.0], [171.0, 152.0], [168.0, 155.0], [180.0, 143.0], [178.0, 148.0], [179.0, 146.0], [177.0, 149.0], [176.0, 147.0], [181.0, 145.0], [183.0, 140.0], [182.0, 141.0], [191.0, 137.0], [188.0, 137.0], [186.0, 139.0], [190.0, 139.0], [184.0, 139.0], [185.0, 140.0], [187.0, 139.0], [189.0, 139.0], [196.0, 139.0], [197.0, 138.0], [198.0, 138.0], [195.0, 139.0], [192.0, 139.0], [193.0, 139.0], [194.0, 140.0], [200.0, 137.0], [1.0, 804.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 1903.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1028.0, "series": [{"data": [[2.0, 77.5], [4.0, 13.0], [5.0, 13.5], [6.0, 33.5], [7.0, 17.0], [14.0, 1028.0], [15.0, 12.0], [17.0, 20.0], [18.0, 16.0], [19.0, 28.0], [21.0, 15.0], [22.0, 13.5], [23.0, 122.0], [24.0, 75.0], [25.0, 179.0], [26.0, 135.5], [27.0, 155.0], [28.0, 122.5], [30.0, 133.0], [31.0, 121.5], [32.0, 24.0], [33.0, 27.0], [34.0, 90.0], [35.0, 150.0], [36.0, 117.5], [37.0, 143.0], [39.0, 29.0], [41.0, 40.0], [40.0, 14.0], [42.0, 149.0], [43.0, 118.0], [45.0, 150.0], [44.0, 150.0], [47.0, 149.0], [46.0, 149.5], [48.0, 149.0], [49.0, 35.0], [51.0, 149.0], [50.0, 149.0], [53.0, 114.0], [52.0, 239.0], [55.0, 122.0], [54.0, 145.0], [57.0, 149.0], [56.0, 160.5], [58.0, 149.0], [59.0, 150.0], [61.0, 149.0], [60.0, 149.0], [62.0, 22.0], [64.0, 78.0], [67.0, 13.0], [66.0, 164.0], [65.0, 150.0], [68.0, 150.0], [70.0, 149.0], [71.0, 16.0], [74.0, 20.0], [75.0, 150.0], [73.0, 179.0], [72.0, 150.0], [78.0, 13.0], [77.0, 17.5], [76.0, 150.0], [79.0, 170.0], [83.0, 149.0], [80.0, 150.0], [82.0, 149.0], [81.0, 150.0], [84.0, 150.0], [86.0, 151.0], [87.0, 150.0], [85.0, 260.0], [89.0, 148.5], [90.0, 150.0], [91.0, 150.0], [88.0, 18.0], [93.0, 150.0], [95.0, 150.0], [92.0, 150.0], [94.0, 180.0], [99.0, 149.0], [96.0, 150.0], [98.0, 149.0], [97.0, 149.0], [100.0, 183.0], [101.0, 150.0], [102.0, 179.0], [103.0, 180.0], [106.0, 150.0], [104.0, 201.0], [107.0, 170.0], [105.0, 153.0], [111.0, 181.0], [109.0, 176.0], [110.0, 179.0], [108.0, 180.0], [114.0, 164.0], [115.0, 162.0], [112.0, 180.0], [113.0, 191.0], [117.0, 167.0], [119.0, 159.0], [116.0, 161.0], [118.0, 158.0], [122.0, 150.0], [121.0, 179.0], [123.0, 162.5], [120.0, 178.0], [125.0, 191.0], [127.0, 177.0], [126.0, 166.0], [124.0, 170.0], [134.0, 157.0], [129.0, 163.0], [131.0, 168.0], [132.0, 161.0], [133.0, 158.0], [128.0, 159.0], [130.0, 167.0], [135.0, 159.0], [140.0, 156.0], [138.0, 157.0], [139.0, 157.0], [143.0, 157.0], [136.0, 156.0], [141.0, 156.0], [137.0, 158.0], [142.0, 155.0], [147.0, 152.0], [151.0, 155.0], [149.0, 150.0], [145.0, 150.0], [150.0, 158.0], [146.0, 150.0], [144.0, 156.0], [148.0, 150.0], [158.0, 156.0], [156.0, 150.0], [152.0, 152.0], [154.0, 150.0], [155.0, 150.0], [153.0, 150.0], [159.0, 151.0], [157.0, 152.0], [167.0, 156.0], [161.0, 155.0], [164.0, 156.0], [166.0, 156.0], [163.0, 156.0], [162.0, 156.0], [160.0, 156.0], [165.0, 156.0], [173.0, 143.0], [175.0, 140.0], [172.0, 143.0], [174.0, 102.5], [170.0, 142.0], [169.0, 156.0], [171.0, 152.0], [168.0, 155.0], [180.0, 143.0], [178.0, 148.0], [179.0, 146.0], [177.0, 149.0], [176.0, 147.0], [181.0, 145.0], [183.0, 140.0], [182.0, 141.0], [191.0, 137.0], [188.0, 137.0], [186.0, 139.0], [190.0, 139.0], [184.0, 139.0], [185.0, 140.0], [187.0, 139.0], [189.0, 139.0], [196.0, 139.0], [197.0, 138.0], [198.0, 138.0], [195.0, 139.0], [192.0, 139.0], [193.0, 139.0], [194.0, 140.0], [200.0, 137.0], [1.0, 804.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.816666666666667, "minX": 1.68850008E12, "maxY": 171.38333333333333, "series": [{"data": [[1.68850128E12, 151.3], [1.6885029E12, 146.18333333333334], [1.68850008E12, 3.816666666666667], [1.6885023E12, 170.4], [1.68850452E12, 161.86666666666667], [1.6885017E12, 143.13333333333333], [1.68850392E12, 168.26666666666668], [1.68850068E12, 147.03333333333333], [1.6885011E12, 151.65], [1.68850332E12, 158.68333333333334], [1.68850146E12, 143.93333333333334], [1.68850368E12, 169.0], [1.68850026E12, 151.48333333333332], [1.6885047E12, 153.55], [1.68850308E12, 147.56666666666666], [1.6885041E12, 167.0], [1.68850086E12, 152.01666666666668], [1.68850248E12, 169.3], [1.68850188E12, 151.93333333333334], [1.6885035E12, 170.31666666666666], [1.68850014E12, 157.5], [1.68850194E12, 169.18333333333334], [1.68850416E12, 169.73333333333332], [1.68850074E12, 152.9], [1.68850134E12, 150.68333333333334], [1.68850356E12, 167.35], [1.68850296E12, 151.06666666666666], [1.68850458E12, 115.83333333333333], [1.68850398E12, 169.5], [1.68850236E12, 165.3], [1.68850032E12, 158.16666666666666], [1.68850272E12, 145.48333333333332], [1.68850434E12, 137.78333333333333], [1.68850092E12, 160.86666666666667], [1.68850374E12, 168.65], [1.68850212E12, 169.3], [1.68850152E12, 145.66666666666666], [1.68850314E12, 151.7], [1.6885005E12, 149.88333333333333], [1.68850254E12, 151.93333333333334], [1.68850476E12, 114.48333333333333], [1.68850482E12, 147.18333333333334], [1.68850098E12, 159.98333333333332], [1.6885032E12, 150.58333333333334], [1.6885026E12, 169.71666666666667], [1.68850422E12, 168.78333333333333], [1.688502E12, 168.58333333333334], [1.68850362E12, 166.9], [1.68850038E12, 99.51666666666667], [1.6885014E12, 140.81666666666666], [1.68850302E12, 150.18333333333334], [1.68850176E12, 162.13333333333333], [1.68850338E12, 171.38333333333333], [1.68850116E12, 151.03333333333333], [1.68850056E12, 110.15], [1.68850278E12, 150.43333333333334], [1.68850218E12, 166.6], [1.6885044E12, 102.5], [1.68850158E12, 169.73333333333332], [1.6885038E12, 166.61666666666667], [1.68850386E12, 168.41666666666666], [1.68850224E12, 169.83333333333334], [1.68850044E12, 139.65], [1.68850164E12, 152.9], [1.68850326E12, 146.71666666666667], [1.68850104E12, 143.4], [1.68850266E12, 169.76666666666668], [1.68850488E12, 29.416666666666668], [1.68850206E12, 163.36666666666667], [1.68850428E12, 165.63333333333333], [1.68850062E12, 109.63333333333334], [1.68850242E12, 171.01666666666668], [1.68850464E12, 148.6], [1.68850182E12, 168.75], [1.68850404E12, 170.9], [1.68850122E12, 135.65], [1.68850344E12, 164.55], [1.6885002E12, 131.13333333333333], [1.68850284E12, 151.1], [1.68850446E12, 156.26666666666668], [1.6885008E12, 147.91666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68850488E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68850008E12, "maxY": 171.38333333333333, "series": [{"data": [[1.68850128E12, 151.3], [1.6885029E12, 146.18333333333334], [1.68850008E12, 3.7666666666666666], [1.6885023E12, 170.35], [1.68850452E12, 162.01666666666668], [1.6885017E12, 143.13333333333333], [1.68850392E12, 168.26666666666668], [1.68850068E12, 146.86666666666667], [1.6885011E12, 151.65], [1.68850332E12, 158.68333333333334], [1.68850146E12, 143.93333333333334], [1.68850368E12, 169.0], [1.68850026E12, 151.16666666666666], [1.6885047E12, 153.73333333333332], [1.68850308E12, 147.56666666666666], [1.6885041E12, 167.0], [1.68850086E12, 152.01666666666668], [1.68850248E12, 169.33333333333334], [1.68850188E12, 151.93333333333334], [1.6885035E12, 170.31666666666666], [1.68850014E12, 157.13333333333333], [1.68850194E12, 169.18333333333334], [1.68850416E12, 169.73333333333332], [1.68850074E12, 152.9], [1.68850134E12, 150.68333333333334], [1.68850356E12, 167.36666666666667], [1.68850296E12, 151.06666666666666], [1.68850458E12, 116.0], [1.68850398E12, 169.5], [1.68850236E12, 165.3], [1.68850032E12, 158.35], [1.68850272E12, 145.48333333333332], [1.68850434E12, 138.03333333333333], [1.68850092E12, 160.86666666666667], [1.68850374E12, 168.65], [1.68850212E12, 169.3], [1.68850152E12, 145.66666666666666], [1.68850314E12, 151.7], [1.6885005E12, 149.98333333333332], [1.68850254E12, 151.9], [1.68850476E12, 114.23333333333333], [1.68850482E12, 147.31666666666666], [1.68850098E12, 159.98333333333332], [1.6885032E12, 150.58333333333334], [1.6885026E12, 169.76666666666668], [1.68850422E12, 168.78333333333333], [1.688502E12, 168.63333333333333], [1.68850362E12, 166.88333333333333], [1.68850038E12, 99.56666666666666], [1.6885014E12, 140.81666666666666], [1.68850302E12, 150.18333333333334], [1.68850176E12, 162.13333333333333], [1.68850338E12, 171.38333333333333], [1.68850116E12, 151.03333333333333], [1.68850056E12, 110.46666666666667], [1.68850278E12, 150.43333333333334], [1.68850218E12, 166.6], [1.6885044E12, 102.35], [1.68850158E12, 169.73333333333332], [1.6885038E12, 166.61666666666667], [1.68850386E12, 168.41666666666666], [1.68850224E12, 169.88333333333333], [1.68850044E12, 139.41666666666666], [1.68850164E12, 152.9], [1.68850326E12, 146.71666666666667], [1.68850104E12, 143.4], [1.68850266E12, 169.71666666666667], [1.68850488E12, 29.7], [1.68850206E12, 163.31666666666666], [1.68850428E12, 165.71666666666667], [1.68850062E12, 109.38333333333334], [1.68850242E12, 171.01666666666668], [1.68850464E12, 148.28333333333333], [1.68850182E12, 168.75], [1.68850404E12, 170.9], [1.68850122E12, 135.65], [1.68850344E12, 164.55], [1.6885002E12, 131.45], [1.68850284E12, 151.1], [1.68850446E12, 156.08333333333334], [1.6885008E12, 147.91666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68850476E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68850488E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68850008E12, "maxY": 171.38333333333333, "series": [{"data": [[1.68850128E12, 151.3], [1.6885029E12, 146.18333333333334], [1.68850008E12, 3.7666666666666666], [1.6885023E12, 170.35], [1.68850452E12, 162.01666666666668], [1.6885017E12, 143.13333333333333], [1.68850392E12, 168.26666666666668], [1.68850068E12, 146.86666666666667], [1.6885011E12, 151.65], [1.68850332E12, 158.68333333333334], [1.68850146E12, 143.93333333333334], [1.68850368E12, 169.0], [1.68850026E12, 151.16666666666666], [1.6885047E12, 153.73333333333332], [1.68850308E12, 147.56666666666666], [1.6885041E12, 167.0], [1.68850086E12, 152.01666666666668], [1.68850248E12, 169.33333333333334], [1.68850188E12, 151.93333333333334], [1.6885035E12, 170.31666666666666], [1.68850014E12, 157.13333333333333], [1.68850194E12, 169.18333333333334], [1.68850416E12, 169.73333333333332], [1.68850074E12, 152.9], [1.68850134E12, 150.68333333333334], [1.68850356E12, 167.36666666666667], [1.68850296E12, 151.06666666666666], [1.68850458E12, 116.0], [1.68850398E12, 169.5], [1.68850236E12, 165.3], [1.68850032E12, 158.35], [1.68850272E12, 145.48333333333332], [1.68850434E12, 138.03333333333333], [1.68850092E12, 160.86666666666667], [1.68850374E12, 168.65], [1.68850212E12, 169.3], [1.68850152E12, 145.66666666666666], [1.68850314E12, 151.7], [1.6885005E12, 149.98333333333332], [1.68850254E12, 151.9], [1.68850476E12, 114.23333333333333], [1.68850482E12, 147.31666666666666], [1.68850098E12, 159.98333333333332], [1.6885032E12, 150.58333333333334], [1.6885026E12, 169.76666666666668], [1.68850422E12, 168.78333333333333], [1.688502E12, 168.63333333333333], [1.68850362E12, 166.88333333333333], [1.68850038E12, 99.56666666666666], [1.6885014E12, 140.81666666666666], [1.68850302E12, 150.18333333333334], [1.68850176E12, 162.13333333333333], [1.68850338E12, 171.38333333333333], [1.68850116E12, 151.03333333333333], [1.68850056E12, 110.46666666666667], [1.68850278E12, 150.43333333333334], [1.68850218E12, 166.6], [1.6885044E12, 102.35], [1.68850158E12, 169.73333333333332], [1.6885038E12, 166.61666666666667], [1.68850386E12, 168.41666666666666], [1.68850224E12, 169.88333333333333], [1.68850044E12, 139.41666666666666], [1.68850164E12, 152.9], [1.68850326E12, 146.71666666666667], [1.68850104E12, 143.4], [1.68850266E12, 169.71666666666667], [1.68850488E12, 29.7], [1.68850206E12, 163.31666666666666], [1.68850428E12, 165.71666666666667], [1.68850062E12, 109.38333333333334], [1.68850242E12, 171.01666666666668], [1.68850464E12, 148.28333333333333], [1.68850182E12, 168.75], [1.68850404E12, 170.9], [1.68850122E12, 135.65], [1.68850344E12, 164.55], [1.6885002E12, 131.45], [1.68850284E12, 151.1], [1.68850446E12, 156.08333333333334], [1.6885008E12, 147.91666666666666]], "isOverall": false, "label": "create cin-success", "isController": false}, {"data": [[1.68850476E12, 0.06666666666666667]], "isOverall": false, "label": "create cin-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68850488E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68850008E12, "maxY": 171.38333333333333, "series": [{"data": [[1.68850128E12, 151.3], [1.6885029E12, 146.18333333333334], [1.68850008E12, 3.7666666666666666], [1.6885023E12, 170.35], [1.68850452E12, 162.01666666666668], [1.6885017E12, 143.13333333333333], [1.68850392E12, 168.26666666666668], [1.68850068E12, 146.86666666666667], [1.6885011E12, 151.65], [1.68850332E12, 158.68333333333334], [1.68850146E12, 143.93333333333334], [1.68850368E12, 169.0], [1.68850026E12, 151.16666666666666], [1.6885047E12, 153.73333333333332], [1.68850308E12, 147.56666666666666], [1.6885041E12, 167.0], [1.68850086E12, 152.01666666666668], [1.68850248E12, 169.33333333333334], [1.68850188E12, 151.93333333333334], [1.6885035E12, 170.31666666666666], [1.68850014E12, 157.13333333333333], [1.68850194E12, 169.18333333333334], [1.68850416E12, 169.73333333333332], [1.68850074E12, 152.9], [1.68850134E12, 150.68333333333334], [1.68850356E12, 167.36666666666667], [1.68850296E12, 151.06666666666666], [1.68850458E12, 116.0], [1.68850398E12, 169.5], [1.68850236E12, 165.3], [1.68850032E12, 158.35], [1.68850272E12, 145.48333333333332], [1.68850434E12, 138.03333333333333], [1.68850092E12, 160.86666666666667], [1.68850374E12, 168.65], [1.68850212E12, 169.3], [1.68850152E12, 145.66666666666666], [1.68850314E12, 151.7], [1.6885005E12, 149.98333333333332], [1.68850254E12, 151.9], [1.68850476E12, 114.23333333333333], [1.68850482E12, 147.31666666666666], [1.68850098E12, 159.98333333333332], [1.6885032E12, 150.58333333333334], [1.6885026E12, 169.76666666666668], [1.68850422E12, 168.78333333333333], [1.688502E12, 168.63333333333333], [1.68850362E12, 166.88333333333333], [1.68850038E12, 99.56666666666666], [1.6885014E12, 140.81666666666666], [1.68850302E12, 150.18333333333334], [1.68850176E12, 162.13333333333333], [1.68850338E12, 171.38333333333333], [1.68850116E12, 151.03333333333333], [1.68850056E12, 110.46666666666667], [1.68850278E12, 150.43333333333334], [1.68850218E12, 166.6], [1.6885044E12, 102.35], [1.68850158E12, 169.73333333333332], [1.6885038E12, 166.61666666666667], [1.68850386E12, 168.41666666666666], [1.68850224E12, 169.88333333333333], [1.68850044E12, 139.41666666666666], [1.68850164E12, 152.9], [1.68850326E12, 146.71666666666667], [1.68850104E12, 143.4], [1.68850266E12, 169.71666666666667], [1.68850488E12, 29.7], [1.68850206E12, 163.31666666666666], [1.68850428E12, 165.71666666666667], [1.68850062E12, 109.38333333333334], [1.68850242E12, 171.01666666666668], [1.68850464E12, 148.28333333333333], [1.68850182E12, 168.75], [1.68850404E12, 170.9], [1.68850122E12, 135.65], [1.68850344E12, 164.55], [1.6885002E12, 131.45], [1.68850284E12, 151.1], [1.68850446E12, 156.08333333333334], [1.6885008E12, 147.91666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68850476E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68850488E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

